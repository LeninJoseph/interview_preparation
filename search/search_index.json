{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#importance-of-preparation","title":"Importance of Preparation","text":"<p>Preparation is a critical step in achieving success in any endeavor. It helps build confidence, reduces anxiety, and ensures that you are ready to tackle challenges effectively. Whether it's for an interview, an exam, or a presentation, preparation allows you to organize your thoughts, identify potential gaps, and refine your approach.</p>"},{"location":"#benefits-of-preparation","title":"Benefits of Preparation","text":"<ul> <li>Increased Confidence: Being well-prepared gives you the assurance to perform at your best.</li> <li>Better Time Management: Planning ahead helps you allocate time efficiently.</li> <li>Improved Outcomes: Preparation often leads to better results as you are more equipped to handle unexpected situations.</li> </ul> <p>How to Prepare</p> <ol> <li>Set Clear Goals: Define what you want to achieve and break it down into smaller, manageable tasks.</li> <li>Gather Resources: Collect all necessary materials, such as books, notes, or online resources.</li> <li>Create a Plan: Develop a schedule that outlines what to study or practice and when.</li> <li>Practice Regularly: Consistent practice helps reinforce knowledge and skills.</li> <li>Seek Feedback: Share your progress with mentors or peers to identify areas for improvement.</li> <li>Stay Positive: Maintain a positive mindset and focus on your progress rather than perfection.</li> </ol> <p>By following these steps, you can approach your preparation systematically and maximize your chances of success.</p>"},{"location":"#introduction-to-interview-preparation","title":"Introduction to Interview Preparation","text":"<p>Welcome to the Interview Preparation Guide! This repository is designed to help you systematically prepare for job interviews, covering both technical and non-technical aspects.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Key technical concepts and problem-solving techniques.</li> <li>Strategies for answering behavioral questions effectively.</li> <li>Best practices for system design interviews.</li> <li>Tips for acing coding challenges.</li> <li>How to simulate real interview scenarios with mock interviews.</li> </ul> <p>How to Use This Guide</p> <ol> <li>Start to navigate through the topics.</li> <li>Follow the sections in order or focus on areas where you need improvement.</li> <li>Practice consistently and track your progress.</li> </ol> <p>Good luck with your preparation!</p>"},{"location":"database/","title":"Database","text":"<p>A database is an organized collection of data that can be easily accessed, managed, and updated. Databases are used to store information in a structured way, enabling efficient retrieval and manipulation of data.</p>"},{"location":"database/#types-of-databases","title":"Types of Databases","text":"<ol> <li> <p>Relational Databases (RDBMS):</p> <ul> <li>Data is stored in tables with rows and columns.</li> <li>Uses SQL (Structured Query Language) for querying.</li> <li>Examples: MySQL, PostgreSQL, Oracle Database.</li> </ul> </li> <li> <p>NoSQL Databases:</p> <ul> <li>Designed for unstructured or semi-structured data.</li> <li>Types include document, key-value, column-family, and graph databases.</li> <li>Examples: MongoDB, Cassandra, Redis.</li> </ul> </li> <li> <p>In-Memory Databases:</p> <ul> <li>Stores data in memory for faster access.</li> <li>Examples: Redis, Memcached.</li> </ul> </li> <li> <p>Cloud Databases:</p> <ul> <li>Hosted on cloud platforms, offering scalability and flexibility.</li> <li>Examples: Amazon RDS, Google Cloud Spanner.</li> </ul> </li> </ol>"},{"location":"database/#key-concepts","title":"Key Concepts","text":"<ul> <li>Schema: Defines the structure of the database (tables, fields, relationships).</li> <li>Indexing: Improves query performance by creating data structures for faster lookups.</li> <li>Transactions: Ensures data consistency with ACID properties (Atomicity, Consistency, Isolation, Durability).</li> <li>Normalization: Organizes data to reduce redundancy and improve integrity.</li> </ul>"},{"location":"database/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>E-commerce: Storing product catalogs, customer data, and transactions.</li> <li>Social Media: Managing user profiles, posts, and interactions.</li> <li>Analytics: Storing and querying large datasets for insights.</li> </ul>"},{"location":"database/#best-practices","title":"Best Practices","text":"<ul> <li>Use appropriate indexing to optimize performance.</li> <li>Regularly back up your database to prevent data loss.</li> <li>Monitor and tune queries to avoid bottlenecks.</li> <li>Implement proper security measures, such as encryption and access control.</li> </ul>"},{"location":"database/#conclusion","title":"Conclusion","text":"<p>Databases are a fundamental component of modern software systems, enabling efficient data storage and retrieval. Choosing the right type of database and following best practices ensures optimal performance and reliability.</p>"},{"location":"database/db_concepts/","title":"Database Concepts","text":"<p>A database is an organized collection of data that can be easily accessed, managed, and updated. Below are some key concepts related to databases:</p>"},{"location":"database/db_concepts/#1-data","title":"1. Data","text":"<p>Data refers to raw facts and figures that are stored in a database. It can be structured (e.g., tables) or unstructured (e.g., documents, images).</p>"},{"location":"database/db_concepts/#2-database-management-system-dbms","title":"2. Database Management System (DBMS)","text":"<p>A DBMS is software that allows users to define, create, maintain, and control access to the database. Examples include MySQL, PostgreSQL, MongoDB, and Oracle.</p>"},{"location":"database/db_concepts/#3-tables","title":"3. Tables","text":"<p>In relational databases, data is stored in tables, which consist of rows (records) and columns (fields).</p>"},{"location":"database/db_concepts/#4-primary-key","title":"4. Primary Key","text":"<p>A primary key is a unique identifier for a record in a table. It ensures that no two rows have the same value for this key.</p>"},{"location":"database/db_concepts/#5-foreign-key","title":"5. Foreign Key","text":"<p>A foreign key is a field in one table that refers to the primary key in another table, establishing a relationship between the two tables.</p>"},{"location":"database/db_concepts/#6-normalization","title":"6. Normalization","text":"<p>Normalization is the process of organizing data to reduce redundancy and improve data integrity. It involves dividing large tables into smaller ones and defining relationships between them.</p>"},{"location":"database/db_concepts/#7-transactions","title":"7. Transactions","text":"<p>Transaction is a sequence of operations performed as a single logical unit of work. Transactions follow the ACID properties:</p> <ul> <li>Atomicity: All operations succeed or none do.</li> <li>Consistency: The database remains in a valid state.</li> <li>Isolation: Transactions do not interfere with each other.</li> <li>Durability: Changes are permanent once a transaction is committed.</li> </ul>"},{"location":"database/db_concepts/#8-indexing","title":"8. Indexing","text":"<p>Indexing improves the speed of data retrieval by creating a data structure that allows quick lookups.</p>"},{"location":"database/db_concepts/#9-sql","title":"9. SQL","text":"<p>Structured Query Language (SQL) is used to interact with relational databases. Common SQL commands include: - <code>SELECT</code>: Retrieve data. - <code>INSERT</code>: Add new data. - <code>UPDATE</code>: Modify existing data. - <code>DELETE</code>: Remove data.</p>"},{"location":"database/db_concepts/#10-nosql-databases","title":"10. NoSQL Databases","text":"<p>NoSQL databases are non-relational and are designed for specific use cases like handling large-scale, unstructured data. Examples include MongoDB, Cassandra, and Redis.</p>"},{"location":"database/db_concepts/#11-backup-and-recovery","title":"11. Backup and Recovery","text":"<p>Databases must have mechanisms for backup (creating copies of data) and recovery (restoring data in case of failure).</p>"},{"location":"database/db_concepts/#12-data-security","title":"12. Data Security","text":"<p>Ensuring data security involves controlling access, encrypting sensitive data, and protecting against unauthorized access or breaches.</p> <p>Understanding these concepts is fundamental for designing, managing, and optimizing databases effectively.</p>"},{"location":"database/joins/","title":"Joins in SQL","text":"<p>Joins in SQL are used to combine rows from two or more tables based on a related column between them. They allow you to retrieve data that is spread across multiple tables in a relational database.</p>"},{"location":"database/joins/#types-of-joins","title":"Types of Joins","text":""},{"location":"database/joins/#1-inner-join","title":"1. Inner Join","text":"<p>An inner join returns only the rows where there is a match in both tables.</p> <pre><code>SELECT columns\nFROM table1\nINNER JOIN table2\nON table1.column = table2.column;\n</code></pre>"},{"location":"database/joins/#2-left-join-or-left-outer-join","title":"2. Left Join (or Left Outer Join)","text":"<p>A left join returns all rows from the left table and the matching rows from the right table. If no match is found, NULL values are returned for columns from the right table.</p> <pre><code>SELECT columns\nFROM table1\nLEFT JOIN table2\nON table1.column = table2.column;\n</code></pre>"},{"location":"database/joins/#3-right-join-or-right-outer-join","title":"3. Right Join (or Right Outer Join)","text":"<p>A right join returns all rows from the right table and the matching rows from the left table. If no match is found, NULL values are returned for columns from the left table.</p> <pre><code>SELECT columns\nFROM table1\nRIGHT JOIN table2\nON table1.column = table2.column;\n</code></pre>"},{"location":"database/joins/#4-full-join-or-full-outer-join","title":"4. Full Join (or Full Outer Join)","text":"<p>A full join returns all rows when there is a match in either table. If there is no match, NULL values are returned for the non-matching rows.</p> <pre><code>SELECT columns\nFROM table1\nFULL JOIN table2\nON table1.column = table2.column;\n</code></pre>"},{"location":"database/joins/#5-cross-join","title":"5. Cross Join","text":"<p>A cross join returns the Cartesian product of the two tables, meaning every row in the first table is combined with every row in the second table.</p> <pre><code>SELECT columns\nFROM table1\nCROSS JOIN table2;\n</code></pre>"},{"location":"database/joins/#6-self-join","title":"6. Self Join","text":"<p>A self join is a join where a table is joined with itself. It is useful for comparing rows within the same table.</p> <pre><code>SELECT a.column, b.column\nFROM table a\nINNER JOIN table b\nON a.column = b.column;\n</code></pre>"},{"location":"database/joins/#7-natural-join","title":"7. Natural Join","text":"<p>A natural join automatically joins tables based on columns with the same name and compatible data types.</p> <pre><code>SELECT columns\nFROM table1\nNATURAL JOIN table2;\n</code></pre>"},{"location":"database/joins/#summary-table","title":"Summary Table","text":"Join Type Description Inner Join Returns rows with matching values in both tables. Left Join Returns all rows from the left table and matched rows from the right. Right Join Returns all rows from the right table and matched rows from the left. Full Join Returns rows when there is a match in either table. Cross Join Returns the Cartesian product of both tables. Self Join Joins a table with itself. Natural Join Automatically joins tables based on common column names."},{"location":"database/nosql_concepts/","title":"NoSQL Concepts","text":""},{"location":"database/nosql_concepts/#what-is-nosql","title":"What is NoSQL?","text":"<p>NoSQL refers to a class of database management systems that do not follow the traditional relational database model. It is designed to handle large volumes of unstructured, semi-structured, or structured data.</p>"},{"location":"database/nosql_concepts/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Schema-less: No fixed schema, allowing flexibility in data storage.</li> <li>Horizontal Scalability: Easily scales out by adding more servers.</li> <li>High Performance: Optimized for fast read/write operations.</li> <li>Distributed Architecture: Data is distributed across multiple nodes.</li> </ul>"},{"location":"database/nosql_concepts/#types-of-nosql-databases","title":"Types of NoSQL Databases","text":"<ol> <li>Document Stores:<ul> <li>Example: MongoDB, CouchDB</li> <li>Stores data as JSON or BSON documents.</li> </ul> </li> <li>Key-Value Stores:<ul> <li>Example: Redis, DynamoDB</li> <li>Data is stored as key-value pairs.</li> </ul> </li> <li>Column-Family Stores:<ul> <li>Example: Cassandra, HBase</li> <li>Data is stored in columns rather than rows.</li> </ul> </li> <li>Graph Databases:<ul> <li>Example: Neo4j, ArangoDB</li> <li>Designed for relationships and graph-based queries.</li> </ul> </li> </ol>"},{"location":"database/nosql_concepts/#advantages","title":"Advantages","text":"<ul> <li>Handles large volumes of data efficiently.</li> <li>Flexible data models.</li> <li>High availability and fault tolerance.</li> <li>Suitable for modern applications like IoT, real-time analytics, and social networks.</li> </ul>"},{"location":"database/nosql_concepts/#use-cases","title":"Use Cases","text":"<ul> <li>Content management systems.</li> <li>Real-time analytics.</li> <li>Recommendation engines.</li> <li>Internet of Things (IoT) applications.</li> </ul>"},{"location":"database/nosql_concepts/#challenges","title":"Challenges","text":"<ul> <li>Lack of standardization.</li> <li>Limited support for complex queries.</li> <li>Requires careful design for consistency and partitioning.</li> </ul>"},{"location":"database/nosql_concepts/#conclusion","title":"Conclusion","text":"<p>NoSQL databases are a powerful alternative to traditional relational databases, offering scalability and flexibility for modern application needs.</p>"},{"location":"design_patterns/","title":"Design Patterns","text":"<p>Design patterns are proven solutions to common problems in software design. They provide a template for how to structure and solve issues in a way that promotes code reusability, scalability, and maintainability.</p>"},{"location":"design_patterns/#types-of-design-patterns","title":"Types of Design Patterns","text":"<p>Design patterns are generally categorized into three main types:</p>"},{"location":"design_patterns/#1-creational-patterns","title":"1. Creational Patterns","text":"<p>Creational patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. Examples include:</p> <ul> <li>Singleton: Ensures a class has only one instance and provides a global point of access to it.</li> <li>Factory Method: Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.</li> <li>Builder: Separates the construction of a complex object from its representation.</li> </ul>"},{"location":"design_patterns/#2-structural-patterns","title":"2. Structural Patterns","text":"<p>Structural patterns focus on the composition of classes and objects to form larger structures. Examples include:</p> <ul> <li>Adapter: Allows incompatible interfaces to work together.</li> <li>Composite: Composes objects into tree structures to represent part-whole hierarchies.</li> <li>Decorator: Adds new functionality to an object dynamically.</li> </ul>"},{"location":"design_patterns/#3-behavioral-patterns","title":"3. Behavioral Patterns","text":"<p>Behavioral patterns are concerned with communication between objects. Examples include:</p> <ul> <li>Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.</li> <li>Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.</li> <li>Command: Encapsulates a request as an object, thereby allowing users to parameterize clients with different requests.</li> </ul>"},{"location":"design_patterns/#benefits-of-using-design-patterns","title":"Benefits of Using Design Patterns","text":"<ul> <li>Reusability: Promotes the reuse of proven solutions.</li> <li>Maintainability: Makes code easier to understand and modify.</li> <li>Scalability: Helps in designing systems that can grow without major changes.</li> </ul>"},{"location":"design_patterns/#conclusion","title":"Conclusion","text":"<p>Design patterns are an essential tool for software developers. By understanding and applying them, you can create robust, flexible, and maintainable software systems.</p>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/","title":"API Gateway Pattern","text":"<p>The API Gateway design pattern is a structural pattern used primarily in microservices architectures to provide a single entry point for all client requests.</p>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#what-is-it","title":"\ud83e\uddf1 What Is It?","text":"<p>An API Gateway is a server that acts as an intermediary between clients and backend services. It handles requests, routes them to the appropriate service, aggregates the results, and returns them to the client.</p>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#responsibilities-of-an-api-gateway","title":"\u2705 Responsibilities of an API Gateway:","text":"<ol> <li>Routing \u2013 Directs requests to the appropriate microservice.</li> <li>Aggregation \u2013 Combines results from multiple services into one response.</li> <li>Authentication &amp; Authorization \u2013 Validates tokens and permissions.</li> <li>Rate Limiting &amp; Throttling \u2013 Prevents abuse by limiting request frequency.</li> <li>Caching \u2013 Reduces load on backend services by caching responses.</li> <li>Logging &amp; Monitoring \u2013 Tracks requests and performance.</li> <li>Transformation \u2013 Converts protocols (e.g., HTTP to WebSocket) or request/response formats.</li> </ol>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#architecture-diagram","title":"\ud83d\udce6 Architecture Diagram:","text":"<pre><code>        +---------+\n        |  Client |\n        +----+----+\n             |\n             v\n      +-------------+\n      | API Gateway |\n      +------+------+\n             |\n  +----------+----------+\n  |          |          |\n  v          v          v\nService A  Service B  Service C\n</code></pre>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#example-with-nodejs-express","title":"\ud83e\uddd1\u200d\ud83d\udcbb Example (with Node.js + Express):","text":"<pre><code>const express = require(\"express\");\nconst app = express();\nconst axios = require(\"axios\");\n\napp.get(\"/user/:id\", async (req, res) =&gt; {\n  // Example of request routing and aggregation\n  try {\n    const user = await axios.get(`http://user-service/users/${req.params.id}`);\n    const orders = await axios.get(`http://order-service/orders?userId=${req.params.id}`);\n\n    res.json({\n      user: user.data,\n      orders: orders.data\n    });\n  } catch (err) {\n    res.status(500).json({ message: \"Error fetching data\" });\n  }\n});\n\napp.listen(3000, () =&gt; console.log(\"API Gateway listening on port 3000\"));\n</code></pre>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#benefits","title":"\ud83d\ude80 Benefits:","text":"<ul> <li>Centralized entry point for client interactions</li> <li>Simplifies client logic (clients don\u2019t need to call multiple services)</li> <li>Enforces security and policy in one place</li> <li>Enables backend evolution (you can split/merge services without affecting clients)</li> </ul>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#drawbacks","title":"\u26a0\ufe0f Drawbacks:","text":"<ul> <li>Single point of failure (unless replicated)</li> <li>Adds a slight latency overhead</li> <li>Can become a bottleneck if not properly scaled</li> </ul>"},{"location":"design_patterns/real_time_patterns/api_gateway_pattern/#popular-tools-for-real-world-api-gateways","title":"\ud83d\udee0 Popular Tools for Real-World API Gateways:","text":"<ul> <li>AWS API Gateway</li> <li>Kong</li> <li>NGINX</li> <li>Zuul (Netflix)</li> <li>Express Gateway (Node.js)</li> <li>Apigee (Google)</li> </ul>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/","title":"Dependency Injection (DI) (Autowired)","text":"<p>Dependency Injection (DI) is a design pattern used in software development to achieve Inversion of Control (IoC) between classes and their dependencies. It allows a class to receive its dependencies from an external source rather than creating them internally, promoting loose coupling and easier testing.</p>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#key-concepts","title":"Key Concepts","text":"<ol> <li>Dependency: An object that a class requires to function.</li> <li>Injection: The process of providing the dependency to a class.</li> </ol>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#types-of-dependency-injection","title":"Types of Dependency Injection","text":"<ol> <li> <p>Constructor Injection: Dependencies are provided through a class constructor.     ```python     class Repository:         def get_data(self):             return \"Data from Repository\"</p> <p>class Service:     def init(self, repository: Repository):         self.repository = repository</p> <pre><code>def serve(self):\n    return self.repository.get_data()\n</code></pre> </li> <li> <p>Setter Injection: Dependencies are provided through setter methods.     ```python     class Repository:         def get_data(self):             return \"Data from Repository\"</p> <p>class Service:     def init(self):         self.repository = None</p> <pre><code>def set_repository(self, repository: Repository):\n    self.repository = repository\n\ndef serve(self):\n    return self.repository.get_data()\n</code></pre> </li> <li> <p>Interface Injection: Dependencies are provided through an interface method.     ```python     from abc import ABC, abstractmethod</p> <p>class DependencyInjector(ABC):     @abstractmethod     def inject(self, service):         pass</p> <p>class Repository:     def get_data(self):         return \"Data from Repository\"</p> <p>class Service:     def init(self):         self.repository = None</p> <pre><code>def serve(self):\n    return self.repository.get_data()\n</code></pre> <p>class MyInjector(DependencyInjector):     def inject(self, service: Service):         service.repository = Repository()</p> </li> </ol>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#usage","title":"Usage","text":"<p>repo = Repository() service = Service(repo) print(service.serve()) ```</p>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#usage_1","title":"Usage","text":"<p>repo = Repository() service = Service() service.set_repository(repo) print(service.serve()) ```</p>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#usage_2","title":"Usage","text":"<p>service = Service() injector = MyInjector() injector.inject(service) print(service.serve()) ```</p>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#benefits-of-dependency-injection","title":"Benefits of Dependency Injection","text":"<ul> <li>Loose Coupling: Classes are not tightly bound to their dependencies.</li> <li>Improved Testability: Dependencies can be mocked or stubbed for unit testing.</li> <li>Flexibility: Easier to swap implementations of dependencies.</li> <li>Maintainability: Clear separation of concerns.</li> </ul>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#example-in-python-frameworks","title":"Example in Python Frameworks","text":"<p>Frameworks like Flask and FastAPI support DI through extensions or built-in mechanisms. Example in FastAPI:</p> <pre><code>from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\nclass Repository:\n    def get_data(self):\n        return \"Data from Repository\"\n\ndef get_repository():\n    return Repository()\n\n@app.get(\"/\")\ndef read_root(repository: Repository = Depends(get_repository)):\n    return {\"data\": repository.get_data()}\n</code></pre>"},{"location":"design_patterns/real_time_patterns/dependancy_injection_pattern/#conclusion","title":"Conclusion","text":"<p>Dependency Injection is a powerful design pattern that simplifies code maintenance, testing, and scalability by decoupling components and managing dependencies effectively.</p>"},{"location":"design_patterns/real_time_patterns/factory_pattern/","title":"Factory Pattern","text":"<p>The Factory Pattern is a creational design pattern that provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects that will be created. It helps promote loose coupling by delegating the instantiation logic to child classes.</p>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#key-features","title":"Key Features","text":"<ul> <li>Encapsulates object creation logic.</li> <li>Promotes code reusability and scalability.</li> <li>Reduces tight coupling between client code and specific classes.</li> </ul>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#structure","title":"Structure","text":"<ol> <li>Product: Defines the interface of objects the factory method creates.</li> <li>ConcreteProduct: Implements the Product interface.</li> <li>Creator: Declares the factory method that returns objects of type Product.</li> <li>ConcreteCreator: Overrides the factory method to return instances of ConcreteProduct.</li> </ol>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#example-in-python","title":"Example in Python","text":"<pre><code># filepath: /Users/lenin.pitchai/Documents/LENIN/Personal/interview_preparation/docs/design_pattern/real_time_patterns/factory_pattern.md\nfrom abc import ABC, abstractmethod\n\n# Product Interface\nclass Shape(ABC):\n    @abstractmethod\n    def draw(self):\n        pass\n\n# Concrete Products\nclass Circle(Shape):\n    def draw(self):\n        return \"Drawing a Circle\"\n\nclass Square(Shape):\n    def draw(self):\n        return \"Drawing a Square\"\n\n# Creator\nclass ShapeFactory:\n    @staticmethod\n    def get_shape(shape_type):\n        if shape_type == \"Circle\":\n            return Circle()\n        elif shape_type == \"Square\":\n            return Square()\n        else:\n            raise ValueError(\"Unknown shape type\")\n\n# Client Code\nshape = ShapeFactory.get_shape(\"Circle\")\nprint(shape.draw())  # Output: Drawing a Circle\n</code></pre>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#advantages","title":"Advantages","text":"<ul> <li>Simplifies object creation.</li> <li>Promotes adherence to the Open/Closed Principle.</li> <li>Makes the code easier to test and maintain.</li> </ul>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#disadvantages","title":"Disadvantages","text":"<ul> <li>Can introduce complexity with many subclasses.</li> <li>May require additional effort to understand and implement.</li> </ul>"},{"location":"design_patterns/real_time_patterns/factory_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>When the exact type of object to be created is determined at runtime.</li> <li>When you want to centralize object creation logic to ensure consistency.</li> </ul>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/","title":"Resolver Pattern","text":"<p>The Resolver Pattern is commonly used in GraphQL APIs, but its core concept\u2014mapping a request to data retrieval logic\u2014can apply more broadly to systems involving query resolution or deferred execution.</p>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#what-is-the-resolver-pattern","title":"\ud83e\udde9 What is the Resolver Pattern?","text":"<p>In simple terms, a resolver is a function that resolves a value for a field or query. In the Resolver Pattern, each field or operation is mapped to a function that knows how to fetch or compute the data for it.</p> <p>This pattern promotes separation of concerns:</p> <ul> <li>Schemas define the structure</li> <li>Resolvers define the logic</li> </ul>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#where-is-it-used","title":"\ud83d\udd27 Where Is It Used?","text":"<ul> <li>GraphQL servers (most common use case)</li> <li>DI containers (Dependency Resolution)</li> <li>DNS resolvers (name \u2192 IP address)</li> <li>Service Locators (service name \u2192 implementation)</li> </ul> <p>Here, we\u2019ll focus on the GraphQL-style Resolver Pattern, which is most widely used.</p>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#graphql-resolver-pattern","title":"\ud83e\uddec GraphQL Resolver Pattern","text":""},{"location":"design_patterns/real_time_patterns/resolver_pattern/#1-graphql-schema","title":"1. GraphQL Schema","text":"<pre><code>type Query {\n    user(id: ID!): User\n}\n\ntype User {\n    id: ID!\n    name: String!\n    email: String!\n}\n</code></pre>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#2-resolvers-in-code-javascripttypescript","title":"2. Resolvers in Code (JavaScript/TypeScript)","text":"<pre><code>const resolvers = {\n    Query: {\n        user: async (_, { id }) =&gt; {\n            return await getUserById(id);  // You provide this function\n        },\n    },\n    User: {\n        email: (user) =&gt; {\n            // This can do transformations or access controls\n            return user.email;\n        },\n    }\n};\n</code></pre> <p>Each key (like <code>Query.user</code>) maps to a resolver function that receives:</p> <ul> <li><code>parent</code>: The parent object (used in nested fields)</li> <li><code>args</code>: Arguments passed in the query</li> <li><code>context</code>: Shared state or services (e.g., DB access, auth info)</li> <li><code>info</code>: Metadata about the query</li> </ul>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#advantages","title":"\u2705 Advantages","text":"<ul> <li>Decouples schema from business logic</li> <li>Allows fine-grained control over how data is fetched</li> <li>Makes complex nested queries possible</li> <li>Supports authorization, validation, and lazy loading</li> </ul>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#pitfalls","title":"\u274c Pitfalls","text":"<ul> <li>Can become messy with deeply nested resolvers (e.g., N+1 query problem)</li> <li>Without proper optimization, can affect performance</li> <li>Requires good error handling for maintainability</li> </ul>"},{"location":"design_patterns/real_time_patterns/resolver_pattern/#resolver-pattern-beyond-graphql","title":"\ud83d\udee0\ufe0f Resolver Pattern Beyond GraphQL","text":"<ul> <li>DNS Resolver: Resolves domain names to IP addresses.</li> <li> <p>Dependency Injection (DI) Resolver: Resolves dependencies dynamically from a container.</p> <p><code>python service = container.resolve('UserService')</code></p> </li> </ul>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/","title":"Rule Engine Pattern","text":"<p>The Rule Engine Pattern is a design pattern used to define, manage, and execute business rules or logic independently of the application code. It provides a flexible and scalable way to handle complex decision-making processes by separating the rules from the core application logic.</p>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/#key-concepts","title":"Key Concepts","text":"<ol> <li>Rules: Individual pieces of logic or conditions that define specific behaviors or decisions.</li> <li>Rule Engine: A component responsible for evaluating and executing the rules.</li> <li>Facts: Data or inputs provided to the rule engine for evaluation.</li> <li>Actions: Operations performed when a rule is satisfied.</li> </ol>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/#benefits","title":"Benefits","text":"<ul> <li>Separation of Concerns: Keeps business rules separate from application logic, making the codebase cleaner and easier to maintain.</li> <li>Flexibility: Rules can be added, modified, or removed without changing the core application code.</li> <li>Reusability: Rules can be reused across different parts of the application or even in other projects.</li> <li>Scalability: Handles complex decision-making processes efficiently.</li> </ul>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/#implementation-steps","title":"Implementation Steps","text":"<ol> <li>Define Rules: Create rules as independent entities, often using a declarative format.</li> <li>Load Rules: Load the rules into the rule engine, either from a database, file, or in-memory configuration.</li> <li>Provide Facts: Supply the necessary data (facts) to the rule engine.</li> <li>Evaluate Rules: The rule engine evaluates the rules against the provided facts.</li> <li>Execute Actions: Perform the actions associated with the satisfied rules.</li> </ol>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/#example","title":"Example","text":"<pre><code>class Rule:\n    def __init__(self, condition, action):\n        self.condition = condition\n        self.action = action\n\n    def evaluate(self, facts):\n        if self.condition(facts):\n            self.action(facts)\n\nclass RuleEngine:\n    def __init__(self):\n        self.rules = []\n\n    def add_rule(self, rule):\n        self.rules.append(rule)\n\n    def execute(self, facts):\n        for rule in self.rules:\n            rule.evaluate(facts)\n\n# Example usage\ndef is_adult(facts):\n    return facts.get(\"age\", 0) &gt;= 18\n\ndef grant_access(facts):\n    print(\"Access granted!\")\n\nrule = Rule(is_adult, grant_access)\nengine = RuleEngine()\nengine.add_rule(rule)\n\nfacts = {\"age\": 20}\nengine.execute(facts)\n</code></pre>"},{"location":"design_patterns/real_time_patterns/rule_engine_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>Fraud detection systems</li> <li>Recommendation engines</li> <li>Workflow automation</li> <li>Access control systems</li> <li>Dynamic pricing models</li> </ul> <p>The Rule Engine Pattern is a powerful tool for building systems that require dynamic and adaptable business logic.</p>"},{"location":"design_patterns/real_time_patterns/template_method_pattern/","title":"Template Method Pattern","text":"<p>The Template Method Pattern is a behavioral design pattern that defines the skeleton of an algorithm in a base class but allows subclasses to override specific steps of the algorithm without changing its structure. This pattern promotes code reuse and enforces a consistent structure for algorithms.</p>"},{"location":"design_patterns/real_time_patterns/template_method_pattern/#bpmn-representation","title":"BPMN Representation","text":"<p>Below is a simplified BPMN (Business Process Model and Notation) diagram to represent the Template Method Pattern:</p> <pre><code>+-------------------+\n| Abstract Template |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 1 (Fixed) |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 2 (Hook)  |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 3 (Fixed) |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 4 (Hook)  |\n+-------------------+\n</code></pre> <p>In this diagram: - Fixed steps are implemented in the base class. - Hook steps are customizable by subclasses.</p>"},{"location":"design_patterns/real_time_patterns/template_method_pattern/#python-example","title":"Python Example","text":"<p>Here is an example of the Template Method Pattern in Python:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass DataProcessor(ABC):\n    \"\"\"Abstract Template Class\"\"\"\n\n    def process_data(self):\n    \"\"\"Template method defining the skeleton of the algorithm.\"\"\"\n    self.load_data()\n    self.clean_data()\n    self.analyze_data()\n    self.save_results()\n\n    def load_data(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Loading data...\")\n\n    def clean_data(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Cleaning data...\")\n\n    @abstractmethod\n    def analyze_data(self):\n    \"\"\"Hook step to be implemented by subclasses.\"\"\"\n    pass\n\n    def save_results(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Saving results...\")\n\nclass SalesDataProcessor(DataProcessor):\n    \"\"\"Concrete implementation for sales data.\"\"\"\n\n    def analyze_data(self):\n    print(\"Analyzing sales data...\")\n\nclass MarketingDataProcessor(DataProcessor):\n    \"\"\"Concrete implementation for marketing data.\"\"\"\n\n    def analyze_data(self):\n    print(\"Analyzing marketing data...\")\n\n# Usage\nif __name__ == \"__main__\":\n    sales_processor = SalesDataProcessor()\n    sales_processor.process_data()\n\n    print()\n\n    marketing_processor = MarketingDataProcessor()\n    marketing_processor.process_data()\n</code></pre>"},{"location":"design_patterns/real_time_patterns/template_method_pattern/#key-points","title":"Key Points","text":"<ol> <li>Template Method: The <code>process_data</code> method defines the algorithm's structure.</li> <li>Fixed Steps: Methods like <code>load_data</code>, <code>clean_data</code>, and <code>save_results</code> are implemented in the base class.</li> <li>Hook Steps: The <code>analyze_data</code> method is abstract and must be implemented by subclasses.</li> </ol> <p>This pattern ensures a consistent algorithm structure while allowing flexibility for specific steps.</p>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/","title":"Transformer Pattern","text":"<p>The Transformer Pattern is a design pattern used to convert data from one format or structure to another. It is commonly applied in scenarios where data transformation is required between different layers of an application, such as converting domain models to DTOs (Data Transfer Objects) or mapping API responses to internal data structures.</p>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#key-concepts","title":"Key Concepts","text":"<ol> <li>Input and Output: The pattern takes an input object and transforms it into an output object of a different type or structure.</li> <li>Separation of Concerns: By isolating transformation logic, the pattern promotes cleaner and more maintainable code.</li> <li>Reusability: Transformation logic can be reused across different parts of the application.</li> </ol>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#structure","title":"Structure","text":"<p>The Transformer Pattern typically involves the following components:</p> <ul> <li>Transformer Interface: Defines a contract for transformation.</li> <li>Concrete Transformer: Implements the transformation logic.</li> <li>Input and Output Models: Represent the data before and after transformation.</li> </ul>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#example-in-python","title":"Example in Python","text":"<pre><code>from typing import TypeVar, Generic\n\n# Define generic types for input and output\nI = TypeVar('I')\nO = TypeVar('O')\n\n# Transformer Interface\nclass Transformer(Generic[I, O]):\n    def transform(self, input: I) -&gt; O:\n        raise NotImplementedError(\"Transform method must be implemented\")\n\n# Concrete Transformer\nclass UserToUserDTOTransformer(Transformer[dict, dict]):\n    def transform(self, user: dict) -&gt; dict:\n        return {\n            \"id\": user[\"id\"],\n            \"name\": user[\"name\"],\n            \"email\": user[\"email\"]\n        }\n\n# Input Model\nuser = {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n\n# Usage\ntransformer = UserToUserDTOTransformer()\nuser_dto = transformer.transform(user)\nprint(user_dto)\n</code></pre>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#example-in-nodejs","title":"Example in Node.js","text":"<pre><code>// Transformer Interface\nclass Transformer {\n    transform(input) {\n        throw new Error(\"Transform method must be implemented\");\n    }\n}\n\n// Concrete Transformer\nclass UserToUserDTOTransformer extends Transformer {\n    transform(user) {\n        return {\n            id: user.id,\n            name: user.name,\n            email: user.email\n        };\n    }\n}\n\n// Input Model\nconst user = {\n    id: 1,\n    name: \"John Doe\",\n    email: \"john.doe@example.com\"\n};\n\n// Usage\nconst transformer = new UserToUserDTOTransformer();\nconst userDTO = transformer.transform(user);\nconsole.log(userDTO);\n</code></pre>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#advantages","title":"Advantages","text":"<ul> <li>Simplifies data transformation logic.</li> <li>Improves code readability and maintainability.</li> <li>Encourages reusability of transformation logic.</li> </ul>"},{"location":"design_patterns/real_time_patterns/transformer_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>Mapping database entities to API responses.</li> <li>Converting between different data formats (e.g., JSON to XML).</li> <li>Adapting legacy systems to modern APIs.</li> </ul> <p>The Transformer Pattern is a powerful tool for managing data transformations in a clean and structured way.</p>"},{"location":"general/","title":"General Concepts","text":""},{"location":"general/#what-is-a-polyfill","title":"What is a Polyfill?","text":"<p>A polyfill is a piece of code (usually JavaScript) used to provide modern functionality on older browsers that do not natively support it. It essentially \"fills in\" the gaps by replicating the behavior of newer APIs or features.</p>"},{"location":"general/#example","title":"Example","text":"<p>For instance, if a browser does not support the <code>Array.prototype.includes</code> method, a polyfill can be written to add this functionality:</p> <pre><code>if (!Array.prototype.includes) {\n    Array.prototype.includes = function(valueToFind, fromIndex) {\n        if (this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n        const o = Object(this);\n        const len = o.length &gt;&gt;&gt; 0;\n        if (len === 0) {\n            return false;\n        }\n        const n = fromIndex | 0;\n        let k = Math.max(n &gt;= 0 ? n : len - Math.abs(n), 0);\n        while (k &lt; len) {\n            if (o[k] === valueToFind) {\n                return true;\n            }\n            k++;\n        }\n        return false;\n    };\n}\n</code></pre>"},{"location":"general/#use-cases","title":"Use Cases","text":"<ul> <li>Ensures compatibility with older browsers.</li> <li>Helps developers use modern features without waiting for universal browser support.</li> </ul>"},{"location":"general/#note","title":"Note","text":"<p>Polyfills are different from transpilers (like Babel), which convert modern code into older syntax.</p>"},{"location":"general/#what-is-transpiling","title":"What is Transpiling?","text":"<p>Transpiling is the process of converting source code written in one programming language or version into another language or version that has similar functionality. In the context of JavaScript, transpilers like Babel are often used to convert modern JavaScript (ES6+) into older versions (ES5) to ensure compatibility with older browsers.</p>"},{"location":"general/#example_1","title":"Example","text":"<p>For instance, the ES6 arrow function:</p> <pre><code>const add = (a, b) =&gt; a + b;\n</code></pre> <p>Can be transpiled into an ES5 equivalent:</p> <pre><code>var add = function(a, b) {\n    return a + b;\n};\n</code></pre>"},{"location":"general/#use-cases_1","title":"Use Cases","text":"<ul> <li>Ensures compatibility with environments that do not support modern syntax.</li> <li>Allows developers to use the latest language features without worrying about runtime support.</li> </ul>"},{"location":"general/#note_1","title":"Note","text":"<p>Transpilers differ from polyfills, as transpilers rewrite code, while polyfills add missing functionality.</p>"},{"location":"general/#what-is-compiling","title":"What is Compiling?","text":"<p>Compiling is the process of converting source code written in a high-level programming language into a lower-level language, such as machine code, bytecode, or an intermediate representation, so that it can be executed by a computer or runtime environment.</p>"},{"location":"general/#example_2","title":"Example","text":"<p>For instance, a C program written in a high-level language:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n</code></pre> <p>Is compiled into machine code that the computer's processor can execute.</p>"},{"location":"general/#use-cases_2","title":"Use Cases","text":"<ul> <li>Converts human-readable code into executable instructions.</li> <li>Optimizes code for performance and efficiency.</li> <li>Detects syntax errors during the compilation process.</li> </ul>"},{"location":"general/#types-of-compilers","title":"Types of Compilers","text":"<ul> <li>Ahead-of-Time (AOT) Compilers: Compile code before execution (e.g., GCC for C/C++).</li> <li>Just-in-Time (JIT) Compilers: Compile code during runtime (e.g., Java Virtual Machine).</li> </ul>"},{"location":"general/#note_2","title":"Note","text":"<p>Compiling differs from transpiling, as compiling often involves converting code into a lower-level language, while transpiling converts code between similar levels of abstraction.</p>"},{"location":"general/auth/","title":"Authentication and Authorization","text":""},{"location":"general/auth/#introduction","title":"Introduction","text":"<p>Authentication and authorization are critical components of modern application security. While they are often used together, they serve distinct purposes in ensuring secure access to systems and data.</p>"},{"location":"general/auth/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user or system. It ensures that the entity attempting to access a resource is who they claim to be.</p>"},{"location":"general/auth/#common-authentication-methods","title":"Common Authentication Methods","text":"<ol> <li>Password-Based Authentication: Users provide a username and password.</li> <li>Multi-Factor Authentication (MFA): Combines two or more factors:<ul> <li>Something you know (password)</li> <li>Something you have (security token)</li> <li>Something you are (biometric data)</li> </ul> </li> <li>OAuth: A token-based authentication protocol for third-party access.</li> <li>SSO (Single Sign-On): Allows users to log in once and access multiple systems.</li> </ol>"},{"location":"general/auth/#best-practices","title":"Best Practices","text":"<ul> <li>Enforce strong password policies.</li> <li>Use MFA wherever possible.</li> <li>Store passwords securely using hashing algorithms like bcrypt.</li> <li>Regularly audit and monitor authentication logs.</li> </ul>"},{"location":"general/auth/#authorization","title":"Authorization","text":"<p>Authorization determines what actions or resources a user is permitted to access after they have been authenticated.</p>"},{"location":"general/auth/#types-of-authorization","title":"Types of Authorization","text":"<ol> <li>Role-Based Access Control (RBAC): Permissions are assigned based on roles.</li> <li>Attribute-Based Access Control (ABAC): Permissions are based on attributes like location, time, or device.</li> <li>Policy-Based Access Control (PBAC): Uses policies to define access rules.</li> </ol>"},{"location":"general/auth/#best-practices_1","title":"Best Practices","text":"<ul> <li>Follow the principle of least privilege.</li> <li>Regularly review and update access controls.</li> <li>Use centralized access management systems.</li> <li>Log and monitor access attempts.</li> </ul>"},{"location":"general/auth/#key-differences","title":"Key Differences","text":"Aspect Authentication Authorization Purpose Verifies identity Determines access permissions When It Happens Before granting access After authentication Example Logging in with a password Accessing admin-only features"},{"location":"general/auth/#conclusion","title":"Conclusion","text":"<p>Authentication and authorization work together to secure systems by ensuring only authorized users can access specific resources. Implementing robust practices for both is essential to protect sensitive data and maintain system integrity.</p>"},{"location":"general/caching/","title":"Caching","text":"<p>Caching is a technique used to store frequently accessed data in a temporary storage layer, called a cache, to improve performance and reduce latency. By keeping a copy of the data closer to the application or user, caching minimizes the need to repeatedly fetch the same data from slower storage systems or remote servers.</p>"},{"location":"general/caching/#benefits-of-caching","title":"Benefits of Caching","text":"<ul> <li>Improved Performance: Reduces data retrieval time.</li> <li>Reduced Latency: Speeds up response times for users.</li> <li>Lower Resource Usage: Decreases load on backend systems.</li> <li>Scalability: Helps handle increased traffic efficiently.</li> </ul>"},{"location":"general/caching/#types-of-caching","title":"Types of Caching","text":"<ol> <li>Client-Side Caching: Data is cached on the user's device (e.g., browser cache).</li> <li>Server-Side Caching: Data is cached on the server (e.g., in-memory caches like Redis or Memcached).</li> <li>CDN Caching: Content Delivery Networks cache static assets closer to users.</li> </ol>"},{"location":"general/caching/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Web page caching for faster load times.</li> <li>Database query result caching.</li> <li>API response caching.</li> <li>Caching computationally expensive operations.</li> </ul>"},{"location":"general/caching/#challenges","title":"Challenges","text":"<ul> <li>Cache Invalidation: Ensuring stale data is updated or removed.</li> <li>Cache Consistency: Keeping cache in sync with the source of truth.</li> <li>Memory Management: Avoiding excessive memory usage.</li> </ul> <p>Caching is a critical optimization strategy in modern software systems, enabling faster and more efficient applications.</p>"},{"location":"general/load_balancing/","title":"Load Balancing","text":"<p>Load balancing is the process of distributing network or application traffic across multiple servers to ensure reliability and performance. It helps prevent overloading a single server and improves the availability of services.</p>"},{"location":"general/load_balancing/#key-benefits","title":"Key Benefits","text":"<ul> <li>Scalability: Handles increased traffic by adding more servers.</li> <li>High Availability: Ensures minimal downtime by redirecting traffic during server failures.</li> <li>Improved Performance: Reduces latency by balancing the load efficiently.</li> </ul>"},{"location":"general/load_balancing/#types-of-load-balancing","title":"Types of Load Balancing","text":"<ol> <li>DNS Load Balancing: Distributes traffic using DNS records.</li> <li>Hardware Load Balancers: Dedicated devices for traffic distribution.</li> <li>Software Load Balancers: Applications like HAProxy or NGINX.</li> <li>Cloud Load Balancers: Managed services like AWS ELB or Azure Load Balancer.</li> </ol>"},{"location":"general/load_balancing/#load-balancing-algorithms","title":"Load Balancing Algorithms","text":"<ul> <li>Round Robin: Distributes requests sequentially.</li> <li>Least Connections: Sends traffic to the server with the fewest active connections.</li> <li>IP Hash: Routes requests based on client IP.</li> <li>Weighted Round Robin: Assigns weights to servers for proportional traffic distribution.</li> </ul>"},{"location":"general/load_balancing/#common-tools","title":"Common Tools","text":"<ul> <li>HAProxy</li> <li>NGINX</li> <li>Traefik</li> <li>AWS Elastic Load Balancer</li> <li>Azure Load Balancer</li> </ul>"},{"location":"general/load_balancing/#use-cases","title":"Use Cases","text":"<ul> <li>Web applications with high traffic.</li> <li>Distributed systems requiring fault tolerance.</li> <li>Microservices architecture.</li> </ul>"},{"location":"general/load_balancing/#challenges","title":"Challenges","text":"<ul> <li>Proper configuration to avoid bottlenecks.</li> <li>Handling session persistence (sticky sessions).</li> <li>Monitoring and scaling dynamically.</li> </ul>"},{"location":"general/middleware/","title":"Middleware","text":""},{"location":"general/middleware/#middleware","title":"Middleware","text":"<p>In FastAPI, middleware is used to process requests and responses globally before they reach specific endpoints or after the response is generated. Middleware in FastAPI is implemented as a callable that takes <code>request</code> and <code>call_next</code> as arguments.</p>"},{"location":"general/middleware/#example-middleware-in-fastapi","title":"Example: Middleware in FastAPI","text":"<pre><code>from fastapi import FastAPI\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\napp = FastAPI()\n\n# Custom middleware\nclass LoggerMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        print(f\"Request: {request.method} {request.url}\")\n        response = await call_next(request)\n        print(f\"Response status: {response.status_code}\")\n        return response\n\n# Add middleware to the app\napp.add_middleware(LoggerMiddleware)\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"message\": \"Hello, World!\"}\n</code></pre>"},{"location":"general/middleware/#common-use-cases-in-fastapi","title":"Common Use Cases in FastAPI","text":"<ul> <li>Authentication: Verify user tokens or API keys.</li> <li>CORS Handling: Manage cross-origin resource sharing.</li> <li>Request Validation: Validate or preprocess incoming requests.</li> <li>Logging: Log request and response details for monitoring.</li> </ul> <p>Middleware is a powerful concept in both Node.js and FastAPI, enabling developers to modularize and manage common functionalities efficiently. By leveraging middleware, you can keep your application code clean and maintainable.</p>"},{"location":"general/security_best_practices/","title":"Security Best Practices","text":"<p>Security is a critical aspect of software development and system administration. Following best practices ensures the protection of sensitive data and systems from unauthorized access, breaches, and other vulnerabilities.</p>"},{"location":"general/security_best_practices/#1-use-strong-authentication","title":"1. Use Strong Authentication","text":"<ul> <li>Implement multi-factor authentication (MFA).</li> <li>Enforce strong password policies (length, complexity, and expiration).</li> <li>Avoid hardcoding credentials in source code.</li> </ul>"},{"location":"general/security_best_practices/#2-keep-software-updated","title":"2. Keep Software Updated","text":"<ul> <li>Regularly apply security patches and updates.</li> <li>Use automated tools to monitor for vulnerabilities in dependencies.</li> </ul>"},{"location":"general/security_best_practices/#3-secure-data-transmission","title":"3. Secure Data Transmission","text":"<ul> <li>Use HTTPS to encrypt data in transit.</li> <li>Avoid using outdated protocols like SSL; prefer TLS 1.2 or higher.</li> </ul>"},{"location":"general/security_best_practices/#4-principle-of-least-privilege","title":"4. Principle of Least Privilege","text":"<ul> <li>Grant users and applications only the permissions they need.</li> <li>Regularly review and revoke unnecessary access.</li> </ul>"},{"location":"general/security_best_practices/#5-secure-coding-practices","title":"5. Secure Coding Practices","text":"<ul> <li>Validate and sanitize all user inputs to prevent injection attacks.</li> <li>Avoid exposing sensitive information in error messages or logs.</li> <li>Use secure libraries and frameworks.</li> </ul>"},{"location":"general/security_best_practices/#6-regular-security-audits","title":"6. Regular Security Audits","text":"<ul> <li>Conduct penetration testing and vulnerability assessments.</li> <li>Perform code reviews with a focus on security.</li> </ul>"},{"location":"general/security_best_practices/#7-backup-and-disaster-recovery","title":"7. Backup and Disaster Recovery","text":"<ul> <li>Maintain regular backups of critical data.</li> <li>Test recovery procedures to ensure they work as expected.</li> </ul>"},{"location":"general/security_best_practices/#8-monitor-and-respond-to-threats","title":"8. Monitor and Respond to Threats","text":"<ul> <li>Use intrusion detection and prevention systems (IDPS).</li> <li>Set up logging and monitoring to detect suspicious activities.</li> <li>Have an incident response plan in place.</li> </ul>"},{"location":"general/security_best_practices/#9-educate-and-train-employees","title":"9. Educate and Train Employees","text":"<ul> <li>Conduct regular security awareness training.</li> <li>Encourage reporting of potential security issues.</li> </ul>"},{"location":"general/security_best_practices/#10-use-secure-configurations","title":"10. Use Secure Configurations","text":"<ul> <li>Disable unused services and ports.</li> <li>Use firewalls and network segmentation to limit exposure.</li> </ul> <p>By adhering to these best practices, organizations can significantly reduce their risk of security incidents and ensure a robust defense against evolving threats.  </p>"},{"location":"general/sockets/","title":"Sockets and WebSockets","text":""},{"location":"general/sockets/#sockets","title":"Sockets","text":"<p>A socket is an endpoint for sending or receiving data across a computer network. It is a fundamental concept in network programming, enabling communication between devices. Sockets are typically used in client-server architectures and can operate over various protocols, such as TCP (Transmission Control Protocol) or UDP (User Datagram Protocol).</p>"},{"location":"general/sockets/#key-features-of-sockets","title":"Key Features of Sockets:","text":"<ul> <li>Connection-Oriented (TCP): Ensures reliable communication with error checking and retransmission.</li> <li>Connectionless (UDP): Faster communication without guarantees of delivery.</li> <li>Bidirectional Communication: Data can flow in both directions between the client and server.</li> <li>Port and IP Address: Sockets use these to identify endpoints.</li> </ul>"},{"location":"general/sockets/#common-use-cases","title":"Common Use Cases:","text":"<ul> <li>File transfers</li> <li>Chat applications</li> <li>Remote procedure calls (RPC)</li> </ul>"},{"location":"general/sockets/#websockets","title":"WebSockets","text":"<p>WebSockets are a protocol that provides full-duplex communication channels over a single TCP connection. Unlike traditional HTTP, WebSockets enable real-time, two-way communication between a client (e.g., a web browser) and a server.</p>"},{"location":"general/sockets/#key-features-of-websockets","title":"Key Features of WebSockets:","text":"<ul> <li>Persistent Connection: Once established, the connection remains open, reducing overhead.</li> <li>Low Latency: Ideal for real-time applications like gaming or live updates.</li> <li>Event-Driven: Both client and server can send messages independently.</li> </ul>"},{"location":"general/sockets/#common-use-cases_1","title":"Common Use Cases:","text":"<ul> <li>Real-time chat applications</li> <li>Live sports updates</li> <li>Collaborative tools (e.g., Google Docs)</li> <li>Online gaming</li> </ul>"},{"location":"general/sockets/#comparison-sockets-vs-websockets","title":"Comparison: Sockets vs. WebSockets","text":"Feature Sockets WebSockets Protocol TCP/UDP HTTP (Upgraded to WebSocket) Communication Low-level High-level Use Case General networking Real-time web applications <p>Both sockets and WebSockets are essential tools for building networked applications, with WebSockets being particularly suited for modern web-based real-time communication.</p>"},{"location":"node/","title":"Node.js","text":"<p>Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to execute JavaScript code outside of a web browser. It is built on Chrome's V8 JavaScript engine and is widely used for building scalable and high-performance server-side applications.</p>"},{"location":"node/#key-features","title":"Key Features","text":"<ul> <li>Asynchronous and Event-Driven: Node.js uses a non-blocking I/O model, making it efficient and suitable for real-time applications.</li> <li>Single-Threaded: It operates on a single-threaded event loop, which can handle multiple concurrent connections.</li> <li>Cross-Platform: Node.js runs on various operating systems, including Windows, macOS, and Linux.</li> <li>Rich Ecosystem: The npm (Node Package Manager) provides access to thousands of libraries and modules.</li> </ul>"},{"location":"node/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Web servers and APIs</li> <li>Real-time applications (e.g., chat apps, gaming)</li> <li>Microservices architecture</li> <li>Command-line tools</li> </ul>"},{"location":"node/#example-code","title":"Example Code","text":"<pre><code>// Simple Node.js server\nconst http = require('http');\n\nconst server = http.createServer((req, res) =&gt; {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!\\n');\n});\n\nserver.listen(3000, () =&gt; {\n    console.log('Server running at http://localhost:3000/');\n});\n</code></pre>"},{"location":"node/#advantages","title":"Advantages","text":"<ul> <li>High performance for I/O-intensive tasks</li> <li>Large and active community</li> <li>Easy to learn for JavaScript developers</li> </ul>"},{"location":"node/#resources","title":"Resources","text":"<ul> <li>Official Node.js Website</li> <li>Node.js Documentation</li> <li>npm Registry</li> </ul>"},{"location":"node/node_questions/","title":"Questions","text":""},{"location":"node/node_questions/#why-is-nodejs-popular","title":"Why is Node.js Popular?","text":"<p>Node.js has gained immense popularity due to the following reasons:</p> <ol> <li> <p>Asynchronous and Event-Driven: Node.js uses a non-blocking I/O model, making it efficient and suitable for real-time applications.</p> </li> <li> <p>Single Programming Language: Developers can use JavaScript for both frontend and backend, simplifying the development process.</p> </li> <li> <p>High Performance: Built on the V8 JavaScript engine, Node.js ensures fast execution of code.</p> </li> <li> <p>Scalability: Its event-driven architecture makes it easy to scale applications horizontally and vertically.</p> </li> <li> <p>Rich Ecosystem: The npm (Node Package Manager) provides access to thousands of libraries, speeding up development.</p> </li> <li> <p>Community Support: A large and active community ensures continuous improvement and support.</p> </li> <li> <p>Cross-Platform: Node.js can be used to build applications for various platforms, including web, mobile, and desktop.</p> </li> <li> <p>Real-Time Applications: Ideal for building chat applications, gaming servers, and collaborative tools.</p> </li> </ol> <p>Node.js continues to be a preferred choice for modern web development due to these advantages.</p>"},{"location":"node/node_questions/#how-does-nodejs-handle-non-blocking-async-operations","title":"How Does Node.js Handle Non-Blocking Async Operations?","text":"<p>Node.js handles non-blocking asynchronous operations using its event-driven architecture and the libuv library. Here's how it works:</p> <ol> <li> <p>Event Loop: The event loop is the core mechanism that allows Node.js to perform non-blocking I/O operations. It continuously checks for tasks, executes them, and waits for new events.</p> </li> <li> <p>Callbacks: When an asynchronous operation is initiated, such as reading a file or making a network request, a callback function is registered. Once the operation completes, the callback is executed.</p> </li> <li> <p>Promises and Async/Await: Modern JavaScript features like Promises and <code>async/await</code> provide a cleaner way to handle asynchronous code, making it easier to read and maintain.</p> </li> <li> <p>Thread Pool: For operations that cannot be performed asynchronously (e.g., file system operations), Node.js uses a thread pool provided by libuv to handle them in the background.</p> </li> <li> <p>Non-Blocking I/O: Node.js uses non-blocking system calls to interact with the operating system, ensuring that the main thread is not blocked while waiting for I/O operations to complete.</p> </li> </ol> <p>This combination of the event loop, callbacks, promises, and the thread pool enables Node.js to handle a large number of concurrent operations efficiently.</p>"},{"location":"python/","title":"Python Programming Language","text":""},{"location":"python/#interview-preparation","title":"Interview Preparation","text":"<ul> <li>Basic Concepts</li> <li>OOPS</li> </ul>"},{"location":"python/#introduction","title":"Introduction","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used in web development, data analysis, artificial intelligence, scientific computing, and more.</p>"},{"location":"python/#history-of-python","title":"History of Python","text":"<p>Python was created by Guido van Rossum in the late 1980s and was first released in 1991. The language was designed to emphasize code readability and simplicity, making it accessible to both beginners and experienced developers.</p>"},{"location":"python/#key-milestones","title":"Key Milestones:","text":"<ul> <li>1989: Guido van Rossum began working on Python during his holiday at Centrum Wiskunde &amp; Informatica (CWI) in the Netherlands.</li> <li>1991: Python 0.9.0 was released, featuring functions, exception handling, and core data types like lists, strings, and dictionaries.</li> <li>1994: Python 1.0 was released, introducing features like lambda, map, filter, and reduce.</li> <li>2000: Python 2.0 was released, adding list comprehensions and garbage collection based on reference counting.</li> <li>2008: Python 3.0 was released, addressing fundamental design flaws and improving the language's consistency, though it was not backward compatible with Python 2.</li> </ul>"},{"location":"python/#python-today","title":"Python Today","text":"<p>Python has grown to become one of the most popular programming languages in the world. It is maintained by the Python Software Foundation (PSF) and has a vibrant community contributing to its development. Its extensive standard library and third-party packages make it a versatile tool for developers across various domains.</p>"},{"location":"python/#conclusion","title":"Conclusion","text":"<p>Python's emphasis on simplicity and readability, combined with its powerful features, has made it a favorite among developers. Its rich history and continuous evolution ensure that it remains a cornerstone of modern programming.</p>"},{"location":"python/python_docs/algorithms/","title":"Algorithm Documentation","text":""},{"location":"python/python_docs/algorithms/#sorting","title":"Sorting","text":""},{"location":"python/python_docs/algorithms/#bubble-sort","title":"Bubble Sort","text":"<p>Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.</p> <pre><code>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# Example\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))\n</code></pre>"},{"location":"python/python_docs/algorithms/#merge-sort","title":"Merge Sort","text":"<p>Merge Sort is a divide-and-conquer algorithm that splits the array into halves, sorts them, and then merges them back together.</p> <pre><code>def merge_sort(arr):\n    if len(arr) &gt; 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n        while i &lt; len(left) and j &lt; len(right):\n            if left[i] &lt; right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i &lt; len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j &lt; len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n# Example\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(arr)\n</code></pre>"},{"location":"python/python_docs/algorithms/#quick-sort","title":"Quick Sort","text":"<p>Quick Sort is another divide-and-conquer algorithm that selects a pivot and partitions the array around the pivot.</p> <pre><code>def quick_sort(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x &lt; pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x &gt; pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\n# Example\nprint(quick_sort([10, 7, 8, 9, 1, 5]))\n</code></pre>"},{"location":"python/python_docs/algorithms/#searching","title":"Searching","text":""},{"location":"python/python_docs/algorithms/#binary-search","title":"Binary Search","text":"<p>Binary Search is an efficient algorithm for finding an item from a sorted list by repeatedly dividing the search interval in half.</p> <pre><code>def binary_search(arr, x):\n    low, high = 0, len(arr) - 1\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] &lt; x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Example\narr = [2, 3, 4, 10, 40]\nprint(binary_search(arr, 10))\n</code></pre>"},{"location":"python/python_docs/algorithms/#recursion-dynamic-programming","title":"Recursion &amp; Dynamic Programming","text":""},{"location":"python/python_docs/algorithms/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<p>The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>"},{"location":"python/python_docs/algorithms/#recursive-approach","title":"Recursive Approach","text":"<pre><code>def fibonacci_recursive(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\n# Example\nprint(fibonacci_recursive(10))\n</code></pre>"},{"location":"python/python_docs/algorithms/#dynamic-programming-approach","title":"Dynamic Programming Approach","text":"<pre><code>def fibonacci_dp(n):\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n]\n\n# Example\nprint(fibonacci_dp(10))\n</code></pre>"},{"location":"python/python_docs/algorithms/#knapsack-problem","title":"Knapsack Problem","text":"<p>The Knapsack problem is a combinatorial optimization problem.</p>"},{"location":"python/python_docs/algorithms/#dynamic-programming-approach_1","title":"Dynamic Programming Approach","text":"<pre><code>def knapsack(weights, values, capacity):\n    n = len(weights)\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weights[i-1] &lt;= w:\n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w])\n            else:\n                dp[i][w] = dp[i-1][w]\n\n    return dp[n][capacity]\n\n# Example\nweights = [1, 2, 3]\nvalues = [60, 100, 120]\ncapacity = 5\nprint(knapsack(weights, values, capacity))\n</code></pre>"},{"location":"python/python_docs/algorithms/#graph-algorithms","title":"Graph Algorithms","text":""},{"location":"python/python_docs/algorithms/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<p>BFS explores all neighbors at the current depth before moving to the next depth.</p> <pre><code>from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n\n    while queue:\n        vertex = queue.popleft()\n        print(vertex, end=\" \")\n\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\n# Example\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\nbfs(graph, 'A')\n</code></pre>"},{"location":"python/python_docs/algorithms/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<p>DFS explores as far as possible along each branch before backtracking.</p> <pre><code>def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start, end=\" \")\n\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\n# Example\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\ndfs(graph, 'A')\n</code></pre>"},{"location":"python/python_docs/algorithms/#time-complexity","title":"Time Complexity","text":""},{"location":"python/python_docs/algorithms/#big-o-notation","title":"Big O Notation","text":"<p>Big O notation describes the upper bound of an algorithm's runtime, representing the worst-case scenario.</p> Algorithm Time Complexity Bubble Sort O(n\u00b2) Merge Sort O(n log n) Quick Sort O(n log n) Binary Search O(log n) Fibonacci (Rec) O(2\u207f) Fibonacci (DP) O(n) Knapsack (DP) O(n * W) BFS/DFS O(V + E) <ul> <li><code>n</code>: Number of elements</li> <li><code>W</code>: Knapsack capacity</li> <li><code>V</code>: Number of vertices</li> <li><code>E</code>: Number of edges</li> </ul>"},{"location":"python/python_docs/basic_concepts/","title":"Python Basic Concepts and Data Types","text":""},{"location":"python/python_docs/basic_concepts/#data-types-in-python","title":"Data Types in Python","text":"<p>Python provides several built-in data types. Below is a list of the most commonly used ones:</p>"},{"location":"python/python_docs/basic_concepts/#1-numeric-types","title":"1. Numeric Types","text":"<ul> <li>int: Integer values.</li> <li>float: Floating-point numbers.</li> <li>complex: Complex numbers.</li> </ul> <pre><code># Examples of numeric types\nx = 10         # int\ny = 3.14       # float\nz = 1 + 2j     # complex\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#2-sequence-types","title":"2. Sequence Types","text":"<ul> <li>list: Ordered, mutable collection.</li> <li>tuple: Ordered, immutable collection.</li> <li>range: Sequence of numbers.</li> </ul> <pre><code># Examples of sequence types\nmy_list = [1, 2, 3]       # list\nmy_tuple = (1, 2, 3)      # tuple\nmy_range = range(1, 5)    # range\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#3-text-type","title":"3. Text Type","text":"<ul> <li>str: String of characters.</li> </ul> <pre><code># Example of text type\ngreeting = \"Hello, World!\"  # str\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#4-set-types","title":"4. Set Types","text":"<ul> <li>set: Unordered, mutable collection of unique items.</li> <li>frozenset: Unordered, immutable collection of unique items.</li> </ul> <pre><code># Examples of set types\nmy_set = {1, 2, 3}          # set\nmy_frozenset = frozenset([1, 2, 3])  # frozenset\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#5-mapping-type","title":"5. Mapping Type","text":"<ul> <li>dict: Key-value pairs.</li> </ul> <pre><code># Example of mapping type\nmy_dict = {\"name\": \"Alice\", \"age\": 25}  # dict\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#6-boolean-type","title":"6. Boolean Type","text":"<ul> <li>bool: Represents <code>True</code> or <code>False</code>.</li> </ul> <pre><code># Example of boolean type\nis_active = True  # bool\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#7-none-type","title":"7. None Type","text":"<ul> <li>NoneType: Represents the absence of a value.</li> </ul> <pre><code># Example of None type\nresult = None  # NoneType\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#basic-concepts-in-python","title":"Basic Concepts in Python","text":""},{"location":"python/python_docs/basic_concepts/#1-variables-and-assignment","title":"1. Variables and Assignment","text":"<p>Variables are used to store data.</p> <pre><code>x = 5\nname = \"John\"\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#2-control-flow","title":"2. Control Flow","text":"<ul> <li>if-else: Conditional statements.</li> <li>for and while: Loops.</li> </ul> <pre><code># Example of control flow\nif x &gt; 0:\n    print(\"Positive\")\nelse:\n    print(\"Non-positive\")\n\nfor i in range(3):\n    print(i)\n\nwhile x &gt; 0:\n    print(x)\n    x -= 1\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#3-functions","title":"3. Functions","text":"<p>Functions are reusable blocks of code.</p> <pre><code># Example of a function\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#4-classes-and-objects","title":"4. Classes and Objects","text":"<p>Python supports object-oriented programming.</p> <pre><code># Example of a class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return f\"My name is {self.name} and I am {self.age} years old.\"\n\nperson = Person(\"Alice\", 25)\nprint(person.introduce())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#5-exception-handling","title":"5. Exception Handling","text":"<p>Handle errors gracefully using <code>try-except</code>.</p> <pre><code># Example of exception handling\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#6-modules-and-imports","title":"6. Modules and Imports","text":"<p>Reuse code by importing modules.</p> <pre><code># Example of importing a module\nimport math\n\nprint(math.sqrt(16))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#7-modules","title":"7. Modules","text":"<p>Modules in Python are files containing Python code (functions, classes, or variables) that can be reused in other programs. They help organize code into manageable sections.</p> <pre><code># Example of creating and using a module\n# my_module.py\ndef add(a, b):\n    return a + b\n\n# main.py\nimport my_module\nprint(my_module.add(2, 3))  # Output: 5\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#8-packages","title":"8. Packages","text":"<p>A package is a collection of modules organized in directories containing a special <code>__init__.py</code> file. Packages allow for hierarchical structuring of the module namespace.</p> <pre><code>my_package/\n    __init__.py\n    module1.py\n    module2.py\n</code></pre> <pre><code># Example of using a package\nfrom my_package import module1\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#9-typing","title":"9. Typing","text":"<p>Python's <code>typing</code> module provides support for type hints, making code more readable and reducing runtime errors.</p> <pre><code>from typing import List, Dict\n\ndef greet(names: List[str]) -&gt; str:\n    return \", \".join(names)\n\nprint(greet([\"Alice\", \"Bob\"]))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#10-error-handling","title":"10. Error Handling","text":"<p>Error handling in Python is done using <code>try-except</code> blocks. You can also use <code>finally</code> for cleanup and <code>else</code> for code that runs if no exception occurs.</p> <pre><code>try:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nelse:\n    print(\"Division successful:\", result)\nfinally:\n    print(\"Execution complete.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#11-what-is-a-virtual-environment","title":"11. What is a Virtual Environment?","text":"<p>A virtual environment is an isolated Python environment that allows you to manage dependencies for a specific project without affecting the global Python installation.</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\n# On Windows:\nmyenv\\Scripts\\activate\n# On macOS/Linux:\nsource myenv/bin/activate\n\n# Deactivate the virtual environment\ndeactivate\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#12-python-package-installer-pip","title":"12. Python Package Installer (pip)","text":"<p><code>pip</code> is the package manager for Python, used to install and manage third-party libraries.</p> <pre><code># Install a package\npip install requests\n\n# List installed packages\npip list\n\n# Uninstall a package\npip uninstall requests\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#13-requestresponse-models-with-pydantic","title":"13. Request/Response Models with Pydantic","text":"<p>Pydantic is a library for data validation and settings management using Python type annotations. It is commonly used with FastAPI for request/response models.</p> <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n\nuser = User(id=1, name=\"Alice\", email=\"alice@example.com\")\nprint(user.dict())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#14-what-is-hashing","title":"14. What is Hashing?","text":"<p>Hashing is the process of converting data into a fixed-size hash value using a hash function. It is commonly used in data structures like hash tables and for cryptographic purposes.</p> <pre><code>import hashlib\n\n# Example of hashing a string\ndata = \"hello\"\nhash_object = hashlib.sha256(data.encode())\nprint(hash_object.hexdigest())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#file-handling","title":"File Handling","text":"<p>File handling in Python allows you to work with files for reading, writing, and appending data. Python provides built-in functions like <code>open()</code> to handle files.</p>"},{"location":"python/python_docs/basic_concepts/#opening-a-file","title":"Opening a File","text":"<p>You can open a file using the <code>open()</code> function. It requires the file name and mode as arguments.</p> <p>Modes: - <code>'r'</code>: Read (default mode) - <code>'w'</code>: Write (overwrites the file if it exists) - <code>'a'</code>: Append (adds data to the end of the file) - <code>'b'</code>: Binary mode - <code>'x'</code>: Create (fails if the file already exists)</p> <pre><code># Example of opening a file\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\nfile.close()\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#writing-to-a-file","title":"Writing to a File","text":"<p>Use the <code>'w'</code> or <code>'a'</code> mode to write data to a file.</p> <pre><code># Example of writing to a file\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#reading-from-a-file","title":"Reading from a File","text":"<p>You can read the entire content, a specific number of characters, or line by line.</p> <pre><code># Example of reading a file\nwith open(\"example.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#appending-to-a-file","title":"Appending to a File","text":"<p>Use the <code>'a'</code> mode to add data to the end of a file.</p> <pre><code># Example of appending to a file\nwith open(\"example.txt\", \"a\") as file:\n    file.write(\"\\nAppended text.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#working-with-binary-files","title":"Working with Binary Files","text":"<p>Binary mode (<code>'b'</code>) is used for non-text files like images or videos.</p> <pre><code># Example of reading a binary file\nwith open(\"image.jpg\", \"rb\") as file:\n    data = file.read()\n    print(data)\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#file-operations","title":"File Operations","text":"<ul> <li><code>file.read()</code>: Reads the entire file.</li> <li><code>file.readline()</code>: Reads one line at a time.</li> <li><code>file.readlines()</code>: Reads all lines into a list.</li> <li><code>file.write(data)</code>: Writes data to the file.</li> <li><code>file.writelines(lines)</code>: Writes a list of lines to the file.</li> </ul>"},{"location":"python/python_docs/basic_concepts/#checking-if-a-file-exists","title":"Checking if a File Exists","text":"<p>Use the <code>os</code> module to check if a file exists.</p> <pre><code>import os\n\nif os.path.exists(\"example.txt\"):\n    print(\"File exists.\")\nelse:\n    print(\"File does not exist.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#closing-files","title":"Closing Files","text":"<p>Always close files after use to free up system resources. Using the <code>with</code> statement automatically closes the file.</p> <pre><code># Example of closing a file\nfile = open(\"example.txt\", \"r\")\nfile.close()\n</code></pre>"},{"location":"python/python_docs/data_structure/","title":"Data Structures in Python","text":""},{"location":"python/python_docs/data_structure/#lists-dynamic-arrays","title":"Lists (Dynamic Arrays)","text":"<p>Lists are mutable, ordered collections of elements. They allow dynamic resizing and support various operations.</p>"},{"location":"python/python_docs/data_structure/#common-methods","title":"Common Methods:","text":"<ul> <li><code>.append()</code>: Adds an element to the end of the list.</li> <li><code>.pop()</code>: Removes and returns the last element of the list.</li> <li><code>.reverse()</code>: Reverses the elements of the list in place.</li> </ul> <p>Example:</p> <pre><code>my_list = [1, 2, 3]\nmy_list.append(4)  # [1, 2, 3, 4]\nmy_list.pop()      # [1, 2, 3]\nmy_list.reverse()  # [3, 2, 1]\n</code></pre>"},{"location":"python/python_docs/data_structure/#tuples-immutable-lists","title":"Tuples (Immutable Lists)","text":"<p>Tuples are immutable, ordered collections of elements. Once created, their values cannot be changed.</p>"},{"location":"python/python_docs/data_structure/#common-methods_1","title":"Common Methods:","text":"<ul> <li><code>tuple.count()</code>: Counts the occurrences of a value in the tuple.</li> <li><code>tuple.index()</code>: Returns the index of the first occurrence of a value.</li> </ul> <p>Example:</p> <pre><code>my_tuple = (1, 2, 2, 3)\ncount = my_tuple.count(2)  # 2\nindex = my_tuple.index(3)  # 3\n</code></pre>"},{"location":"python/python_docs/data_structure/#dictionaries-hash-maps","title":"Dictionaries (Hash Maps)","text":"<p>Dictionaries are mutable, unordered collections of key-value pairs.</p>"},{"location":"python/python_docs/data_structure/#common-methods_2","title":"Common Methods:","text":"<ul> <li><code>.get()</code>: Returns the value for a given key, or a default value if the key is not found.</li> <li><code>.keys()</code>: Returns a view object of all keys.</li> <li><code>.values()</code>: Returns a view object of all values.</li> </ul> <p>Example:</p> <pre><code>my_dict = {'a': 1, 'b': 2}\nvalue = my_dict.get('a')  # 1\nkeys = my_dict.keys()     # dict_keys(['a', 'b'])\nvalues = my_dict.values() # dict_values([1, 2])\n</code></pre>"},{"location":"python/python_docs/data_structure/#sets-unique-elements","title":"Sets (Unique Elements)","text":"<p>Sets are unordered collections of unique elements.</p>"},{"location":"python/python_docs/data_structure/#common-methods_3","title":"Common Methods:","text":"<ul> <li><code>.add()</code>: Adds an element to the set.</li> <li><code>.union()</code>: Returns a new set containing all unique elements from both sets.</li> <li><code>.intersection()</code>: Returns a new set containing elements common to both sets.</li> </ul> <p>Example:</p> <pre><code>set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nset1.add(6)                  # {1, 2, 3, 6}\nunion_set = set1.union(set2) # {1, 2, 3, 4, 5, 6}\nintersect_set = set1.intersection(set2) # {3}\n</code></pre>"},{"location":"python/python_docs/data_structure/#stacks-queues-collectionsdeque","title":"Stacks &amp; Queues (collections.deque)","text":"<p><code>collections.deque</code> is a double-ended queue that can be used as a stack or a queue.</p> <p>Example:</p> <pre><code>from collections import deque\n\nstack = deque()\nstack.append(1)  # Push\nstack.append(2)\nstack.pop()      # Pop\n\nqueue = deque()\nqueue.append(1)  # Enqueue\nqueue.append(2)\nqueue.popleft()  # Dequeue\n</code></pre>"},{"location":"python/python_docs/data_structure/#heaps-heapq","title":"Heaps (heapq)","text":"<p>Heaps are binary trees used for priority queues. Python provides a <code>heapq</code> module for heap operations.</p> <p>Example:</p> <pre><code>import heapq\n\nheap = []\nheapq.heappush(heap, 3)\nheapq.heappush(heap, 1)\nheapq.heappush(heap, 2)\nsmallest = heapq.heappop(heap)  # 1\n</code></pre>"},{"location":"python/python_docs/data_structure/#linked-lists-custom-implementation","title":"Linked Lists (Custom Implementation)","text":"<p>Linked lists are linear data structures where each element (node) points to the next.</p> <p>Example:</p> <pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n        print(\"None\")\n\nll = LinkedList()\nll.append(1)\nll.append(2)\nll.append(3)\nll.display()  # 1 -&gt; 2 -&gt; 3 -&gt; None\n</code></pre>"},{"location":"python/python_docs/data_structure/#differences-between-stack-and-queue","title":"Differences Between Stack and Queue","text":""},{"location":"python/python_docs/data_structure/#stack","title":"Stack:","text":"<ul> <li>Definition: A stack is a linear data structure that follows the Last In, First Out (LIFO) principle.</li> <li>Operations:<ul> <li><code>push</code>: Add an element to the top of the stack.</li> <li><code>pop</code>: Remove the top element from the stack.</li> </ul> </li> <li>Use Case: Useful for scenarios like undo operations, parsing expressions, and backtracking.</li> </ul>"},{"location":"python/python_docs/data_structure/#queue","title":"Queue:","text":"<ul> <li>Definition: A queue is a linear data structure that follows the First In, First Out (FIFO) principle.</li> <li>Operations:<ul> <li><code>enqueue</code>: Add an element to the end of the queue.</li> <li><code>dequeue</code>: Remove the front element from the queue.</li> </ul> </li> <li>Use Case: Useful for scenarios like task scheduling, breadth-first search, and buffering.</li> </ul>"},{"location":"python/python_docs/data_structure/#difference-between-list-and-tuple-in-python","title":"Difference Between List and Tuple in Python","text":"Feature List Tuple Mutability Mutable (can be modified) Immutable (cannot be modified) Syntax <code>[1, 2, 3]</code> <code>(1, 2, 3)</code> Performance Slower due to mutability Faster due to immutability Use Case Dynamic collections Fixed collections"},{"location":"python/python_docs/data_structure/#graphs-and-their-representation-in-python","title":"Graphs and Their Representation in Python","text":""},{"location":"python/python_docs/data_structure/#definition","title":"Definition:","text":"<p>A graph is a collection of nodes (vertices) connected by edges. It can be directed or undirected.</p>"},{"location":"python/python_docs/data_structure/#representation","title":"Representation:","text":"<ol> <li> <p>Adjacency List:      <code>python      graph = {              'A': ['B', 'C'],              'B': ['A', 'D'],              'C': ['A', 'D'],              'D': ['B', 'C']      }</code></p> </li> <li> <p>Adjacency Matrix:      <code>python      graph = [              [0, 1, 1, 0],  # A              [1, 0, 0, 1],  # B              [1, 0, 0, 1],  # C              [0, 1, 1, 0]   # D      ]</code></p> </li> </ol>"},{"location":"python/python_docs/data_structure/#difference-between-dictionary-and-set-in-python","title":"Difference Between Dictionary and Set in Python","text":"Feature Dictionary Set Definition Key-value pairs Unique elements Mutability Mutable Mutable Syntax <code>{'key': 'value'}</code> <code>{1, 2, 3}</code> Use Case Fast lookups by key Fast membership testing"},{"location":"python/python_docs/data_structure/#use-of-defaultdict-in-python","title":"Use of <code>defaultdict</code> in Python","text":"<p><code>defaultdict</code> is a subclass of <code>dict</code> that provides a default value for missing keys.</p>"},{"location":"python/python_docs/data_structure/#example","title":"Example:","text":"<pre><code>from collections import defaultdict\n\ndd = defaultdict(int)\ndd['a'] += 1  # Default value is 0, so 'a' becomes 1\nprint(dd)  # defaultdict(&lt;class 'int'&gt;, {'a': 1})\n</code></pre>"},{"location":"python/python_docs/data_structure/#use-case","title":"Use Case:","text":"<ul> <li>Simplifies handling of missing keys.</li> <li>Commonly used for counting, grouping, or initializing nested dictionaries.</li> </ul>"},{"location":"python/python_docs/fast-api/","title":"FastAPI Guide","text":"<p>FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints. Below are some key aspects of working with FastAPI:</p>"},{"location":"python/python_docs/fast-api/#setting-up-a-fastapi-project","title":"Setting up a FastAPI Project","text":"<p>To start a FastAPI project: 1. Install FastAPI and an ASGI server like <code>uvicorn</code>:     <code>bash     pip install fastapi uvicorn</code> 2. Create a Python file and define your application:     ```python     from fastapi import FastAPI</p> <pre><code>app = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n     return {\"message\": \"Hello, FastAPI!\"}\n```\n</code></pre> <ol> <li>Run the application:     <code>bash     uvicorn main:app --reload</code></li> </ol>"},{"location":"python/python_docs/fast-api/#requestresponse-models-with-pydantic","title":"Request/Response Models with Pydantic","text":"<p>FastAPI uses Pydantic for data validation and serialization. Define models for request and response data:</p> <pre><code>from pydantic import BaseModel\n\nclass Item(BaseModel):\n     name: str\n     price: float\n     is_offer: bool = None\n\n@app.post(\"/items/\")\ndef create_item(item: Item):\n     return {\"item\": item}\n</code></pre>"},{"location":"python/python_docs/fast-api/#handling-routes-querypathbody-parameters","title":"Handling Routes, Query/Path/Body Parameters","text":"<p>FastAPI makes it easy to handle different types of parameters: - Path Parameters:   <code>python   @app.get(\"/items/{item_id}\")   def read_item(item_id: int):         return {\"item_id\": item_id}</code> - Query Parameters:   <code>python   @app.get(\"/items/\")   def read_items(skip: int = 0, limit: int = 10):         return {\"skip\": skip, \"limit\": limit}</code> - Body Parameters:   <code>python   @app.put(\"/items/{item_id}\")   def update_item(item_id: int, item: Item):         return {\"item_id\": item_id, \"item\": item}</code></p>"},{"location":"python/python_docs/fast-api/#dependency-injection","title":"Dependency Injection","text":"<p>FastAPI provides a powerful dependency injection system to manage shared logic:</p> <pre><code>from fastapi import Depends\n\ndef common_dependency():\n     return {\"message\": \"Dependency injected\"}\n\n@app.get(\"/items/\")\ndef read_items(dep=Depends(common_dependency)):\n     return dep\n</code></pre>"},{"location":"python/python_docs/fast-api/#middleware-and-exception-handling","title":"Middleware and Exception Handling","text":"<p>Add middleware for processing requests and responses globally:</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n     CORSMiddleware,\n     allow_origins=[\"*\"],\n     allow_methods=[\"*\"],\n     allow_headers=[\"*\"],\n)\n</code></pre> <p>Handle exceptions with custom logic:</p> <pre><code>from fastapi import HTTPException\n\n@app.get(\"/error/\")\ndef raise_error():\n     raise HTTPException(status_code=404, detail=\"Item not found\")\n</code></pre>"},{"location":"python/python_docs/fast-api/#background-tasks-and-async-support","title":"Background Tasks and Async Support","text":"<p>FastAPI supports asynchronous programming and background tasks:</p> <pre><code>from fastapi import BackgroundTasks\n\ndef write_log(message: str):\n     with open(\"log.txt\", \"a\") as log_file:\n          log_file.write(message + \"\\n\")\n\n@app.post(\"/log/\")\ndef log_message(message: str, background_tasks: BackgroundTasks):\n     background_tasks.add_task(write_log, message)\n     return {\"message\": \"Log task added\"}\n</code></pre> <p>FastAPI's async capabilities allow you to write non-blocking code for better performance:</p> <pre><code>@app.get(\"/async/\")\nasync def async_endpoint():\n     return {\"message\": \"This is an async endpoint\"}\n</code></pre> <p>FastAPI simplifies API development with its intuitive design and robust features.</p>"},{"location":"python/python_docs/oops/","title":"Object-Oriented Programming (OOP) Concepts in Python","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure code. Python is an object-oriented language that supports OOP principles such as encapsulation, inheritance, polymorphism, and abstraction.</p>"},{"location":"python/python_docs/oops/#key-oop-concepts","title":"Key OOP Concepts","text":""},{"location":"python/python_docs/oops/#1-class-and-object","title":"1. Class and Object","text":"<ul> <li>Class: A blueprint for creating objects.</li> <li>Object: An instance of a class.</li> </ul> <p>Example:</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name}.\"\n\n# Creating an object\nperson1 = Person(\"Alice\", 30)\nprint(person1.greet())  # Output: Hello, my name is Alice.\n</code></pre>"},{"location":"python/python_docs/oops/#2-encapsulation","title":"2. Encapsulation","text":"<p>Encapsulation is the bundling of data (attributes) and methods (functions) within a class. It also restricts direct access to some components using private or protected members.</p> <p>Example:</p> <pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n</code></pre>"},{"location":"python/python_docs/oops/#3-inheritance","title":"3. Inheritance","text":"<p>Inheritance allows a class (child) to inherit attributes and methods from another class (parent).</p> <p>Example:</p> <pre><code>class Animal:\n    def speak(self):\n        return \"I make a sound.\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\ndog = Dog()\nprint(dog.speak())  # Output: Woof!\n</code></pre> <p>Types of Inheritance</p> <p>Inheritance in Python can be categorized into the following types:</p>"},{"location":"python/python_docs/oops/#asingle-inheritance","title":"a.Single Inheritance","text":"<p>A child class inherits from a single parent class.</p> <p>Example:</p> <pre><code>class Parent:\n        def func1(self):\n            return \"This is a parent class.\"\n\nclass Child(Parent):\n        def func2(self):\n            return \"This is a child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is a parent class.\nprint(obj.func2())  # Output: This is a child class.\n</code></pre>"},{"location":"python/python_docs/oops/#bmultiple-inheritance","title":"b.Multiple Inheritance","text":"<p>A child class inherits from multiple parent classes.</p> <p>Example:</p> <pre><code>class Parent1:\n        def func1(self):\n            return \"This is Parent1.\"\n\nclass Parent2:\n        def func2(self):\n            return \"This is Parent2.\"\n\nclass Child(Parent1, Parent2):\n        def func3(self):\n            return \"This is a child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is Parent1.\nprint(obj.func2())  # Output: This is Parent2.\nprint(obj.func3())  # Output: This is a child class.\n</code></pre>"},{"location":"python/python_docs/oops/#cmultilevel-inheritance","title":"c.Multilevel Inheritance","text":"<p>A child class inherits from a parent class, and another child class inherits from this child class.</p> <p>Example:</p> <pre><code>class Grandparent:\n        def func1(self):\n            return \"This is the grandparent class.\"\n\nclass Parent(Grandparent):\n        def func2(self):\n            return \"This is the parent class.\"\n\nclass Child(Parent):\n        def func3(self):\n            return \"This is the child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is the grandparent class.\nprint(obj.func2())  # Output: This is the parent class.\nprint(obj.func3())  # Output: This is the child class.\n</code></pre>"},{"location":"python/python_docs/oops/#dhierarchical-inheritance","title":"d.Hierarchical Inheritance","text":"<p>Multiple child classes inherit from a single parent class.</p> <p>Example:</p> <pre><code>class Parent:\n        def func1(self):\n            return \"This is the parent class.\"\n\nclass Child1(Parent):\n        def func2(self):\n            return \"This is Child1.\"\n\nclass Child2(Parent):\n        def func3(self):\n            return \"This is Child2.\"\n\nobj1 = Child1()\nobj2 = Child2()\nprint(obj1.func1())  # Output: This is the parent class.\nprint(obj1.func2())  # Output: This is Child1.\nprint(obj2.func1())  # Output: This is the parent class.\nprint(obj2.func3())  # Output: This is Child2.\n</code></pre>"},{"location":"python/python_docs/oops/#ehybrid-inheritance","title":"e.Hybrid Inheritance","text":"<p>A combination of two or more types of inheritance.</p> <p>Example:</p> <pre><code>class Parent:\n        def func1(self):\n            return \"This is the parent class.\"\n\nclass Child1(Parent):\n        def func2(self):\n            return \"This is Child1.\"\n\nclass Child2(Parent):\n        def func3(self):\n            return \"This is Child2.\"\n\nclass GrandChild(Child1, Child2):\n        def func4(self):\n            return \"This is the grandchild class.\"\n\nobj = GrandChild()\nprint(obj.func1())  # Output: This is the parent class.\nprint(obj.func2())  # Output: This is Child1.\nprint(obj.func3())  # Output: This is Child2.\nprint(obj.func4())  # Output: This is the grandchild class.\n</code></pre> <p>Understanding these types of inheritance helps in designing a robust and reusable class hierarchy in Python.</p>"},{"location":"python/python_docs/oops/#4-polymorphism","title":"4. Polymorphism","text":"<p>Polymorphism allows methods in different classes to have the same name but behave differently.</p> <p>Example:</p> <pre><code>class Bird:\n    def fly(self):\n        return \"I can fly.\"\n\nclass Penguin(Bird):\n    def fly(self):\n        return \"I cannot fly.\"\n\nbird = Bird()\npenguin = Penguin()\nprint(bird.fly())      # Output: I can fly.\nprint(penguin.fly())   # Output: I cannot fly.\n</code></pre>"},{"location":"python/python_docs/oops/#5-abstraction","title":"5. Abstraction","text":"<p>Abstraction hides implementation details and shows only the essential features of an object. In Python, abstraction can be achieved using abstract base classes (ABC).</p> <p>Example:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\ncircle = Circle(5)\nprint(circle.area())  # Output: 78.5\n</code></pre>"},{"location":"python/python_docs/oops/#conclusion","title":"Conclusion","text":"<p>OOP in Python provides a structured way to organize code, making it reusable, scalable, and easier to maintain. By mastering OOP concepts like encapsulation, inheritance, polymorphism, and abstraction, you can write efficient and clean Python programs.</p>"},{"location":"python/python_docs/python_fundamentals/","title":"Python Fundamentals","text":""},{"location":"python/python_docs/python_fundamentals/#1-data-types","title":"1. Data Types","text":"<p>Python provides several built-in data types:</p> <ul> <li> <p>int: Represents integers.     Example: <code>x = 10</code></p> </li> <li> <p>float: Represents floating-point numbers.     Example: <code>pi = 3.14</code></p> </li> <li> <p>str: Represents strings.     Example: <code>name = \"Python\"</code></p> </li> <li> <p>list: Ordered, mutable collection.     Example: <code>fruits = [\"apple\", \"banana\", \"cherry\"]</code></p> </li> <li> <p>tuple: Ordered, immutable collection.     Example: <code>coordinates = (10, 20)</code></p> </li> <li> <p>set: Unordered, unique collection.     Example: <code>unique_numbers = {1, 2, 3}</code></p> </li> <li> <p>dict: Key-value pairs.     Example: <code>person = {\"name\": \"John\", \"age\": 30}</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#2-control-flow","title":"2. Control Flow","text":"<p>Control flow statements allow conditional execution and iteration.</p> <ul> <li> <p>if-else: <code>python     if x &gt; 0:             print(\"Positive\")     else:             print(\"Non-positive\")</code></p> </li> <li> <p>for loop: <code>python     for i in range(5):             print(i)</code></p> </li> <li> <p>while loop: <code>python     count = 0     while count &lt; 5:             print(count)             count += 1</code></p> </li> <li> <p>break: Exit a loop. <code>python     for i in range(5):             if i == 3:                     break             print(i)</code></p> </li> <li> <p>continue: Skip the current iteration. <code>python     for i in range(5):             if i == 3:                     continue             print(i)</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#3-functions","title":"3. Functions","text":"<p>Functions encapsulate reusable code.</p> <ul> <li> <p>def: Define a function. <code>python     def greet(name):             return f\"Hello, {name}!\"</code></p> </li> <li> <p>lambda: Anonymous functions. <code>python     square = lambda x: x * x     print(square(5))</code></p> </li> <li> <p>*args: Variable-length positional arguments. <code>python     def add(*args):             return sum(args)</code></p> </li> <li> <p>**kwargs: Variable-length keyword arguments. <code>python     def print_info(**kwargs):             for key, value in kwargs.items():                     print(f\"{key}: {value}\")</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#4-comprehensions","title":"4. Comprehensions","text":"<p>Comprehensions provide a concise way to create collections.</p> <ul> <li> <p>List comprehension: <code>python     squares = [x**2 for x in range(5)]</code></p> </li> <li> <p>Dictionary comprehension: <code>python     square_dict = {x: x**2 for x in range(5)}</code></p> </li> <li> <p>Set comprehension: <code>python     unique_squares = {x**2 for x in range(5)}</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#5-exception-handling","title":"5. Exception Handling","text":"<p>Handle runtime errors gracefully.</p> <ul> <li> <p>try-except-finally: <code>python     try:             result = 10 / 0     except ZeroDivisionError as e:             print(\"Error:\", e)     finally:             print(\"Execution complete\")</code></p> </li> <li> <p>Custom exceptions:     ```python     class CustomError(Exception):             pass</p> <p>raise CustomError(\"This is a custom exception\") ```</p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#6-file-handling","title":"6. File Handling","text":"<p>Work with files using Python's built-in functions.</p> <ul> <li> <p>open(), read(), write(): <code>python     with open(\"example.txt\", \"w\") as file:             file.write(\"Hello, World!\")</code></p> </li> <li> <p>with statement: Ensures proper resource management. <code>python     with open(\"example.txt\", \"r\") as file:             content = file.read()</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#7-modules-packages","title":"7. Modules &amp; Packages","text":"<p>Organize and reuse code.</p> <ul> <li> <p>import: Import modules. <code>python     import math     print(math.sqrt(16))</code></p> </li> <li> <p>pip: Install packages.     Command: <code>pip install requests</code></p> </li> <li> <p>virtualenv: Create isolated environments.     Command: <code>virtualenv myenv</code></p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#8-decorators-generators","title":"8. Decorators &amp; Generators","text":""},{"location":"python/python_docs/python_fundamentals/#decorators","title":"Decorators","text":"<p>Modify or extend the behavior of functions.</p> <ul> <li> <p>@staticmethod: Define a static method. <code>python     class MyClass:             @staticmethod             def greet():                     print(\"Hello!\")</code></p> </li> <li> <p>@classmethod: Define a class method. <code>python     class MyClass:             @classmethod             def create_instance(cls):                     return cls()</code></p> </li> <li> <p>@property: Define a property.     ```python     class MyClass:             def init(self, value):                     self._value = value</p> <pre><code>    @property\n    def value(self):\n            return self._value\n</code></pre> <p>```</p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#generators","title":"Generators","text":"<p>Generate values lazily using <code>yield</code>.</p> <ul> <li> <p>yield keyword:     ```python     def generate_numbers():             for i in range(5):                     yield i</p> <p>for num in generate_numbers():         print(num) ```</p> </li> </ul>"},{"location":"python/python_docs/python_fundamentals/#9-__slots__-in-python","title":"9. <code>__slots__</code> in Python","text":"<p><code>__slots__</code> is a mechanism to restrict the attributes that an object can have, which can save memory by preventing the creation of a dynamic dictionary (<code>__dict__</code>) for each instance.</p> <ul> <li> <p>Usage:     ```python     class MyClass:         slots = ['name', 'age']  # Restrict attributes to 'name' and 'age'</p> <pre><code>def __init__(self, name, age):\n    self.name = name\n    self.age = age\n</code></pre> <p>obj = MyClass(\"Alice\", 30) print(obj.name)  # Output: Alice obj.address = \"123 Street\"  # Raises AttributeError ```</p> </li> <li> <p>Benefits:</p> <ul> <li>Reduces memory usage for a large number of instances.</li> <li>Prevents accidental creation of new attributes.</li> </ul> </li> <li> <p>Limitations:</p> <ul> <li>Cannot use <code>__slots__</code> with classes that inherit from a class without <code>__slots__</code>.</li> <li>Does not support dynamic attributes unless explicitly defined in <code>__slots__</code>.</li> </ul> </li> </ul>"},{"location":"python/python_docs/advanced_concepts/asyncio/","title":"Async Programming (asyncio)","text":"<p>Async programming in Python allows you to write concurrent code using the <code>asyncio</code> library. It is particularly useful for I/O-bound and high-level structured network code.</p>"},{"location":"python/python_docs/advanced_concepts/asyncio/#key-concepts","title":"Key Concepts","text":""},{"location":"python/python_docs/advanced_concepts/asyncio/#1-async-and-await","title":"1. <code>async</code> and <code>await</code>","text":"<ul> <li>Use <code>async def</code> to define an asynchronous function.</li> <li>Use <code>await</code> to pause execution until the awaited coroutine completes.</li> </ul> <pre><code>import asyncio\n\nasync def main():\n    print(\"Hello\")\n    await asyncio.sleep(1)\n    print(\"World\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/asyncio/#2-event-loop","title":"2. Event Loop","text":"<ul> <li>The event loop runs asynchronous tasks and callbacks.</li> <li>Use <code>asyncio.run()</code> to start the event loop.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/asyncio/#3-coroutines","title":"3. Coroutines","text":"<ul> <li>Coroutines are functions defined with <code>async def</code> and are the building blocks of asyncio.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/asyncio/#4-tasks","title":"4. Tasks","text":"<ul> <li>Tasks wrap coroutines and schedule them to run concurrently.</li> </ul> <pre><code>async def say_hello():\n    await asyncio.sleep(1)\n    print(\"Hello!\")\n\nasync def say_world():\n    await asyncio.sleep(1)\n    print(\"World!\")\n\nasync def main():\n    task1 = asyncio.create_task(say_hello())\n    task2 = asyncio.create_task(say_world())\n    await task1\n    await task2\n\nasyncio.run(main())\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/asyncio/#5-synchronization-primitives","title":"5. Synchronization Primitives","text":"<ul> <li><code>asyncio</code> provides primitives like <code>Lock</code>, <code>Event</code>, <code>Condition</code>, and <code>Semaphore</code> for managing concurrency.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/asyncio/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Web scraping</li> <li>Network communication</li> <li>File I/O</li> <li>Database queries</li> </ul>"},{"location":"python/python_docs/advanced_concepts/asyncio/#best-practices","title":"Best Practices","text":"<ul> <li>Avoid blocking calls in async functions.</li> <li>Use <code>asyncio.gather()</code> to run multiple coroutines concurrently.</li> <li>Handle exceptions in coroutines properly.</li> </ul> <p>For more details, refer to the official asyncio documentation.</p>"},{"location":"python/python_docs/advanced_concepts/caching/","title":"Caching","text":""},{"location":"python/python_docs/advanced_concepts/caching/#what-is-caching","title":"What is Caching?","text":"<p>Caching is a technique used to store frequently accessed data in a temporary storage layer, called a cache, to improve performance and reduce latency. By avoiding repetitive computations or database queries, caching helps applications run faster and more efficiently.</p>"},{"location":"python/python_docs/advanced_concepts/caching/#key-benefits-of-caching","title":"Key Benefits of Caching:","text":"<ul> <li>Improved Performance: Reduces the time required to retrieve data.</li> <li>Reduced Load: Minimizes the load on databases or external services.</li> <li>Cost Efficiency: Saves computational resources by reusing previously fetched or computed data.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/caching/#common-use-cases","title":"Common Use Cases:","text":"<ul> <li>Web applications storing session data.</li> <li>APIs caching responses to reduce server load.</li> <li>Machine learning models caching intermediate results.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/caching/#types-of-caching","title":"Types of Caching:","text":"<ol> <li>In-Memory Caching: Stores data in RAM for ultra-fast access (e.g., Redis, Memcached).</li> <li>Disk Caching: Stores data on disk for larger but slower storage.</li> <li>Browser Caching: Allows web browsers to store static assets like images or scripts.</li> </ol>"},{"location":"python/python_docs/advanced_concepts/caching/#example-in-python","title":"Example in Python:","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_function(param):\n    # Simulate a resource-intensive computation\n    return param ** 2\n\n# First call computes the result\nprint(expensive_function(10))  # Output: 100\n\n# Subsequent calls retrieve the result from cache\nprint(expensive_function(10))  # Output: 100 (cached)\n</code></pre> <p>Caching is a powerful optimization tool, but it requires careful management to ensure data consistency and avoid stale data.</p>"},{"location":"python/python_docs/advanced_concepts/context_managers/","title":"Context Managers","text":""},{"location":"python/python_docs/advanced_concepts/context_managers/#context-managers","title":"Context Managers","text":"<p>Context managers are a feature in Python that allow you to allocate and release resources precisely when you want to. The most common use of context managers is with the <code>with</code> statement, which ensures that resources are properly cleaned up after use, even if an error occurs during execution.</p>"},{"location":"python/python_docs/advanced_concepts/context_managers/#key-features","title":"Key Features:","text":"<ul> <li>Simplifies resource management (e.g., file handling, database connections).</li> <li>Ensures proper cleanup of resources.</li> <li>Reduces boilerplate code.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/context_managers/#example","title":"Example:","text":"<pre><code># Using a context manager to handle a file\nwith open('example.txt', 'r') as file:\n    content = file.read()\n# The file is automatically closed after the block\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/context_managers/#custom-context-managers","title":"Custom Context Managers:","text":"<p>You can create your own context managers using: 1. The <code>contextlib</code> module. 2. Implementing the <code>__enter__</code> and <code>__exit__</code> methods in a class.</p>"},{"location":"python/python_docs/advanced_concepts/context_managers/#example-with-contextlib","title":"Example with <code>contextlib</code>:","text":"<pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef custom_context():\n    print(\"Entering context\")\n    yield\n    print(\"Exiting context\")\n\nwith custom_context():\n    print(\"Inside the context\")\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/context_managers/#example-with-class","title":"Example with Class:","text":"<pre><code>class CustomContext:\n    def __enter__(self):\n        print(\"Entering context\")\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"Exiting context\")\n\nwith CustomContext():\n    print(\"Inside the context\")\n</code></pre> <p>Context managers are a powerful tool for writing clean and efficient Python code.</p>"},{"location":"python/python_docs/advanced_concepts/decorators/","title":"Decorators in Python","text":"<p>Decorators are a powerful feature in Python that allow you to modify the behavior of a function or a class method without changing its source code. They are often used to add functionality in a clean and reusable way.</p>"},{"location":"python/python_docs/advanced_concepts/decorators/#how-decorators-work","title":"How Decorators Work","text":"<p>A decorator is essentially a function that takes another function as input and returns a new function with added or modified behavior. Decorators are applied using the <code>@decorator_name</code> syntax.</p>"},{"location":"python/python_docs/advanced_concepts/decorators/#example","title":"Example","text":"<pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n</code></pre> <p>Output:</p> <pre><code>Something is happening before the function is called.\nHello!\nSomething is happening after the function is called.\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/decorators/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Logging: Automatically log function calls and their results.</li> <li>Authentication: Check user permissions before executing a function.</li> <li>Performance Measurement: Measure the execution time of a function.</li> <li>Caching: Cache the results of expensive function calls.</li> </ol>"},{"location":"python/python_docs/advanced_concepts/decorators/#built-in-decorators","title":"Built-in Decorators","text":"<p>Python provides several built-in decorators, such as:</p> <ul> <li><code>@staticmethod</code>: Defines a static method in a class.</li> <li><code>@classmethod</code>: Defines a class method.</li> <li><code>@property</code>: Defines a property for a class.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/decorators/#example-of-a-built-in-decorator","title":"Example of a Built-in Decorator","text":"<pre><code>class Example:\n    @staticmethod\n    def static_method():\n        print(\"This is a static method.\")\n\nExample.static_method()\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/decorators/#creating-custom-decorators","title":"Creating Custom Decorators","text":"<p>You can create your own decorators to suit specific needs. Here's an example:</p> <pre><code>def repeat(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\n</code></pre> <p>Output:</p> <pre><code>Hello, Alice!\nHello, Alice!\nHello, Alice!\n</code></pre> <p>Decorators are a versatile tool that can help you write cleaner and more maintainable code by separating concerns and reusing functionality.</p>"},{"location":"python/python_docs/advanced_concepts/generators/","title":"Generators","text":""},{"location":"python/python_docs/advanced_concepts/generators/#generators-in-python","title":"Generators in Python","text":"<p>Generators are a special type of iterable in Python that allow you to produce items one at a time using a function rather than storing them in memory all at once. They are created using functions with the <code>yield</code> keyword. Each time the generator's <code>__next__()</code> method is called, the function runs until it hits a <code>yield</code> statement, returning the yielded value and pausing its state for the next call.</p>"},{"location":"python/python_docs/advanced_concepts/generators/#key-features-of-generators","title":"Key Features of Generators:","text":"<ul> <li>Memory Efficiency: Generators do not store all values in memory; they generate values on the fly.</li> <li>Lazy Evaluation: Values are produced only when needed, which is useful for large datasets or infinite sequences.</li> <li>State Retention: Generators maintain their state between calls, allowing them to resume execution where they left off.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/generators/#example","title":"Example:","text":"<pre><code>def count_up_to(n):\n    count = 1\n    while count &lt;= n:\n        yield count\n        count += 1\n\n# Using the generator\ncounter = count_up_to(5)\nfor number in counter:\n    print(number)\n</code></pre> <p>This will output:</p> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Generators are widely used in Python for tasks like reading large files, streaming data, or implementing custom iterators.</p>"},{"location":"python/python_docs/advanced_concepts/iterators/","title":"Iterators in Python","text":"<p>An iterator in Python is an object that allows you to traverse through all the elements of a collection (like lists, tuples, or dictionaries) one at a time. Iterators implement two methods: <code>__iter__()</code> and <code>__next__()</code>.</p>"},{"location":"python/python_docs/advanced_concepts/iterators/#key-points","title":"Key Points:","text":"<ul> <li>Iterators are used to represent a stream of data.</li> <li>They are memory-efficient as they generate items one at a time.</li> <li>Iterators are the backbone of Python's <code>for</code> loops.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/iterators/#example-using-an-iterator","title":"Example: Using an Iterator","text":"<pre><code># Example of an iterator\nnumbers = [1, 2, 3]\niterator = iter(numbers)  # Get an iterator from the list\n\nprint(next(iterator))  # Output: 1\nprint(next(iterator))  # Output: 2\nprint(next(iterator))  # Output: 3\n# Raises StopIteration when no more items are available\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/iterators/#custom-iterators","title":"Custom Iterators","text":"<p>You can create custom iterators by defining a class with <code>__iter__()</code> and <code>__next__()</code> methods.</p> <pre><code>class Counter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.current &gt; self.end:\n            raise StopIteration\n        else:\n            self.current += 1\n            return self.current - 1\n\n# Using the custom iterator\ncounter = Counter(1, 5)\nfor number in counter:\n    print(number)  # Output: 1, 2, 3, 4, 5\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/iterators/#iterators-vs-iterables","title":"Iterators vs Iterables","text":"<ul> <li>Iterable: An object that can return an iterator using the <code>iter()</code> function (e.g., lists, tuples, dictionaries).</li> <li>Iterator: An object that represents a stream of data and implements the <code>__next__()</code> method.</li> </ul> <pre><code># Example of an iterable and iterator\nnumbers = [1, 2, 3]  # List is an iterable\niterator = iter(numbers)  # Iterator is created from the iterable\n\nprint(next(iterator))  # Output: 1\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/iterators/#use-cases","title":"Use Cases:","text":"<ul> <li>Iterators are useful for working with large datasets where loading all data into memory is inefficient.</li> <li>They are commonly used in file handling, database queries, and infinite sequences.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/iterators/#example-reading-a-file-using-an-iterator","title":"Example: Reading a File Using an Iterator","text":"<pre><code>with open(\"example.txt\", \"r\") as file:\n    for line in file:  # File object is an iterator\n        print(line.strip())\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/iterators/#generator-as-an-iterator","title":"Generator as an Iterator","text":"<p>Generators are a simpler way to create iterators using the <code>yield</code> keyword.</p> <pre><code>def countdown(n):\n    while n &gt; 0:\n        yield n\n        n -= 1\n\nfor number in countdown(5):\n    print(number)  # Output: 5, 4, 3, 2, 1\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/memory_management/","title":"Memory Management in Python","text":"<p>Memory management in Python involves the allocation and deallocation of memory to ensure efficient use of resources. Python uses an automatic memory management system, which includes:</p>"},{"location":"python/python_docs/advanced_concepts/memory_management/#key-concepts","title":"Key Concepts","text":""},{"location":"python/python_docs/advanced_concepts/memory_management/#1-reference-counting","title":"1. Reference Counting","text":"<ul> <li>Python tracks the number of references to an object.</li> <li>When the reference count drops to zero, the memory is deallocated.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#2-garbage-collection","title":"2. Garbage Collection","text":"<ul> <li>Python has a garbage collector to handle cyclic references (e.g., objects referencing each other).</li> <li>The garbage collector identifies and frees memory occupied by unreachable objects.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#3-memory-allocation","title":"3. Memory Allocation","text":"<ul> <li>Python uses private heaps to store objects and data structures.</li> <li>The <code>PyObject</code> allocator manages memory for Python objects.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#4-memory-optimization","title":"4. Memory Optimization","text":"<ul> <li>Python uses techniques like interning for small integers and strings to save memory.</li> <li>Modules like <code>gc</code> and <code>sys</code> provide tools to monitor and optimize memory usage.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#best-practices","title":"Best Practices","text":"<ul> <li>Avoid creating unnecessary objects.</li> <li>Use built-in data structures efficiently.</li> <li>Explicitly delete large objects when no longer needed using <code>del</code>.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#types-of-memory-in-python","title":"Types of Memory in Python","text":""},{"location":"python/python_docs/advanced_concepts/memory_management/#1-stack-memory","title":"1. Stack Memory","text":"<ul> <li>Used for function calls and local variables.</li> <li>Memory is automatically allocated and deallocated as functions are called and return.</li> <li>Operates in a Last-In-First-Out (LIFO) manner.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#2-heap-memory","title":"2. Heap Memory","text":"<ul> <li>Used for dynamic memory allocation.</li> <li>Objects and data structures are stored in the heap.</li> <li>Managed by Python's memory manager and garbage collector.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/memory_management/#3-static-memory","title":"3. Static Memory","text":"<ul> <li>Used for global variables and static data.</li> <li>Allocated at the start of the program and deallocated when the program ends.</li> </ul> <p>Understanding these memory types helps in writing efficient and optimized Python code.</p> <p>For more details, refer to the Python Memory Management Documentation.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/","title":"What is Meta?","text":"<p>In Python, \"meta\" refers to something that operates at a higher level of abstraction. For example, metaclasses operate at the level of classes, defining how classes themselves behave. Similarly, metadata refers to data about data, providing additional context or information.</p> <p>The term \"meta\" is often used to describe concepts that involve self-referential or higher-order behavior. In the context of programming, it typically implies mechanisms that allow customization or introspection of the underlying system.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#metaclasses-in-python","title":"Metaclasses in Python","text":"<p>Metaclasses are a powerful and advanced feature in Python that allow you to control the behavior of class creation. They are essentially \"classes of classes\"\u2014just as classes define the behavior of objects, metaclasses define the behavior of classes.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#what-is-a-metaclass","title":"What is a Metaclass?","text":"<p>A metaclass is a class that defines how other classes are created and behave. By default, Python uses the built-in <code>type</code> as the metaclass for all classes. However, you can define your own metaclass to customize class creation.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#why-use-metaclasses","title":"Why Use Metaclasses?","text":"<p>Metaclasses are useful when you need to: - Enforce coding standards or constraints on class definitions. - Automatically register classes or modify their attributes. - Implement frameworks or libraries that require dynamic class behavior.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#how-to-define-a-metaclass","title":"How to Define a Metaclass","text":"<p>To create a custom metaclass, you define a class that inherits from <code>type</code>. You can override methods like: - <code>__new__</code>: Controls the creation of the class. - <code>__init__</code>: Initializes the class after it is created.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#example","title":"Example","text":"<pre><code># Define a custom metaclass\nclass MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        print(f\"Creating class {name}\")\n        return super().__new__(cls, name, bases, dct)\n\n# Use the custom metaclass\nclass MyClass(metaclass=MyMeta):\n    pass\n\n# Output: Creating class MyClass\n</code></pre> <p>In this example, the <code>MyMeta</code> metaclass customizes the class creation process by printing a message whenever a class is created.</p>"},{"location":"python/python_docs/advanced_concepts/metaclasses/#key-points-to-remember","title":"Key Points to Remember","text":"<ul> <li>Metaclasses are rarely needed in everyday programming.</li> <li>They are most useful in scenarios involving frameworks, libraries, or dynamic class behavior.</li> <li>Overusing metaclasses can make code harder to understand and maintain.</li> </ul> <p>Metaclasses are a powerful tool, but they should be used judiciously to avoid unnecessary complexity.</p>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/","title":"Multiprocessing in Python","text":"<p><code>multiprocessing</code> is a Python module that allows the creation of multiple processes to execute tasks in parallel. It is particularly useful for CPU-bound tasks, as it bypasses the Global Interpreter Lock (GIL) by running separate processes, each with its own memory space.</p>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#key-points","title":"Key Points:","text":"<ul> <li>Achieves true parallelism by utilizing multiple CPU cores.</li> <li>Each process runs independently with its own memory space.</li> <li>Ideal for CPU-intensive tasks like data processing, mathematical computations, or simulations.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#example-using-multiprocessing-module","title":"Example: Using <code>multiprocessing</code> Module","text":"<pre><code>from multiprocessing import Process\nimport os\n\ndef worker_function(name):\n    print(f\"Process {name} running with PID: {os.getpid()}\")\n\nif __name__ == \"__main__\":\n    processes = []\n    for i in range(5):\n        process = Process(target=worker_function, args=(f\"Worker-{i}\",))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    print(\"All processes completed\")\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#advantages","title":"Advantages:","text":"<ul> <li>Utilizes multiple CPU cores for better performance on CPU-bound tasks.</li> <li>Avoids GIL, making it suitable for parallel execution.</li> <li>Processes are isolated, reducing the risk of race conditions.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#limitations","title":"Limitations:","text":"<ul> <li>Higher memory usage compared to threads due to separate memory spaces.</li> <li>Inter-process communication (IPC) can be more complex and slower than thread communication.</li> <li>Process creation and management overhead can impact performance for small tasks.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#example-using-a-queue-for-inter-process-communication-ipc","title":"Example: Using a Queue for Inter-Process Communication (IPC)","text":"<pre><code>from multiprocessing import Process, Queue\n\ndef producer(queue):\n    for i in range(5):\n        queue.put(i)\n        print(f\"Produced: {i}\")\n\ndef consumer(queue):\n    while not queue.empty():\n        item = queue.get()\n        print(f\"Consumed: {item}\")\n\nif __name__ == \"__main__\":\n    queue = Queue()\n    producer_process = Process(target=producer, args=(queue,))\n    consumer_process = Process(target=consumer, args=(queue,))\n\n    producer_process.start()\n    producer_process.join()\n\n    consumer_process.start()\n    consumer_process.join()\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#use-cases","title":"Use Cases:","text":"<ul> <li>Data processing pipelines.</li> <li>Parallel execution of simulations or mathematical computations.</li> <li>Tasks that require high CPU utilization.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multiprocessing/#multiprocessing-vs-multithreading","title":"Multiprocessing vs Multithreading","text":"<ul> <li>Multiprocessing: Runs multiple processes, each with its own memory space. Ideal for CPU-bound tasks.</li> <li>Multithreading: Runs multiple threads within the same process. Useful for I/O-bound tasks.</li> </ul> <pre><code># Multiprocessing example\nfrom multiprocessing import Process\ndef task():\n    print(\"Process running\")\nprocess = Process(target=task)\nprocess.start()\n\n# Multithreading example\nimport threading\ndef task():\n    print(\"Thread running\")\nthread = threading.Thread(target=task)\nthread.start()\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/multithreading/","title":"Multithreading in Python","text":"<p>Multithreading is a programming technique that allows multiple threads to run concurrently within a single process. Threads are lightweight sub-processes that share the same memory space, enabling efficient execution of tasks that can run independently.</p>"},{"location":"python/python_docs/advanced_concepts/multithreading/#key-features-of-multithreading","title":"Key Features of Multithreading","text":"<ul> <li>Concurrency: Multiple threads can execute simultaneously, improving performance for I/O-bound tasks.</li> <li>Shared Memory: Threads share the same memory space, making communication between them faster.</li> <li>Lightweight: Threads consume fewer resources compared to processes.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multithreading/#python-and-the-global-interpreter-lock-gil","title":"Python and the Global Interpreter Lock (GIL)","text":"<p>In Python, the Global Interpreter Lock (GIL) ensures that only one thread executes Python bytecode at a time. This can limit the performance benefits of multithreading for CPU-bound tasks. However, multithreading is still useful for I/O-bound tasks like file operations, network requests, or database queries.</p>"},{"location":"python/python_docs/advanced_concepts/multithreading/#example-multithreading-in-python","title":"Example: Multithreading in Python","text":"<pre><code>import threading\nimport time\n\ndef print_numbers():\n    for i in range(5):\n        print(f\"Number: {i}\")\n        time.sleep(1)\n\ndef print_letters():\n    for letter in 'ABCDE':\n        print(f\"Letter: {letter}\")\n        time.sleep(1)\n\n# Create threads\nthread1 = threading.Thread(target=print_numbers)\nthread2 = threading.Thread(target=print_letters)\n\n# Start threads\nthread1.start()\nthread2.start()\n\n# Wait for threads to complete\nthread1.join()\nthread2.join()\n\nprint(\"Multithreading example completed.\")\n</code></pre>"},{"location":"python/python_docs/advanced_concepts/multithreading/#when-to-use-multithreading","title":"When to Use Multithreading","text":"<ul> <li>I/O-bound tasks: Tasks that involve waiting for external resources, such as reading/writing files or making network requests.</li> <li>Real-time applications: Applications that require responsiveness, such as GUIs or games.</li> </ul>"},{"location":"python/python_docs/advanced_concepts/multithreading/#limitations","title":"Limitations","text":"<ul> <li>GIL: Limits the performance of CPU-bound tasks.</li> <li>Complexity: Managing threads can introduce challenges like race conditions and deadlocks.</li> </ul> <p>For CPU-bound tasks, consider using multiprocessing instead of multithreading.</p>"},{"location":"react/","title":"Interview Preparation","text":"<ul> <li>Learn JS</li> <li>Learn React JS </li> <li>Technical Topics</li> <li>Behavioral Questions</li> <li>Coding Challenges</li> <li>System Design</li> <li>Mock Interviews</li> <li>Resources</li> </ul>"},{"location":"react/#introduction-to-react","title":"Introduction to React","text":"<p>React is a popular JavaScript library for building user interfaces, particularly for single-page applications. It allows developers to create reusable UI components and manage the state of their applications efficiently. React was developed by Facebook and has since become one of the most widely used libraries in the web development ecosystem.</p>"},{"location":"react/#history-of-react","title":"History of React","text":""},{"location":"react/#2011-the-beginning","title":"2011: The Beginning","text":"<p>React was initially created by Jordan Walke, a software engineer at Facebook. It was inspired by XHP, a PHP-based component framework. React was first used internally at Facebook for their News Feed feature.</p>"},{"location":"react/#2013-open-source-release","title":"2013: Open Source Release","text":"<p>In May 2013, Facebook open-sourced React at the JSConf US conference. This marked the beginning of its adoption by the broader developer community. React introduced the concept of a virtual DOM, which improved performance by minimizing direct manipulation of the real DOM.</p>"},{"location":"react/#2015-react-native","title":"2015: React Native","text":"<p>React Native, a framework for building mobile applications using React, was released in 2015. It allowed developers to write cross-platform mobile apps using JavaScript and React, further expanding React's ecosystem.</p>"},{"location":"react/#2016-introduction-of-fiber","title":"2016: Introduction of Fiber","text":"<p>React Fiber, a complete rewrite of React's core algorithm, was announced in 2016 and released in 2017 with React 16. Fiber improved React's rendering capabilities, enabling features like time slicing and better handling of asynchronous rendering.</p>"},{"location":"react/#2017-react-16-and-beyond","title":"2017: React 16 and Beyond","text":"<p>React 16 introduced several new features, including error boundaries, portals, and the ability to return arrays and strings from components. It also improved performance and added support for server-side rendering.</p>"},{"location":"react/#2018-hooks-api","title":"2018: Hooks API","text":"<p>In 2018, React introduced Hooks, a revolutionary feature that allowed developers to use state and other React features in functional components. Hooks simplified code and made it easier to share logic between components.</p>"},{"location":"react/#2020-concurrent-mode-and-suspense","title":"2020: Concurrent Mode and Suspense","text":"<p>React continued to evolve with the introduction of Concurrent Mode and Suspense. These features aimed to improve the user experience by enabling smoother rendering and better handling of asynchronous data fetching.</p>"},{"location":"react/#2022-react-18","title":"2022: React 18","text":"<p>React 18 brought significant advancements, including automatic batching, a new concurrent rendering engine, and an improved Suspense API. These updates made React applications faster and more efficient.</p>"},{"location":"react/#current-advancements","title":"Current Advancements","text":"<p>React continues to be actively developed and maintained by Facebook and the open-source community. Recent advancements include:</p> <ul> <li>Server Components: A new way to build server-rendered applications with better performance.</li> <li>React DevTools: Enhanced debugging tools for developers.</li> <li>Improved TypeScript Support: Better integration with TypeScript for type-safe development.</li> <li>Ecosystem Growth: A thriving ecosystem of libraries and tools, such as Next.js, Remix, and React Query.</li> </ul>"},{"location":"react/#conclusion","title":"Conclusion","text":"<p>React has come a long way since its inception in 2011. Its focus on performance, reusability, and developer experience has made it a cornerstone of modern web development. With continuous updates and a vibrant community, React remains a powerful tool for building dynamic and scalable applications.</p>"},{"location":"react/react_docs/behavioral_questions/","title":"Behavioral Topics in React","text":""},{"location":"react/react_docs/behavioral_questions/#1-state-management","title":"1. State Management","text":"<p>State management is a core concept in React that allows components to manage and update their internal state.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#2-props-and-component-communication","title":"2. Props and Component Communication","text":"<p>Props are used to pass data from a parent component to a child component.</p> <pre><code>function Greeting({ name }) {\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n}\n\nfunction App() {\n  return &lt;Greeting name=\"Lenin\" /&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#3-lifecycle-methods","title":"3. Lifecycle Methods","text":"<p>React components have lifecycle methods that allow you to hook into different phases of a component's life.</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction Timer() {\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {\n      console.log('Timer running...');\n    }, 1000);\n\n    return () =&gt; clearInterval(timer); // Cleanup on unmount\n  }, []);\n\n  return &lt;p&gt;Check the console for timer logs.&lt;/p&gt;;\n}\n\nexport default Timer;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#4-conditional-rendering","title":"4. Conditional Rendering","text":"<p>React allows you to render components conditionally based on certain conditions.</p> <pre><code>function UserGreeting({ isLoggedIn }) {\n  return (\n    &lt;div&gt;\n      {isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&gt;Please log in.&lt;/h1&gt;}\n    &lt;/div&gt;\n  );\n}\n\nexport default UserGreeting;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#5-handling-events","title":"5. Handling Events","text":"<p>React provides a way to handle user interactions through event handlers.</p> <pre><code>function ButtonClick() {\n  const handleClick = () =&gt; {\n    alert('Button clicked!');\n  };\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n\nexport default ButtonClick;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#6-forms-and-controlled-components","title":"6. Forms and Controlled Components","text":"<p>React uses controlled components to manage form inputs.</p> <pre><code>import React, { useState } from 'react';\n\nfunction LoginForm() {\n  const [username, setUsername] = useState('');\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Username: ${username}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={username}\n        onChange={(e) =&gt; setUsername(e.target.value)}\n        placeholder=\"Enter username\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default LoginForm;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#7-context-api","title":"7. Context API","text":"<p>The Context API is used for managing global state in a React application.</p> <pre><code>import React, { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return &lt;button style={{ background: theme === 'dark' ? '#333' : '#fff' }}&gt;Themed Button&lt;/button&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;ThemeContext.Provider value=\"dark\"&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#8-error-boundaries","title":"8. Error Boundaries","text":"<p>Error boundaries are used to catch JavaScript errors in a component tree.</p> <pre><code>import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.error('Error caught:', error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#9-react-hooks","title":"9. React Hooks","text":"<p>Hooks allow you to use state and other React features in functional components.</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nfunction FetchData() {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch('https://api.example.com/data')\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; setData(data));\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : 'Loading...'}&lt;/div&gt;;\n}\n\nexport default FetchData;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#10-performance-optimization","title":"10. Performance Optimization","text":"<p>React provides tools like <code>React.memo</code> and <code>useMemo</code> for optimizing performance.</p> <pre><code>import React, { useState, useMemo } from 'react';\n\nfunction ExpensiveCalculation({ num }) {\n  const calculate = (n) =&gt; {\n    console.log('Calculating...');\n    return n * 2;\n  };\n\n  const result = useMemo(() =&gt; calculate(num), [num]);\n\n  return &lt;p&gt;Result: {result}&lt;/p&gt;;\n}\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;ExpensiveCalculation num={count} /&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"react/react_docs/es6_features/","title":"ES6 Features","text":"<p>ECMAScript 6 (ES6), also known as ECMAScript 2015, introduced several new features to JavaScript, making it more powerful and easier to work with. Below are some of the key features of ES6:</p>"},{"location":"react/react_docs/es6_features/#1-let-and-const","title":"1. Let and Const","text":"<ul> <li><code>let</code>: Block-scoped variable declaration.</li> <li><code>const</code>: Block-scoped constant declaration.</li> </ul> <pre><code>let x = 10;\nconst y = 20;\n</code></pre>"},{"location":"react/react_docs/es6_features/#2-arrow-functions","title":"2. Arrow Functions","text":"<ul> <li>Concise syntax for writing functions.</li> <li>Lexical <code>this</code> binding.</li> </ul> <pre><code>const add = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"react/react_docs/es6_features/#3-template-literals","title":"3. Template Literals","text":"<ul> <li>String interpolation using backticks <code>`</code>.</li> <li>Multi-line strings.</li> </ul> <pre><code>const name = \"John\";\nconsole.log(`Hello, ${name}!`);\n</code></pre>"},{"location":"react/react_docs/es6_features/#4-default-parameters","title":"4. Default Parameters","text":"<ul> <li>Assign default values to function parameters.</li> </ul> <pre><code>function greet(name = \"Guest\") {\n    return `Hello, ${name}`;\n}\n</code></pre>"},{"location":"react/react_docs/es6_features/#5-destructuring-assignment","title":"5. Destructuring Assignment","text":"<ul> <li>Extract values from arrays or objects into variables.</li> </ul> <pre><code>const [a, b] = [1, 2];\nconst { name, age } = { name: \"Alice\", age: 25 };\n</code></pre>"},{"location":"react/react_docs/es6_features/#6-rest-and-spread-operators","title":"6. Rest and Spread Operators","text":"<ul> <li><code>...</code> for collecting or spreading elements.</li> </ul> <pre><code>function sum(...numbers) {\n    return numbers.reduce((a, b) =&gt; a + b, 0);\n}\n\nconst arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];\n</code></pre>"},{"location":"react/react_docs/es6_features/#7-classes","title":"7. Classes","text":"<ul> <li>Syntactic sugar for creating objects and inheritance.</li> </ul> <pre><code>class Person {\n    constructor(name) {\n        this.name = name;\n    }\n    greet() {\n        return `Hello, ${this.name}`;\n    }\n}\n</code></pre>"},{"location":"react/react_docs/es6_features/#8-modules","title":"8. Modules","text":"<ul> <li>Import and export functionality for modular code.</li> </ul> <pre><code>// module.js\nexport const greet = () =&gt; \"Hello\";\n\n// main.js\nimport { greet } from './module.js';\n</code></pre>"},{"location":"react/react_docs/es6_features/#9-promises","title":"9. Promises","text":"<ul> <li>Simplified handling of asynchronous operations.</li> </ul> <pre><code>const fetchData = () =&gt;\n    new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; resolve(\"Data fetched\"), 1000);\n    });\n\nfetchData().then(console.log);\n</code></pre>"},{"location":"react/react_docs/es6_features/#10-enhanced-object-literals","title":"10. Enhanced Object Literals","text":"<ul> <li>Shorthand for properties and methods.</li> </ul> <pre><code>const name = \"John\";\nconst person = {\n    name,\n    greet() {\n        return `Hello, ${this.name}`;\n    },\n};\n</code></pre>"},{"location":"react/react_docs/es6_features/#11-iterators-and-for-of-loop","title":"11. Iterators and For-Of Loop","text":"<ul> <li>Simplified iteration over iterable objects.</li> </ul> <pre><code>const arr = [1, 2, 3];\nfor (const num of arr) {\n    console.log(num);\n}\n</code></pre>"},{"location":"react/react_docs/es6_features/#12-map-and-set","title":"12. Map and Set","text":"<ul> <li>New data structures for unique values and key-value pairs.</li> </ul> <pre><code>const set = new Set([1, 2, 3]);\nconst map = new Map([[\"key1\", \"value1\"], [\"key2\", \"value2\"]]);\n</code></pre>"},{"location":"react/react_docs/es6_features/#13-symbol","title":"13. Symbol","text":"<ul> <li>Unique and immutable primitive values.</li> </ul> <pre><code>const sym = Symbol(\"unique\");\n</code></pre>"},{"location":"react/react_docs/es6_features/#14-generators","title":"14. Generators","text":"<ul> <li>Functions that can be paused and resumed.</li> </ul> <pre><code>function* generator() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value);\n</code></pre>"},{"location":"react/react_docs/es6_features/#conclusion","title":"Conclusion","text":"<p>ES6 introduced significant improvements to JavaScript, making it more modern and developer-friendly. These features are widely supported in modern browsers and JavaScript environments.</p>"},{"location":"react/react_docs/js_learn/","title":"JavaScript Basics","text":""},{"location":"react/react_docs/js_learn/#what-is-the-window-object","title":"What is the window object?","text":"<p>The <code>window</code> object is the global object in a browser environment. It represents the browser window and provides methods, properties, and events for interacting with the browser.</p>"},{"location":"react/react_docs/js_learn/#what-is-the-document-object","title":"What is the document object?","text":"<p>The <code>document</code> object represents the HTML document loaded in the browser. It allows access to and manipulation of the DOM (Document Object Model).</p>"},{"location":"react/react_docs/js_learn/#what-is-a-variable-scope-in-javascript","title":"What is a variable scope in JavaScript?","text":"<p>Variable scope determines where a variable is accessible. JavaScript has three types of scope: - Global Scope: Accessible everywhere. - Function Scope: Accessible only within the function. - Block Scope: Accessible only within a block (<code>{}</code>), introduced with <code>let</code> and <code>const</code>.</p>"},{"location":"react/react_docs/js_learn/#what-is-a-closure","title":"What is a closure?","text":"<p>A closure is a function that retains access to its outer scope, even after the outer function has executed.</p> <pre><code>function outer() {\n  let count = 0;\n  return function inner() {\n    count++;\n    return count;\n  };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-coercion-in-javascript","title":"What is coercion in JavaScript?","text":"<p>Coercion is the automatic or implicit conversion of values from one type to another, such as converting a string to a number.</p> <pre><code>console.log('5' - 2); // 3 (string '5' is coerced to number)\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-the-temporal-dead-zone","title":"What is the temporal dead zone?","text":"<p>The temporal dead zone (TDZ) is the period between the declaration of a variable (using <code>let</code> or <code>const</code>) and its initialization, during which accessing the variable results in a <code>ReferenceError</code>.</p>"},{"location":"react/react_docs/js_learn/#what-is-hoisting-in-javascript","title":"What is hoisting in JavaScript?","text":"<p>Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during compilation.</p>"},{"location":"react/react_docs/js_learn/#what-is-the-difference-between-function-expression-and-function-declaration","title":"What is the difference between function expression and function declaration?","text":"<ul> <li>Function Declaration: Defined using the <code>function</code> keyword and hoisted.</li> <li>Function Expression: Assigned to a variable and not hoisted.</li> </ul> <pre><code>// Function Declaration\nfunction greet() {\n  console.log('Hello');\n}\n\n// Function Expression\nconst greet = function() {\n  console.log('Hello');\n};\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-a-callback","title":"What is a callback?","text":"<p>A callback is a function passed as an argument to another function and executed later.</p> <pre><code>function fetchData(callback) {\n  setTimeout(() =&gt; {\n    callback('Data fetched');\n  }, 1000);\n}\nfetchData(console.log);\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-settimeout","title":"What is setTimeout?","text":"<p><code>setTimeout</code> is a function that executes a callback after a specified delay.</p> <pre><code>setTimeout(() =&gt; console.log('Hello after 1 second'), 1000);\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-the-event-loop-in-javascript","title":"What is the event loop in JavaScript?","text":"<p>The event loop is a mechanism that handles asynchronous operations by managing the call stack, callback queue, and microtask queue.</p>"},{"location":"react/react_docs/js_learn/#what-is-the-difference-between-microtask-and-macrotask-callback-queues","title":"What is the difference between microtask and macrotask (callback) queues?","text":"<ul> <li>Microtasks: Include Promises and <code>MutationObserver</code>. They have higher priority.</li> <li>Macrotasks: Include <code>setTimeout</code>, <code>setInterval</code>, and I/O tasks.</li> </ul>"},{"location":"react/react_docs/js_learn/#why-does-a-promise-run-before-settimeout","title":"Why does a Promise run before setTimeout?","text":"<p>Promises are part of the microtask queue, which has higher priority than the macrotask queue where <code>setTimeout</code> resides.</p>"},{"location":"react/react_docs/js_learn/#what-is-the-output-of-this-tricky-async-code-practice-question","title":"What is the output of this tricky async code? (\ud83c\udd95 Practice question)","text":"<pre><code>console.log('Start');\nsetTimeout(() =&gt; console.log('Timeout'), 0);\nPromise.resolve().then(() =&gt; console.log('Promise'));\nconsole.log('End');\n</code></pre> <p>Output:</p> <pre><code>Start\nEnd\nPromise\nTimeout\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-a-promise","title":"What is a promise?","text":"<p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p>"},{"location":"react/react_docs/js_learn/#what-is-callback-hell","title":"What is callback hell?","text":"<p>Callback hell refers to nested callbacks that make code difficult to read and maintain.</p>"},{"location":"react/react_docs/js_learn/#what-is-reduce-in-javascript","title":"What is .reduce() in JavaScript?","text":"<p><code>.reduce()</code> is an array method that reduces an array to a single value by applying a callback function.</p> <pre><code>const sum = [1, 2, 3].reduce((acc, curr) =&gt; acc + curr, 0);\nconsole.log(sum); // 6\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-are-map-and-filter-how-are-they-different","title":"What are .map() and .filter()? How are they different?","text":"<ul> <li><code>.map()</code>: Transforms each element in an array and returns a new array.</li> <li><code>.filter()</code>: Filters elements based on a condition and returns a new array.</li> </ul>"},{"location":"react/react_docs/js_learn/#what-is-the-difference-between-map-and-foreach","title":"What is the difference between .map() and .forEach()?","text":"<ul> <li><code>.map()</code>: Returns a new array.</li> <li><code>.forEach()</code>: Executes a function for each element but does not return a new array.</li> </ul>"},{"location":"react/react_docs/js_learn/#what-are-template-literals","title":"What are template literals?","text":"<p>Template literals allow embedding expressions in strings using backticks (<code>`</code>).</p> <pre><code>const name = 'John';\nconsole.log(`Hello, ${name}!`);\n</code></pre>"},{"location":"react/react_docs/js_learn/#what-is-the-difference-between-and","title":"What is the difference between == and ===?","text":"<ul> <li><code>==</code>: Compares values after type coercion.</li> <li><code>===</code>: Compares values without type coercion.</li> </ul>"},{"location":"react/react_docs/js_learn/#what-is-currying-in-javascript","title":"What is currying in JavaScript?","text":"<p>Currying is a technique of transforming a function with multiple arguments into a sequence of functions, each taking a single argument.</p> <pre><code>const add = (a) =&gt; (b) =&gt; a + b;\nconsole.log(add(2)(3)); // 5\n</code></pre>"},{"location":"react/react_docs/js_learn/#deep-copy-using-recursion-how-to-implement-it","title":"Deep copy using recursion \u2013 how to implement it?","text":"<pre><code>function deepCopy(obj) {\n  if (obj === null || typeof obj !== 'object') return obj;\n  const copy = Array.isArray(obj) ? [] : {};\n  for (const key in obj) {\n    copy[key] = deepCopy(obj[key]);\n  }\n  return copy;\n}\n</code></pre>"},{"location":"react/react_docs/js_learn/#string-manipulation-in-javascript","title":"String manipulation in JavaScript","text":"<p>JavaScript provides methods like <code>split()</code>, <code>replace()</code>, <code>toUpperCase()</code>, <code>toLowerCase()</code>, and <code>substring()</code> for string manipulation.</p>"},{"location":"react/react_docs/js_learn/#what-is-void-in-javascript","title":"What is void in JavaScript?","text":"<p>The <code>void</code> operator evaluates an expression and returns <code>undefined</code>.</p> <pre><code>void 0; // undefined\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/","title":"JavaScript Intermediate Topics","text":""},{"location":"react/react_docs/js_mid_learn/#what-is-event-bubbling-and-capturing","title":"What is event bubbling and capturing?","text":"<ul> <li>Bubbling: Events propagate from the target element to the root.</li> <li>Capturing: Events propagate from the root to the target element.</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-event-delegation","title":"What is event delegation?","text":"<p>Event delegation is a technique where a parent element handles events for its child elements using event bubbling.</p>"},{"location":"react/react_docs/js_mid_learn/#what-is-debouncing","title":"What is debouncing?","text":"<p>Debouncing limits the rate at which a function executes by delaying its execution until after a specified time has elapsed since the last call.</p> <pre><code>function debounce(func, delay) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() =&gt; func.apply(this, args), delay);\n  };\n}\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-is-throttling","title":"What is throttling?","text":"<p>Throttling ensures a function is executed at most once in a specified time interval.</p> <pre><code>function throttle(func, limit) {\n  let lastCall = 0;\n  return function (...args) {\n    const now = Date.now();\n    if (now - lastCall &gt;= limit) {\n      lastCall = now;\n      func.apply(this, args);\n    }\n  };\n}\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#compare-debouncing-and-throttling","title":"Compare debouncing and throttling.","text":"<ul> <li>Debouncing: Delays execution until a pause in events.</li> <li>Throttling: Limits execution to once per interval.</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-the-timer-queue","title":"What is the timer queue?","text":"<p>The timer queue is where macrotasks like <code>setTimeout</code> and <code>setInterval</code> are queued for execution.</p>"},{"location":"react/react_docs/js_mid_learn/#what-are-localstorage-sessionstorage-and-cookies","title":"What are localStorage, sessionStorage, and cookies?","text":"<ul> <li>localStorage: Stores data with no expiration.</li> <li>sessionStorage: Stores data for the session.</li> <li>Cookies: Stores small amounts of data with expiration and sent with HTTP requests.</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-a-web-worker","title":"What is a web worker?","text":"<p>A web worker is a script that runs in the background, separate from the main thread, to perform tasks without blocking the UI.</p>"},{"location":"react/react_docs/js_mid_learn/#what-is-a-service-worker","title":"What is a service worker?","text":"<p>A service worker is a script that intercepts network requests and enables offline capabilities, caching, and push notifications.</p>"},{"location":"react/react_docs/js_mid_learn/#what-is-the-difference-between-web-worker-and-service-worker","title":"What is the difference between web worker and service worker?","text":"<ul> <li>Web Worker: For background tasks.</li> <li>Service Worker: For network-related tasks and offline support.</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-a-heap-and-stack-in-javascript","title":"What is a heap and stack in JavaScript?","text":"<ul> <li>Heap: Memory for objects and dynamic allocation.</li> <li>Stack: Memory for function calls and execution context.</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-a-currying-function","title":"What is a currying function?","text":"<p>A currying function transforms a function with multiple arguments into a sequence of functions, each taking a single argument.</p>"},{"location":"react/react_docs/js_mid_learn/#what-is-the-scope-chain","title":"What is the scope chain?","text":"<p>The scope chain is the hierarchy of scopes used to resolve variable references.</p>"},{"location":"react/react_docs/js_mid_learn/#es6-and-modern-javascript-features","title":"ES6 and Modern JavaScript Features","text":""},{"location":"react/react_docs/js_mid_learn/#what-are-the-main-es6-features","title":"What are the main ES6 features?","text":"<ul> <li>Arrow functions</li> <li>Template literals</li> <li>Destructuring</li> <li>Spread/rest operators</li> <li>Classes</li> <li>Promises</li> <li>Modules</li> </ul>"},{"location":"react/react_docs/js_mid_learn/#what-is-an-arrow-function","title":"What is an arrow function?","text":"<p>An arrow function is a concise syntax for writing functions. It does not have its own <code>this</code>.</p> <pre><code>const add = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-are-default-parameters-in-es6","title":"What are default parameters in ES6? \ud83c\udd95","text":"<p>Default parameters allow setting default values for function arguments.</p> <pre><code>function greet(name = 'Guest') {\n  console.log(`Hello, ${name}`);\n}\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-is-destructuring-in-javascript","title":"What is destructuring in JavaScript? \ud83c\udd95","text":"<p>Destructuring allows unpacking values from arrays or objects into variables.</p> <pre><code>const [a, b] = [1, 2];\nconst { name } = { name: 'John' };\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-is-the-spread-operator","title":"What is the spread operator? \ud83c\udd95","text":"<p>The spread operator (<code>...</code>) expands an array or object.</p> <pre><code>const arr = [1, 2, 3];\nconst newArr = [...arr, 4];\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-are-rest-parameters","title":"What are rest parameters? \ud83c\udd95","text":"<p>Rest parameters (<code>...</code>) collect arguments into an array.</p> <pre><code>function sum(...nums) {\n  return nums.reduce((a, b) =&gt; a + b, 0);\n}\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#what-is-a-higher-order-function","title":"What is a higher-order function?","text":"<p>A higher-order function is a function that either takes one or more functions as arguments, returns a function, or both. These functions enable functional programming patterns and are commonly used in JavaScript.</p> <p>Examples of higher-order functions: - <code>.map()</code>: Takes a callback function and applies it to each element in an array. - <code>.filter()</code>: Takes a callback function to filter elements based on a condition. - <code>.reduce()</code>: Takes a callback function to reduce an array to a single value.</p> <pre><code>// Example: Higher-order function returning another function\nfunction multiplier(factor) {\n  return function (number) {\n    return number * factor;\n  };\n}\n\nconst double = multiplier(2);\nconsole.log(double(5)); // 10\n</code></pre>"},{"location":"react/react_docs/js_mid_learn/#is-javascript-asynchronous-or-synchronous","title":"Is JavaScript asynchronous or synchronous?","text":"<p>JavaScript is single-threaded and synchronous by default, meaning it executes code line by line in the order it appears. However, it can handle asynchronous operations using features like callbacks, Promises, and <code>async/await</code>. These mechanisms allow JavaScript to perform non-blocking tasks, such as fetching data from an API or reading files, without halting the execution of other code.</p> <pre><code>console.log('Start');\n\nsetTimeout(() =&gt; {\n  console.log('Async operation');\n}, 1000);\n\nconsole.log('End');\n</code></pre> <p>Output:</p> <pre><code>Start\nEnd\nAsync operation\n</code></pre> <p>In this example, the <code>setTimeout</code> function is asynchronous, so the <code>console.log('End')</code> executes before the callback inside <code>setTimeout</code>.</p>"},{"location":"react/react_docs/react_learn/","title":"React Basics","text":""},{"location":"react/react_docs/react_learn/#what-is-react","title":"What is React?","text":"<p>React is a JavaScript library for building user interfaces.</p>"},{"location":"react/react_docs/react_learn/#what-are-the-main-features-and-advantages-of-react","title":"What are the main features and advantages of React?","text":"<ul> <li>Component-based architecture</li> <li>Virtual DOM for performance</li> <li>One-way data binding</li> <li>Reusable components</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-jsx","title":"What is JSX?","text":"<p>JSX is a syntax extension for JavaScript that allows writing HTML-like code in React.</p>"},{"location":"react/react_docs/react_learn/#how-is-jsx-different-from-html","title":"How is JSX different from HTML?","text":"<p>JSX uses camelCase for attributes and allows embedding JavaScript expressions.</p>"},{"location":"react/react_docs/react_learn/#what-is-the-virtual-dom-how-does-it-work","title":"What is the Virtual DOM? How does it work?","text":"<p>The Virtual DOM is a lightweight representation of the real DOM. React updates the Virtual DOM and efficiently syncs changes with the real DOM.</p>"},{"location":"react/react_docs/react_learn/#what-is-the-difference-between-a-functional-and-class-component","title":"What is the difference between a functional and class component?","text":"<ul> <li>Functional Component: A simple function that returns JSX.</li> <li>Class Component: A class that extends <code>React.Component</code> and includes lifecycle methods.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-are-props-in-react","title":"What are props in React?","text":"<p>Props are inputs to components, passed as attributes.</p>"},{"location":"react/react_docs/react_learn/#how-is-state-different-from-props","title":"How is state different from props?","text":"<ul> <li>State: Managed within the component.</li> <li>Props: Passed from parent to child.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-state-in-react","title":"What is state in React?","text":"<p>State is an object that holds data that can change over time.</p>"},{"location":"react/react_docs/react_learn/#how-do-you-use-the-usestate-hook","title":"How do you use the useState hook?","text":"<pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#explain-the-concept-of-one-way-data-binding-in-react","title":"Explain the concept of one-way data binding in React.","text":"<p>In React, data flows from parent to child components via props, ensuring a unidirectional data flow.</p>"},{"location":"react/react_docs/react_learn/#what-are-keys-in-react-why-are-they-important","title":"What are keys in React? Why are they important?","text":"<p>Keys help React identify which elements have changed, improving rendering performance.</p>"},{"location":"react/react_docs/react_learn/#what-is-the-purpose-of-render-in-class-components","title":"What is the purpose of render() in class components?","text":"<p>The <code>render()</code> method returns the JSX to be rendered.</p>"},{"location":"react/react_docs/react_learn/#react-hooks-component-logic","title":"React Hooks &amp; Component Logic","text":""},{"location":"react/react_docs/react_learn/#what-are-react-hooks","title":"What are React hooks?","text":"<p>Hooks are functions that let you use state and lifecycle features in functional components.</p>"},{"location":"react/react_docs/react_learn/#name-commonly-used-hooks","title":"Name commonly used hooks.","text":"<ul> <li><code>useState</code></li> <li><code>useEffect</code></li> <li><code>useContext</code></li> <li><code>useReducer</code></li> </ul>"},{"location":"react/react_docs/react_learn/#explain-the-useeffect-hook","title":"Explain the useEffect hook.","text":"<p><code>useEffect</code> performs side effects in functional components.</p>"},{"location":"react/react_docs/react_learn/#why-is-cleanup-needed-in-useeffect","title":"Why is cleanup needed in useEffect?","text":"<p>Cleanup prevents memory leaks by removing subscriptions or timers.</p>"},{"location":"react/react_docs/react_learn/#how-is-useeffect-different-from-componentdidmount-and-componentdidupdate","title":"How is useEffect different from componentDidMount and componentDidUpdate?","text":"<p><code>useEffect</code> combines the behavior of <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code>.</p>"},{"location":"react/react_docs/react_learn/#explain-usecallback-vs-usememo","title":"Explain useCallback vs useMemo.","text":"<ul> <li>useCallback: Memoizes a function.</li> <li>useMemo: Memoizes a value.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-memoization-in-react","title":"What is memoization in React?","text":"<p>Memoization optimizes performance by caching results of expensive computations.</p>"},{"location":"react/react_docs/react_learn/#what-is-a-custom-hook","title":"What is a custom hook?","text":"<p>A custom hook is a reusable function that encapsulates logic using hooks.</p>"},{"location":"react/react_docs/react_learn/#how-do-you-create-a-custom-hook-and-why","title":"How do you create a custom hook and why?","text":"<pre><code>function useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n  const increment = () =&gt; setCount(count + 1);\n  return { count, increment };\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-the-usereducer-hook","title":"What is the useReducer hook?","text":"<p><code>useReducer</code> is an alternative to <code>useState</code> for managing complex state logic.</p>"},{"location":"react/react_docs/react_learn/#implement-a-counter-using-usereducer","title":"Implement a counter using useReducer.","text":"<pre><code>import React, { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n  return &lt;button onClick={() =&gt; dispatch({ type: 'increment' })}&gt;{state.count}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-a-pure-component","title":"What is a pure component?","text":"<p>A pure component renders only when its props or state change.</p>"},{"location":"react/react_docs/react_learn/#react-forms-and-components","title":"React Forms and Components","text":""},{"location":"react/react_docs/react_learn/#what-is-a-controlled-component","title":"What is a controlled component?","text":"<p>A controlled component has its value controlled by React state.</p>"},{"location":"react/react_docs/react_learn/#what-is-an-uncontrolled-component","title":"What is an uncontrolled component?","text":"<p>An uncontrolled component manages its value using the DOM.</p>"},{"location":"react/react_docs/react_learn/#how-does-react-handle-forms","title":"How does React handle forms?","text":"<p>React handles forms using controlled components and event handlers.</p>"},{"location":"react/react_docs/react_learn/#explain-event-handling-for-inputs","title":"Explain event handling for inputs.","text":"<p>React uses the <code>onChange</code> event to handle input changes.</p>"},{"location":"react/react_docs/react_learn/#react-advanced-concepts","title":"React Advanced Concepts","text":""},{"location":"react/react_docs/react_learn/#what-are-higher-order-components-hocs","title":"What are higher-order components (HOCs)?","text":"<p>HOCs are functions that take a component and return a new component.</p>"},{"location":"react/react_docs/react_learn/#what-is-the-context-api-how-is-it-used-to-manage-state-globally","title":"What is the Context API? How is it used to manage state globally?","text":"<p>The Context API provides a way to share state across components without prop drilling.</p>"},{"location":"react/react_docs/react_learn/#what-is-reactfragment-and-when-would-you-use-it","title":"What is React.Fragment, and when would you use it?","text":"<p><code>React.Fragment</code> groups multiple elements without adding extra nodes to the DOM.</p>"},{"location":"react/react_docs/react_learn/#what-are-react-portals-when-would-you-use-them","title":"What are React Portals? When would you use them?","text":"<p>Portals render children into a DOM node outside the parent component.</p>"},{"location":"react/react_docs/react_learn/#what-are-proptypes-how-do-you-validate-props","title":"What are PropTypes? How do you validate props?","text":"<p>PropTypes validate props passed to components.</p> <pre><code>import PropTypes from 'prop-types';\n\nfunction MyComponent({ name }) {\n  return &lt;div&gt;{name}&lt;/div&gt;;\n}\n\nMyComponent.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-lazy-loading-in-react-explain-reactlazy-and-suspense","title":"What is lazy loading in React? Explain React.lazy and Suspense.","text":"<p>Lazy loading loads components only when needed. <code>React.lazy</code> and <code>Suspense</code> enable this.</p> <pre><code>const LazyComponent = React.lazy(() =&gt; import('./LazyComponent'));\n\nfunction App() {\n  return (\n    &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;LazyComponent /&gt;\n    &lt;/React.Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-reconciliation-in-react","title":"What is reconciliation in React?","text":"<p>Reconciliation is React's process of updating the DOM by comparing the Virtual DOM with the previous version.</p>"},{"location":"react/react_docs/react_learn/#how-does-the-virtual-dom-compare-elements-during-updates","title":"How does the Virtual DOM compare elements during updates?","text":"<p>React uses a diffing algorithm to compare elements and update only the changed parts.</p>"},{"location":"react/react_docs/react_learn/#what-is-server-side-rendering-ssr-in-react","title":"What is server-side rendering (SSR) in React?","text":"<p>SSR renders React components on the server and sends HTML to the client.</p>"},{"location":"react/react_docs/react_learn/#how-does-ssr-differ-from-client-side-rendering","title":"How does SSR differ from client-side rendering?","text":"<ul> <li>SSR: Renders on the server.</li> <li>Client-side rendering: Renders in the browser.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-hydration-in-react","title":"What is hydration in React?","text":"<p>Hydration attaches event listeners to server-rendered HTML.</p>"},{"location":"react/react_docs/react_learn/#how-does-the-react-fiber-architecture-improve-performance","title":"How does the React Fiber architecture improve performance?","text":"<p>Fiber improves rendering performance by breaking rendering work into chunks.</p>"},{"location":"react/react_docs/react_learn/#how-would-you-handle-global-state-management-without-redux","title":"How would you handle global state management without Redux?","text":"<p>Use the Context API or libraries like Zustand or Jotai.</p>"},{"location":"react/react_docs/react_learn/#explain-error-boundaries-in-react-how-do-you-implement-them","title":"Explain error boundaries in React. How do you implement them?","text":"<p>Error boundaries catch JavaScript errors in components.</p> <pre><code>class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#react-performance-optimization","title":"React Performance &amp; Optimization","text":""},{"location":"react/react_docs/react_learn/#how-to-optimize-a-react-component-to-prevent-unnecessary-re-renders","title":"How to optimize a React component to prevent unnecessary re-renders?","text":"<ul> <li>Use <code>React.memo</code>.</li> <li>Use <code>useCallback</code> and <code>useMemo</code>.</li> <li>Avoid inline functions.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-reactmemo","title":"What is React.memo?","text":"<p><code>React.memo</code> is a higher-order component that prevents re-renders if props do not change.</p>"},{"location":"react/react_docs/react_learn/#what-is-usetransition-react-18-feature","title":"What is useTransition? (React 18 feature)","text":"<p><code>useTransition</code> allows marking updates as non-urgent.</p>"},{"location":"react/react_docs/react_learn/#write-a-react-component-to-fetch-data-from-an-api-and-display-it","title":"Write a React component to fetch data from an API and display it.","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch('https://api.example.com/data')\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; setData(data));\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : 'Loading...'}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#explain-how-you-would-debug-a-react-application-with-performance-issues","title":"Explain how you would debug a React application with performance issues.","text":"<ul> <li>Use React Developer Tools.</li> <li>Profile components with the Performance tab.</li> <li>Optimize rendering with <code>React.memo</code> and hooks.</li> </ul>"},{"location":"react/react_docs/react_learn/#react-vs-other-tech","title":"React vs Other Tech","text":""},{"location":"react/react_docs/react_learn/#what-is-the-difference-between-react-and-react-native","title":"What is the difference between React and React Native?","text":"<ul> <li>React: For building web applications.</li> <li>React Native: For building mobile applications.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-redux-and-how-does-it-integrate-with-react","title":"What is Redux, and how does it integrate with React?","text":"<p>Redux is a state management library. It integrates with React using the <code>react-redux</code> library.</p>"},{"location":"react/react_docs/react_learn/#uiux-and-responsive-design","title":"UI/UX and Responsive Design","text":""},{"location":"react/react_docs/react_learn/#what-is-responsive-font-size","title":"What is responsive font size?","text":"<p>Responsive font size adjusts based on screen size using CSS units like <code>em</code>, <code>rem</code>, or media queries.</p>"},{"location":"react/react_docs/react_learn/#what-is-the-solid-principle-applies-to-component-design-architecture","title":"What is the SOLID principle? (applies to component design &amp; architecture)","text":"<p>The SOLID principles are design principles for maintainable and scalable code: - S: Single Responsibility Principle - O: Open/Closed Principle - L: Liskov Substitution Principle - I: Interface Segregation Principle - D: Dependency Inversion Principle</p>"},{"location":"react/react_docs/react_learn/#what-is-a-higher-order-component-hoc-in-react","title":"What is a Higher-Order Component (HOC) in React?","text":"<p>A Higher-Order Component (HOC) is a function that takes a component as an argument and returns a new component. HOCs are used to reuse component logic across multiple components.</p>"},{"location":"react/react_docs/react_learn/#example-of-a-higher-order-component","title":"Example of a Higher-Order Component:","text":"<pre><code>function withLogger(WrappedComponent) {\n  return function EnhancedComponent(props) {\n    console.log('Props:', props);\n    return &lt;WrappedComponent {...props} /&gt;;\n  };\n}\n\n// Usage\nfunction MyComponent({ name }) {\n  return &lt;div&gt;Hello, {name}!&lt;/div&gt;;\n}\n\nconst MyComponentWithLogger = withLogger(MyComponent);\n</code></pre>"},{"location":"react/react_docs/react_learn/#key-points","title":"Key Points:","text":"<ul> <li>HOCs do not modify the original component; they create a new one.</li> <li>Common use cases include authentication, logging, and theming.</li> <li>Avoid overusing HOCs as they can make the component tree harder to debug.</li> <li>Use hooks as an alternative for sharing logic in modern React.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-are-the-limitations-of-higher-order-components-hocs","title":"What are the limitations of Higher-Order Components (HOCs)?","text":"<p>While HOCs are powerful, they come with certain limitations:</p> <ol> <li>Increased Complexity: Overusing HOCs can make the component tree harder to debug and understand.</li> <li>Props Clashing: If the HOC and the wrapped component use the same prop names, it can lead to unexpected behavior.</li> <li>Performance Overhead: Wrapping components in multiple HOCs can introduce performance overhead due to additional renders.</li> <li>Static Method Loss: Static methods on the wrapped component are not copied to the HOC by default. You need to explicitly copy them if required.</li> <li>Deprecated Patterns: With the introduction of hooks, many use cases for HOCs can now be handled more cleanly and concisely.</li> </ol>"},{"location":"react/react_docs/react_learn/#best-practices","title":"Best Practices:","text":"<ul> <li>Use HOCs sparingly and only when necessary.</li> <li>Prefer hooks for sharing logic in modern React applications.</li> <li>Ensure proper naming conventions to avoid prop conflicts.</li> <li>Use libraries like <code>hoist-non-react-statics</code> to copy static methods if needed.</li> <li>Keep HOCs simple and focused on a single responsibility.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-the-context-api-how-is-it-used-to-manage-state-globally_1","title":"What is the Context API? How is it used to manage state globally?","text":"<p>The Context API allows sharing state across components without passing props down manually at every level. It is useful for managing global state.</p>"},{"location":"react/react_docs/react_learn/#example","title":"Example:","text":"<pre><code>const ThemeContext = React.createContext();\n\nfunction App() {\n  return (\n    &lt;ThemeContext.Provider value=\"dark\"&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nfunction Toolbar() {\n  return &lt;ThemedButton /&gt;;\n}\n\nfunction ThemedButton() {\n  const theme = React.useContext(ThemeContext);\n  return &lt;button&gt;{theme}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-reactfragment-and-when-would-you-use-it_1","title":"What is React.Fragment, and when would you use it?","text":"<p><code>React.Fragment</code> lets you group multiple elements without adding extra nodes to the DOM.</p>"},{"location":"react/react_docs/react_learn/#example_1","title":"Example:","text":"<pre><code>function App() {\n  return (\n    &lt;React.Fragment&gt;\n      &lt;h1&gt;Hello&lt;/h1&gt;\n      &lt;p&gt;Welcome to React&lt;/p&gt;\n    &lt;/React.Fragment&gt;\n  );\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#use-case","title":"Use Case:","text":"<ul> <li>Avoid unnecessary DOM nodes.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-are-react-portals-when-would-you-use-them_1","title":"What are React Portals? When would you use them?","text":"<p>React Portals allow rendering children into a DOM node outside the parent component hierarchy.</p>"},{"location":"react/react_docs/react_learn/#example_2","title":"Example:","text":"<pre><code>ReactDOM.createPortal(\n  &lt;div&gt;Modal Content&lt;/div&gt;,\n  document.getElementById('modal-root')\n);\n</code></pre>"},{"location":"react/react_docs/react_learn/#use-case_1","title":"Use Case:","text":"<ul> <li>Modals</li> <li>Tooltips</li> <li>Overlays</li> </ul>"},{"location":"react/react_docs/react_learn/#what-are-proptypes-how-do-you-validate-props_1","title":"What are PropTypes? How do you validate props?","text":"<p>PropTypes validate the types of props passed to a component, ensuring type safety.</p>"},{"location":"react/react_docs/react_learn/#example_3","title":"Example:","text":"<pre><code>import PropTypes from 'prop-types';\n\nfunction MyComponent({ name }) {\n  return &lt;div&gt;{name}&lt;/div&gt;;\n}\n\nMyComponent.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-lazy-loading-in-react-explain-reactlazy-and-suspense_1","title":"What is lazy loading in React? Explain React.lazy and Suspense.","text":"<p>Lazy loading delays loading components until they are needed, improving performance.</p>"},{"location":"react/react_docs/react_learn/#example_4","title":"Example:","text":"<pre><code>const LazyComponent = React.lazy(() =&gt; import('./LazyComponent'));\n\nfunction App() {\n  return (\n    &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;LazyComponent /&gt;\n    &lt;/React.Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#what-is-reconciliation-in-react_1","title":"What is reconciliation in React?","text":"<p>Reconciliation is React's process of updating the DOM by comparing the Virtual DOM with the previous version.</p>"},{"location":"react/react_docs/react_learn/#how-does-the-virtual-dom-compare-elements-during-updates_1","title":"How does the Virtual DOM compare elements during updates?","text":"<p>React uses a diffing algorithm to compare the Virtual DOM with the previous version and updates only the changed parts.</p>"},{"location":"react/react_docs/react_learn/#what-is-server-side-rendering-ssr-in-react_1","title":"What is server-side rendering (SSR) in React?","text":"<p>SSR renders React components on the server and sends the HTML to the client.</p>"},{"location":"react/react_docs/react_learn/#how-does-ssr-differ-from-client-side-rendering_1","title":"How does SSR differ from client-side rendering?","text":"<ul> <li>SSR: Renders on the server, improving initial load time.</li> <li>Client-side rendering: Renders in the browser, requiring JavaScript to load first.</li> </ul>"},{"location":"react/react_docs/react_learn/#what-is-hydration-in-react_1","title":"What is hydration in React?","text":"<p>Hydration attaches event listeners to server-rendered HTML, enabling interactivity.</p>"},{"location":"react/react_docs/react_learn/#how-does-the-react-fiber-architecture-improve-performance_1","title":"How does the React Fiber architecture improve performance?","text":"<p>React Fiber improves rendering performance by breaking rendering work into smaller chunks, allowing React to prioritize updates.</p>"},{"location":"react/react_docs/react_learn/#how-would-you-handle-global-state-management-without-redux_1","title":"How would you handle global state management without Redux?","text":"<p>Use the Context API or libraries like Zustand, Jotai, or Recoil for simpler global state management.</p>"},{"location":"react/react_docs/react_learn/#explain-error-boundaries-in-react-how-do-you-implement-them_1","title":"Explain error boundaries in React. How do you implement them?","text":"<p>Error boundaries catch JavaScript errors in components and display fallback UI.</p>"},{"location":"react/react_docs/react_learn/#example_5","title":"Example:","text":"<pre><code>class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"react/react_docs/react_learn/#how-to-optimize-a-react-component-to-prevent-unnecessary-re-renders_1","title":"How to optimize a React component to prevent unnecessary re-renders?","text":"<p>To optimize a React component and prevent unnecessary re-renders, you can use the following techniques:</p> <ol> <li>React.memo:</li> <li> <p>Wrap functional components with <code>React.memo</code> to prevent re-renders if props do not change.   <code>javascript   const MyComponent = React.memo(function MyComponent({ value }) {     return &lt;div&gt;{value}&lt;/div&gt;;   });</code></p> </li> <li> <p>useCallback:</p> </li> <li> <p>Use <code>useCallback</code> to memoize callback functions and avoid creating new instances on every render.   <code>javascript   const handleClick = useCallback(() =&gt; {     console.log('Clicked');   }, []);</code></p> </li> <li> <p>useMemo:</p> </li> <li> <p>Use <code>useMemo</code> to memoize expensive computations and avoid recalculating them unnecessarily.   <code>javascript   const computedValue = useMemo(() =&gt; expensiveCalculation(input), [input]);</code></p> </li> <li> <p>Avoid Inline Functions:</p> </li> <li> <p>Define functions outside the render method to prevent creating new instances on every render.</p> </li> <li> <p>Key Prop:</p> </li> <li> <p>Use stable and unique keys for list items to help React identify changes efficiently.</p> </li> <li> <p>Split Components:</p> </li> <li> <p>Break down large components into smaller ones to isolate re-renders.</p> </li> <li> <p>Avoid Unnecessary State Updates:</p> </li> <li> <p>Ensure state updates only when necessary by comparing new and old values.</p> </li> <li> <p>Use Immutable Data Structures:</p> </li> <li> <p>Use libraries like <code>immer</code> to manage immutable state updates.</p> </li> <li> <p>React Developer Tools:</p> </li> <li>Use the React Profiler to identify components with frequent re-renders.</li> </ol> <p>By applying these techniques, you can significantly improve the performance of your React application.</p>"},{"location":"react/react_docs/react_learn/#how-to-debug-a-react-application-with-performance-issues","title":"How to debug a React application with performance issues?","text":"<p>Debugging performance issues in a React application involves identifying bottlenecks and optimizing rendering. Here are the steps:</p> <ol> <li>Use React Developer Tools:</li> <li>Inspect component hierarchies and props.</li> <li> <p>Use the \"Profiler\" tab to analyze rendering performance.</p> </li> <li> <p>Analyze Rendering Behavior:</p> </li> <li> <p>Check for unnecessary re-renders using the \"Highlight Updates\" option in React Developer Tools.</p> </li> <li> <p>Optimize Component Rendering:</p> </li> <li>Use <code>React.memo</code> to prevent re-renders for functional components.</li> <li> <p>Use <code>useCallback</code> and <code>useMemo</code> to memoize functions and values.</p> </li> <li> <p>Check for Expensive Operations:</p> </li> <li>Identify and optimize expensive computations or API calls.</li> <li> <p>Use <code>useEffect</code> dependencies carefully to avoid redundant executions.</p> </li> <li> <p>Inspect State Management:</p> </li> <li>Ensure state updates are minimal and localized.</li> <li> <p>Avoid deeply nested state objects to reduce complexity.</p> </li> <li> <p>Profile with Browser DevTools:</p> </li> <li> <p>Use the \"Performance\" tab in browser DevTools to record and analyze rendering timelines.</p> </li> <li> <p>Lazy Load Components:</p> </li> <li> <p>Use <code>React.lazy</code> and <code>Suspense</code> to load components only when needed.</p> </li> <li> <p>Avoid Inline Functions and Objects:</p> </li> <li> <p>Define functions and objects outside the render method to prevent re-creation on every render.</p> </li> <li> <p>Use Immutable Data Structures:</p> </li> <li> <p>Ensure state updates are immutable to avoid unintended side effects.</p> </li> <li> <p>Monitor Network Requests:</p> </li> <li>Use tools like Chrome DevTools or Postman to analyze API response times.</li> </ol> <p>By systematically following these steps, you can identify and resolve performance issues in your React application.</p>"},{"location":"react/react_docs/technical_topics/","title":"React JS Technical Topics","text":""},{"location":"react/react_docs/technical_topics/#1-what-is-react","title":"1. What is React?","text":"<p>React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of applications efficiently.</p>"},{"location":"react/react_docs/technical_topics/#2-what-are-components-in-react","title":"2. What are Components in React?","text":"<p>Components are the building blocks of a React application. They can be functional or class-based and are used to encapsulate logic and UI.</p>"},{"location":"react/react_docs/technical_topics/#3-what-is-jsx","title":"3. What is JSX?","text":"<p>JSX stands for JavaScript XML. It is a syntax extension for JavaScript that allows you to write HTML-like code inside JavaScript files.</p>"},{"location":"react/react_docs/technical_topics/#4-what-is-state-in-react","title":"4. What is State in React?","text":"<p>State is an object that holds data or information about the component. It is managed within the component and can change over time.</p>"},{"location":"react/react_docs/technical_topics/#5-what-are-props-in-react","title":"5. What are Props in React?","text":"<p>Props (short for properties) are used to pass data from one component to another. They are immutable and read-only.</p>"},{"location":"react/react_docs/technical_topics/#6-what-is-the-virtual-dom","title":"6. What is the Virtual DOM?","text":"<p>Virtual DOM is a lightweight representation of the real DOM. React uses it to optimize updates by comparing changes and updating only the necessary parts of the real DOM.</p>"},{"location":"react/react_docs/technical_topics/#7-what-are-react-hooks","title":"7. What are React Hooks?","text":"<p>Hooks are functions that let you use state and other React features in functional components. Examples include <code>useState</code>, <code>useEffect</code>, and <code>useContext</code>.</p>"},{"location":"react/react_docs/technical_topics/#8-what-is-redux","title":"8. What is Redux?","text":"<p>Redux is a state management library often used with React. It provides a centralized store for managing application state.</p>"},{"location":"react/react_docs/technical_topics/#9-what-is-react-router","title":"9. What is React Router?","text":"<p>React Router is a library for routing in React applications. It allows navigation between different components or pages without reloading the page.</p>"},{"location":"react/react_docs/technical_topics/#10-what-is-context-api","title":"10. What is Context API?","text":"<p>Context API is a React feature that allows you to share state across components without passing props manually at every level.</p>"},{"location":"react/react_docs/technical_topics/#11-what-is-the-difference-between-class-and-functional-components","title":"11. What is the difference between Class and Functional Components?","text":"<ul> <li>Class Components: Use ES6 classes, have lifecycle methods, and manage state with <code>this.state</code>.</li> <li>Functional Components: Use functions, are stateless by default, and can use hooks for state and lifecycle management.</li> </ul>"},{"location":"react/react_docs/technical_topics/#12-what-is-react-fiber","title":"12. What is React Fiber?","text":"<p>React Fiber is the new reconciliation engine in React. It improves rendering performance and allows React to split rendering work into chunks.</p>"},{"location":"react/react_docs/technical_topics/#13-what-is-the-use-of-useeffect-hook","title":"13. What is the use of <code>useEffect</code> Hook?","text":"<p><code>useEffect</code> is a hook used to perform side effects in functional components, such as fetching data or subscribing to events.</p>"},{"location":"react/react_docs/technical_topics/#14-what-are-higher-order-components-hoc","title":"14. What are Higher-Order Components (HOC)?","text":"<p>HOCs are functions that take a component and return a new component. They are used for reusing component logic.</p>"},{"location":"react/react_docs/technical_topics/#15-what-is-react-strict-mode","title":"15. What is React Strict Mode?","text":"<p>Strict Mode is a tool for highlighting potential problems in an application. It activates additional checks and warnings for its descendants.</p>"},{"location":"react/react_docs/technical_topics/#16-what-is-lazy-loading-in-react","title":"16. What is Lazy Loading in React?","text":"<p>Lazy Loading is a technique for loading components or resources only when they are needed, improving performance.</p>"},{"location":"react/react_docs/technical_topics/#17-what-is-the-difference-between-controlled-and-uncontrolled-components","title":"17. What is the difference between Controlled and Uncontrolled Components?","text":"<ul> <li>Controlled Components: Components where form data is handled by React state.</li> <li>Uncontrolled Components: Components where form data is handled by the DOM.</li> </ul>"},{"location":"react/react_docs/technical_topics/#18-what-is-reacts-key-prop","title":"18. What is React's <code>key</code> Prop?","text":"<p><code>key</code> is a special attribute used to identify elements in a list. It helps React optimize rendering by tracking changes.</p>"},{"location":"react/react_docs/technical_topics/#19-what-is-server-side-rendering-ssr","title":"19. What is Server-Side Rendering (SSR)?","text":"<p>SSR is the process of rendering React components on the server and sending HTML to the client, improving performance and SEO.</p>"},{"location":"react/react_docs/technical_topics/#20-what-is-the-difference-between-usestate-and-usereducer","title":"20. What is the difference between <code>useState</code> and <code>useReducer</code>?","text":"<ul> <li><code>useState</code>: Used for managing simple state.</li> <li><code>useReducer</code>: Used for managing complex state logic.</li> </ul>"},{"location":"react/react_docs/technical_topics/#21-what-is-reactmemo","title":"21. What is React.memo?","text":"<p>React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the component's output.</p>"},{"location":"react/react_docs/technical_topics/#22-what-is-the-purpose-of-reactfragment","title":"22. What is the purpose of <code>React.Fragment</code>?","text":"<p><code>React.Fragment</code> is used to group multiple elements without adding extra nodes to the DOM.</p>"},{"location":"react/react_docs/technical_topics/#23-what-is-the-difference-between-useeffect-and-uselayouteffect","title":"23. What is the difference between <code>useEffect</code> and <code>useLayoutEffect</code>?","text":"<ul> <li><code>useEffect</code>: Runs after the render is committed to the screen.</li> <li><code>useLayoutEffect</code>: Runs synchronously after all DOM mutations.</li> </ul>"},{"location":"react/react_docs/technical_topics/#24-what-is-prop-drilling","title":"24. What is Prop Drilling?","text":"<p>Prop Drilling is the process of passing props through multiple levels of components to reach a deeply nested component.</p>"},{"location":"react/react_docs/technical_topics/#25-what-is-reacts-concurrent-mode","title":"25. What is React's Concurrent Mode?","text":"<p>Concurrent Mode is an experimental feature that allows React to render updates in the background without blocking the main thread.</p> <p>This document provides a comprehensive overview of React JS topics with answers. Use the color-coded text for better readability and understanding.</p>"}]}