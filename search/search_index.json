{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#importance-of-preparation","title":"Importance of Preparation","text":"<p>Preparation is a critical step in achieving success in any endeavor. It helps build confidence, reduces anxiety, and ensures that you are ready to tackle challenges effectively. Whether it's for an interview, an exam, or a presentation, preparation allows you to organize your thoughts, identify potential gaps, and refine your approach.</p>"},{"location":"#benefits-of-preparation","title":"Benefits of Preparation","text":"<ul> <li>Increased Confidence: Being well-prepared gives you the assurance to perform at your best.</li> <li>Better Time Management: Planning ahead helps you allocate time efficiently.</li> <li>Improved Outcomes: Preparation often leads to better results as you are more equipped to handle unexpected situations.</li> </ul> <p>How to Prepare</p> <ol> <li>Set Clear Goals: Define what you want to achieve and break it down into smaller, manageable tasks.</li> <li>Gather Resources: Collect all necessary materials, such as books, notes, or online resources.</li> <li>Create a Plan: Develop a schedule that outlines what to study or practice and when.</li> <li>Practice Regularly: Consistent practice helps reinforce knowledge and skills.</li> <li>Seek Feedback: Share your progress with mentors or peers to identify areas for improvement.</li> <li>Stay Positive: Maintain a positive mindset and focus on your progress rather than perfection.</li> </ol> <p>By following these steps, you can approach your preparation systematically and maximize your chances of success.</p>"},{"location":"#introduction-to-interview-preparation","title":"Introduction to Interview Preparation","text":"<p>Welcome to the Interview Preparation Guide! This repository is designed to help you systematically prepare for job interviews, covering both technical and non-technical aspects.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Key technical concepts and problem-solving techniques.</li> <li>Strategies for answering behavioral questions effectively.</li> <li>Best practices for system design interviews.</li> <li>Tips for acing coding challenges.</li> <li>How to simulate real interview scenarios with mock interviews.</li> </ul> <p>How to Use This Guide</p> <ol> <li>Start to navigate through the topics.</li> <li>Follow the sections in order or focus on areas where you need improvement.</li> <li>Practice consistently and track your progress.</li> </ol> <p>Good luck with your preparation!</p>"},{"location":"design_pattern/","title":"Design Patterns","text":"<p>Design patterns are proven solutions to common problems in software design. They provide a template for how to structure and solve issues in a way that promotes code reusability, scalability, and maintainability.</p>"},{"location":"design_pattern/#types-of-design-patterns","title":"Types of Design Patterns","text":"<p>Design patterns are generally categorized into three main types:</p>"},{"location":"design_pattern/#1-creational-patterns","title":"1. Creational Patterns","text":"<p>Creational patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. Examples include:</p> <ul> <li>Singleton: Ensures a class has only one instance and provides a global point of access to it.</li> <li>Factory Method: Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.</li> <li>Builder: Separates the construction of a complex object from its representation.</li> </ul>"},{"location":"design_pattern/#2-structural-patterns","title":"2. Structural Patterns","text":"<p>Structural patterns focus on the composition of classes and objects to form larger structures. Examples include:</p> <ul> <li>Adapter: Allows incompatible interfaces to work together.</li> <li>Composite: Composes objects into tree structures to represent part-whole hierarchies.</li> <li>Decorator: Adds new functionality to an object dynamically.</li> </ul>"},{"location":"design_pattern/#3-behavioral-patterns","title":"3. Behavioral Patterns","text":"<p>Behavioral patterns are concerned with communication between objects. Examples include:</p> <ul> <li>Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.</li> <li>Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.</li> <li>Command: Encapsulates a request as an object, thereby allowing users to parameterize clients with different requests.</li> </ul>"},{"location":"design_pattern/#benefits-of-using-design-patterns","title":"Benefits of Using Design Patterns","text":"<ul> <li>Reusability: Promotes the reuse of proven solutions.</li> <li>Maintainability: Makes code easier to understand and modify.</li> <li>Scalability: Helps in designing systems that can grow without major changes.</li> </ul>"},{"location":"design_pattern/#conclusion","title":"Conclusion","text":"<p>Design patterns are an essential tool for software developers. By understanding and applying them, you can create robust, flexible, and maintainable software systems.</p> <p>Patterns used in Project</p>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/","title":"Api gateway pattern","text":"<p>The API Gateway design pattern is a structural pattern used primarily in microservices architectures to provide a single entry point for all client requests.</p>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#what-is-it","title":"\ud83e\uddf1 What Is It?","text":"<p>An API Gateway is a server that acts as an intermediary between clients and backend services. It handles requests, routes them to the appropriate service, aggregates the results, and returns them to the client.</p>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#responsibilities-of-an-api-gateway","title":"\u2705 Responsibilities of an API Gateway:","text":"<ol> <li>Routing \u2013 Directs requests to the appropriate microservice.</li> <li>Aggregation \u2013 Combines results from multiple services into one response.</li> <li>Authentication &amp; Authorization \u2013 Validates tokens and permissions.</li> <li>Rate Limiting &amp; Throttling \u2013 Prevents abuse by limiting request frequency.</li> <li>Caching \u2013 Reduces load on backend services by caching responses.</li> <li>Logging &amp; Monitoring \u2013 Tracks requests and performance.</li> <li>Transformation \u2013 Converts protocols (e.g., HTTP to WebSocket) or request/response formats.</li> </ol>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#architecture-diagram","title":"\ud83d\udce6 Architecture Diagram:","text":"<pre><code>        +---------+\n        |  Client |\n        +----+----+\n             |\n             v\n      +-------------+\n      | API Gateway |\n      +------+------+\n             |\n  +----------+----------+\n  |          |          |\n  v          v          v\nService A  Service B  Service C\n</code></pre>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#example-with-nodejs-express","title":"\ud83e\uddd1\u200d\ud83d\udcbb Example (with Node.js + Express):","text":"<pre><code>const express = require(\"express\");\nconst app = express();\nconst axios = require(\"axios\");\n\napp.get(\"/user/:id\", async (req, res) =&gt; {\n  // Example of request routing and aggregation\n  try {\n    const user = await axios.get(`http://user-service/users/${req.params.id}`);\n    const orders = await axios.get(`http://order-service/orders?userId=${req.params.id}`);\n\n    res.json({\n      user: user.data,\n      orders: orders.data\n    });\n  } catch (err) {\n    res.status(500).json({ message: \"Error fetching data\" });\n  }\n});\n\napp.listen(3000, () =&gt; console.log(\"API Gateway listening on port 3000\"));\n</code></pre>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#benefits","title":"\ud83d\ude80 Benefits:","text":"<ul> <li>Centralized entry point for client interactions</li> <li>Simplifies client logic (clients don\u2019t need to call multiple services)</li> <li>Enforces security and policy in one place</li> <li>Enables backend evolution (you can split/merge services without affecting clients)</li> </ul>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#drawbacks","title":"\u26a0\ufe0f Drawbacks:","text":"<ul> <li>Single point of failure (unless replicated)</li> <li>Adds a slight latency overhead</li> <li>Can become a bottleneck if not properly scaled</li> </ul>"},{"location":"design_pattern/real_time_patterns/api_gateway_pattern/#popular-tools-for-real-world-api-gateways","title":"\ud83d\udee0 Popular Tools for Real-World API Gateways:","text":"<ul> <li>AWS API Gateway</li> <li>Kong</li> <li>NGINX</li> <li>Zuul (Netflix)</li> <li>Express Gateway (Node.js)</li> <li>Apigee (Google)</li> </ul>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/","title":"Dependency Injection (DI) (Autowired)","text":"<p>Dependency Injection (DI) is a design pattern used in software development to achieve Inversion of Control (IoC) between classes and their dependencies. It allows a class to receive its dependencies from an external source rather than creating them internally, promoting loose coupling and easier testing.</p>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#key-concepts","title":"Key Concepts","text":"<ol> <li>Dependency: An object that a class requires to function.</li> <li>Injection: The process of providing the dependency to a class.</li> </ol>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#types-of-dependency-injection","title":"Types of Dependency Injection","text":"<ol> <li> <p>Constructor Injection: Dependencies are provided through a class constructor.     ```python     class Repository:         def get_data(self):             return \"Data from Repository\"</p> <p>class Service:     def init(self, repository: Repository):         self.repository = repository</p> <pre><code>def serve(self):\n    return self.repository.get_data()\n</code></pre> </li> <li> <p>Setter Injection: Dependencies are provided through setter methods.     ```python     class Repository:         def get_data(self):             return \"Data from Repository\"</p> <p>class Service:     def init(self):         self.repository = None</p> <pre><code>def set_repository(self, repository: Repository):\n    self.repository = repository\n\ndef serve(self):\n    return self.repository.get_data()\n</code></pre> </li> <li> <p>Interface Injection: Dependencies are provided through an interface method.     ```python     from abc import ABC, abstractmethod</p> <p>class DependencyInjector(ABC):     @abstractmethod     def inject(self, service):         pass</p> <p>class Repository:     def get_data(self):         return \"Data from Repository\"</p> <p>class Service:     def init(self):         self.repository = None</p> <pre><code>def serve(self):\n    return self.repository.get_data()\n</code></pre> <p>class MyInjector(DependencyInjector):     def inject(self, service: Service):         service.repository = Repository()</p> </li> </ol>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#usage","title":"Usage","text":"<p>repo = Repository() service = Service(repo) print(service.serve()) ```</p>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#usage_1","title":"Usage","text":"<p>repo = Repository() service = Service() service.set_repository(repo) print(service.serve()) ```</p>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#usage_2","title":"Usage","text":"<p>service = Service() injector = MyInjector() injector.inject(service) print(service.serve()) ```</p>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#benefits-of-dependency-injection","title":"Benefits of Dependency Injection","text":"<ul> <li>Loose Coupling: Classes are not tightly bound to their dependencies.</li> <li>Improved Testability: Dependencies can be mocked or stubbed for unit testing.</li> <li>Flexibility: Easier to swap implementations of dependencies.</li> <li>Maintainability: Clear separation of concerns.</li> </ul>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#example-in-python-frameworks","title":"Example in Python Frameworks","text":"<p>Frameworks like Flask and FastAPI support DI through extensions or built-in mechanisms. Example in FastAPI:</p> <pre><code>from fastapi import Depends, FastAPI\n\napp = FastAPI()\n\nclass Repository:\n    def get_data(self):\n        return \"Data from Repository\"\n\ndef get_repository():\n    return Repository()\n\n@app.get(\"/\")\ndef read_root(repository: Repository = Depends(get_repository)):\n    return {\"data\": repository.get_data()}\n</code></pre>"},{"location":"design_pattern/real_time_patterns/dependancy_injection/#conclusion","title":"Conclusion","text":"<p>Dependency Injection is a powerful design pattern that simplifies code maintenance, testing, and scalability by decoupling components and managing dependencies effectively.</p>"},{"location":"design_pattern/real_time_patterns/factory_pattern/","title":"Factory Pattern","text":"<p>The Factory Pattern is a creational design pattern that provides an interface for creating objects in a superclass but allows subclasses to alter the type of objects that will be created. It helps promote loose coupling by delegating the instantiation logic to child classes.</p>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#key-features","title":"Key Features","text":"<ul> <li>Encapsulates object creation logic.</li> <li>Promotes code reusability and scalability.</li> <li>Reduces tight coupling between client code and specific classes.</li> </ul>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#structure","title":"Structure","text":"<ol> <li>Product: Defines the interface of objects the factory method creates.</li> <li>ConcreteProduct: Implements the Product interface.</li> <li>Creator: Declares the factory method that returns objects of type Product.</li> <li>ConcreteCreator: Overrides the factory method to return instances of ConcreteProduct.</li> </ol>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#example-in-python","title":"Example in Python","text":"<pre><code># filepath: /Users/lenin.pitchai/Documents/LENIN/Personal/interview_preparation/docs/design_pattern/real_time_patterns/factory_pattern.md\nfrom abc import ABC, abstractmethod\n\n# Product Interface\nclass Shape(ABC):\n    @abstractmethod\n    def draw(self):\n        pass\n\n# Concrete Products\nclass Circle(Shape):\n    def draw(self):\n        return \"Drawing a Circle\"\n\nclass Square(Shape):\n    def draw(self):\n        return \"Drawing a Square\"\n\n# Creator\nclass ShapeFactory:\n    @staticmethod\n    def get_shape(shape_type):\n        if shape_type == \"Circle\":\n            return Circle()\n        elif shape_type == \"Square\":\n            return Square()\n        else:\n            raise ValueError(\"Unknown shape type\")\n\n# Client Code\nshape = ShapeFactory.get_shape(\"Circle\")\nprint(shape.draw())  # Output: Drawing a Circle\n</code></pre>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#advantages","title":"Advantages","text":"<ul> <li>Simplifies object creation.</li> <li>Promotes adherence to the Open/Closed Principle.</li> <li>Makes the code easier to test and maintain.</li> </ul>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#disadvantages","title":"Disadvantages","text":"<ul> <li>Can introduce complexity with many subclasses.</li> <li>May require additional effort to understand and implement.</li> </ul>"},{"location":"design_pattern/real_time_patterns/factory_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>When the exact type of object to be created is determined at runtime.</li> <li>When you want to centralize object creation logic to ensure consistency.</li> </ul>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/","title":"Resolver pattern","text":"<p>The Resolver Pattern is commonly used in GraphQL APIs, but its core concept\u2014mapping a request to data retrieval logic\u2014can apply more broadly to systems involving query resolution or deferred execution.</p>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#what-is-the-resolver-pattern","title":"\ud83e\udde9 What is the Resolver Pattern?","text":"<p>In simple terms, a resolver is a function that resolves a value for a field or query. In the Resolver Pattern, each field or operation is mapped to a function that knows how to fetch or compute the data for it.</p> <p>This pattern promotes separation of concerns:</p> <ul> <li>Schemas define the structure</li> <li>Resolvers define the logic</li> </ul>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#where-is-it-used","title":"\ud83d\udd27 Where Is It Used?","text":"<ul> <li>GraphQL servers (most common use case)</li> <li>DI containers (Dependency Resolution)</li> <li>DNS resolvers (name \u2192 IP address)</li> <li>Service Locators (service name \u2192 implementation)</li> </ul> <p>Here, we\u2019ll focus on the GraphQL-style Resolver Pattern, which is most widely used.</p>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#graphql-resolver-pattern","title":"\ud83e\uddec GraphQL Resolver Pattern","text":""},{"location":"design_pattern/real_time_patterns/resolver_pattern/#1-graphql-schema","title":"1. GraphQL Schema","text":"<pre><code>type Query {\n    user(id: ID!): User\n}\n\ntype User {\n    id: ID!\n    name: String!\n    email: String!\n}\n</code></pre>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#2-resolvers-in-code-javascripttypescript","title":"2. Resolvers in Code (JavaScript/TypeScript)","text":"<pre><code>const resolvers = {\n    Query: {\n        user: async (_, { id }) =&gt; {\n            return await getUserById(id);  // You provide this function\n        },\n    },\n    User: {\n        email: (user) =&gt; {\n            // This can do transformations or access controls\n            return user.email;\n        },\n    }\n};\n</code></pre> <p>Each key (like <code>Query.user</code>) maps to a resolver function that receives:</p> <ul> <li><code>parent</code>: The parent object (used in nested fields)</li> <li><code>args</code>: Arguments passed in the query</li> <li><code>context</code>: Shared state or services (e.g., DB access, auth info)</li> <li><code>info</code>: Metadata about the query</li> </ul>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#advantages","title":"\u2705 Advantages","text":"<ul> <li>Decouples schema from business logic</li> <li>Allows fine-grained control over how data is fetched</li> <li>Makes complex nested queries possible</li> <li>Supports authorization, validation, and lazy loading</li> </ul>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#pitfalls","title":"\u274c Pitfalls","text":"<ul> <li>Can become messy with deeply nested resolvers (e.g., N+1 query problem)</li> <li>Without proper optimization, can affect performance</li> <li>Requires good error handling for maintainability</li> </ul>"},{"location":"design_pattern/real_time_patterns/resolver_pattern/#resolver-pattern-beyond-graphql","title":"\ud83d\udee0\ufe0f Resolver Pattern Beyond GraphQL","text":"<ul> <li>DNS Resolver: Resolves domain names to IP addresses.</li> <li> <p>Dependency Injection (DI) Resolver: Resolves dependencies dynamically from a container.</p> <p><code>python service = container.resolve('UserService')</code></p> </li> </ul>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/","title":"Rule Engine Pattern","text":"<p>The Rule Engine Pattern is a design pattern used to define, manage, and execute business rules or logic independently of the application code. It provides a flexible and scalable way to handle complex decision-making processes by separating the rules from the core application logic.</p>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/#key-concepts","title":"Key Concepts","text":"<ol> <li>Rules: Individual pieces of logic or conditions that define specific behaviors or decisions.</li> <li>Rule Engine: A component responsible for evaluating and executing the rules.</li> <li>Facts: Data or inputs provided to the rule engine for evaluation.</li> <li>Actions: Operations performed when a rule is satisfied.</li> </ol>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/#benefits","title":"Benefits","text":"<ul> <li>Separation of Concerns: Keeps business rules separate from application logic, making the codebase cleaner and easier to maintain.</li> <li>Flexibility: Rules can be added, modified, or removed without changing the core application code.</li> <li>Reusability: Rules can be reused across different parts of the application or even in other projects.</li> <li>Scalability: Handles complex decision-making processes efficiently.</li> </ul>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/#implementation-steps","title":"Implementation Steps","text":"<ol> <li>Define Rules: Create rules as independent entities, often using a declarative format.</li> <li>Load Rules: Load the rules into the rule engine, either from a database, file, or in-memory configuration.</li> <li>Provide Facts: Supply the necessary data (facts) to the rule engine.</li> <li>Evaluate Rules: The rule engine evaluates the rules against the provided facts.</li> <li>Execute Actions: Perform the actions associated with the satisfied rules.</li> </ol>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/#example","title":"Example","text":"<pre><code>class Rule:\n    def __init__(self, condition, action):\n        self.condition = condition\n        self.action = action\n\n    def evaluate(self, facts):\n        if self.condition(facts):\n            self.action(facts)\n\nclass RuleEngine:\n    def __init__(self):\n        self.rules = []\n\n    def add_rule(self, rule):\n        self.rules.append(rule)\n\n    def execute(self, facts):\n        for rule in self.rules:\n            rule.evaluate(facts)\n\n# Example usage\ndef is_adult(facts):\n    return facts.get(\"age\", 0) &gt;= 18\n\ndef grant_access(facts):\n    print(\"Access granted!\")\n\nrule = Rule(is_adult, grant_access)\nengine = RuleEngine()\nengine.add_rule(rule)\n\nfacts = {\"age\": 20}\nengine.execute(facts)\n</code></pre>"},{"location":"design_pattern/real_time_patterns/rule_engine_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>Fraud detection systems</li> <li>Recommendation engines</li> <li>Workflow automation</li> <li>Access control systems</li> <li>Dynamic pricing models</li> </ul> <p>The Rule Engine Pattern is a powerful tool for building systems that require dynamic and adaptable business logic.</p>"},{"location":"design_pattern/real_time_patterns/template_method_pattern/","title":"Template Method Pattern","text":"<p>The Template Method Pattern is a behavioral design pattern that defines the skeleton of an algorithm in a base class but allows subclasses to override specific steps of the algorithm without changing its structure. This pattern promotes code reuse and enforces a consistent structure for algorithms.</p>"},{"location":"design_pattern/real_time_patterns/template_method_pattern/#bpmn-representation","title":"BPMN Representation","text":"<p>Below is a simplified BPMN (Business Process Model and Notation) diagram to represent the Template Method Pattern:</p> <pre><code>+-------------------+\n| Abstract Template |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 1 (Fixed) |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 2 (Hook)  |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 3 (Fixed) |\n+-------------------+\n    |\n    v\n+-------------------+\n|    Step 4 (Hook)  |\n+-------------------+\n</code></pre> <p>In this diagram: - Fixed steps are implemented in the base class. - Hook steps are customizable by subclasses.</p>"},{"location":"design_pattern/real_time_patterns/template_method_pattern/#python-example","title":"Python Example","text":"<p>Here is an example of the Template Method Pattern in Python:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass DataProcessor(ABC):\n    \"\"\"Abstract Template Class\"\"\"\n\n    def process_data(self):\n    \"\"\"Template method defining the skeleton of the algorithm.\"\"\"\n    self.load_data()\n    self.clean_data()\n    self.analyze_data()\n    self.save_results()\n\n    def load_data(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Loading data...\")\n\n    def clean_data(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Cleaning data...\")\n\n    @abstractmethod\n    def analyze_data(self):\n    \"\"\"Hook step to be implemented by subclasses.\"\"\"\n    pass\n\n    def save_results(self):\n    \"\"\"Fixed step.\"\"\"\n    print(\"Saving results...\")\n\nclass SalesDataProcessor(DataProcessor):\n    \"\"\"Concrete implementation for sales data.\"\"\"\n\n    def analyze_data(self):\n    print(\"Analyzing sales data...\")\n\nclass MarketingDataProcessor(DataProcessor):\n    \"\"\"Concrete implementation for marketing data.\"\"\"\n\n    def analyze_data(self):\n    print(\"Analyzing marketing data...\")\n\n# Usage\nif __name__ == \"__main__\":\n    sales_processor = SalesDataProcessor()\n    sales_processor.process_data()\n\n    print()\n\n    marketing_processor = MarketingDataProcessor()\n    marketing_processor.process_data()\n</code></pre>"},{"location":"design_pattern/real_time_patterns/template_method_pattern/#key-points","title":"Key Points","text":"<ol> <li>Template Method: The <code>process_data</code> method defines the algorithm's structure.</li> <li>Fixed Steps: Methods like <code>load_data</code>, <code>clean_data</code>, and <code>save_results</code> are implemented in the base class.</li> <li>Hook Steps: The <code>analyze_data</code> method is abstract and must be implemented by subclasses.</li> </ol> <p>This pattern ensures a consistent algorithm structure while allowing flexibility for specific steps.</p>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/","title":"Transformer Pattern","text":"<p>The Transformer Pattern is a design pattern used to convert data from one format or structure to another. It is commonly applied in scenarios where data transformation is required between different layers of an application, such as converting domain models to DTOs (Data Transfer Objects) or mapping API responses to internal data structures.</p>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#key-concepts","title":"Key Concepts","text":"<ol> <li>Input and Output: The pattern takes an input object and transforms it into an output object of a different type or structure.</li> <li>Separation of Concerns: By isolating transformation logic, the pattern promotes cleaner and more maintainable code.</li> <li>Reusability: Transformation logic can be reused across different parts of the application.</li> </ol>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#structure","title":"Structure","text":"<p>The Transformer Pattern typically involves the following components:</p> <ul> <li>Transformer Interface: Defines a contract for transformation.</li> <li>Concrete Transformer: Implements the transformation logic.</li> <li>Input and Output Models: Represent the data before and after transformation.</li> </ul>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#example-in-python","title":"Example in Python","text":"<pre><code>from typing import TypeVar, Generic\n\n# Define generic types for input and output\nI = TypeVar('I')\nO = TypeVar('O')\n\n# Transformer Interface\nclass Transformer(Generic[I, O]):\n    def transform(self, input: I) -&gt; O:\n        raise NotImplementedError(\"Transform method must be implemented\")\n\n# Concrete Transformer\nclass UserToUserDTOTransformer(Transformer[dict, dict]):\n    def transform(self, user: dict) -&gt; dict:\n        return {\n            \"id\": user[\"id\"],\n            \"name\": user[\"name\"],\n            \"email\": user[\"email\"]\n        }\n\n# Input Model\nuser = {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n\n# Usage\ntransformer = UserToUserDTOTransformer()\nuser_dto = transformer.transform(user)\nprint(user_dto)\n</code></pre>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#example-in-nodejs","title":"Example in Node.js","text":"<pre><code>// Transformer Interface\nclass Transformer {\n    transform(input) {\n        throw new Error(\"Transform method must be implemented\");\n    }\n}\n\n// Concrete Transformer\nclass UserToUserDTOTransformer extends Transformer {\n    transform(user) {\n        return {\n            id: user.id,\n            name: user.name,\n            email: user.email\n        };\n    }\n}\n\n// Input Model\nconst user = {\n    id: 1,\n    name: \"John Doe\",\n    email: \"john.doe@example.com\"\n};\n\n// Usage\nconst transformer = new UserToUserDTOTransformer();\nconst userDTO = transformer.transform(user);\nconsole.log(userDTO);\n</code></pre>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#advantages","title":"Advantages","text":"<ul> <li>Simplifies data transformation logic.</li> <li>Improves code readability and maintainability.</li> <li>Encourages reusability of transformation logic.</li> </ul>"},{"location":"design_pattern/real_time_patterns/transformer_pattern/#use-cases","title":"Use Cases","text":"<ul> <li>Mapping database entities to API responses.</li> <li>Converting between different data formats (e.g., JSON to XML).</li> <li>Adapting legacy systems to modern APIs.</li> </ul> <p>The Transformer Pattern is a powerful tool for managing data transformations in a clean and structured way.</p>"},{"location":"python/","title":"Python Programming Language","text":""},{"location":"python/#interview-preparation","title":"Interview Preparation","text":"<ul> <li>Basic Concepts</li> <li>OOPS</li> </ul>"},{"location":"python/#introduction","title":"Introduction","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used in web development, data analysis, artificial intelligence, scientific computing, and more.</p>"},{"location":"python/#history-of-python","title":"History of Python","text":"<p>Python was created by Guido van Rossum in the late 1980s and was first released in 1991. The language was designed to emphasize code readability and simplicity, making it accessible to both beginners and experienced developers.</p>"},{"location":"python/#key-milestones","title":"Key Milestones:","text":"<ul> <li>1989: Guido van Rossum began working on Python during his holiday at Centrum Wiskunde &amp; Informatica (CWI) in the Netherlands.</li> <li>1991: Python 0.9.0 was released, featuring functions, exception handling, and core data types like lists, strings, and dictionaries.</li> <li>1994: Python 1.0 was released, introducing features like lambda, map, filter, and reduce.</li> <li>2000: Python 2.0 was released, adding list comprehensions and garbage collection based on reference counting.</li> <li>2008: Python 3.0 was released, addressing fundamental design flaws and improving the language's consistency, though it was not backward compatible with Python 2.</li> </ul>"},{"location":"python/#python-today","title":"Python Today","text":"<p>Python has grown to become one of the most popular programming languages in the world. It is maintained by the Python Software Foundation (PSF) and has a vibrant community contributing to its development. Its extensive standard library and third-party packages make it a versatile tool for developers across various domains.</p>"},{"location":"python/#conclusion","title":"Conclusion","text":"<p>Python's emphasis on simplicity and readability, combined with its powerful features, has made it a favorite among developers. Its rich history and continuous evolution ensure that it remains a cornerstone of modern programming.</p>"},{"location":"python/python_docs/basic_concepts/","title":"Python Basic Concepts and Data Types","text":""},{"location":"python/python_docs/basic_concepts/#data-types-in-python","title":"Data Types in Python","text":"<p>Python provides several built-in data types. Below is a list of the most commonly used ones:</p>"},{"location":"python/python_docs/basic_concepts/#1-numeric-types","title":"1. Numeric Types","text":"<ul> <li>int: Integer values.</li> <li>float: Floating-point numbers.</li> <li>complex: Complex numbers.</li> </ul> <pre><code># Examples of numeric types\nx = 10         # int\ny = 3.14       # float\nz = 1 + 2j     # complex\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#2-sequence-types","title":"2. Sequence Types","text":"<ul> <li>list: Ordered, mutable collection.</li> <li>tuple: Ordered, immutable collection.</li> <li>range: Sequence of numbers.</li> </ul> <pre><code># Examples of sequence types\nmy_list = [1, 2, 3]       # list\nmy_tuple = (1, 2, 3)      # tuple\nmy_range = range(1, 5)    # range\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#3-text-type","title":"3. Text Type","text":"<ul> <li>str: String of characters.</li> </ul> <pre><code># Example of text type\ngreeting = \"Hello, World!\"  # str\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#4-set-types","title":"4. Set Types","text":"<ul> <li>set: Unordered, mutable collection of unique items.</li> <li>frozenset: Unordered, immutable collection of unique items.</li> </ul> <pre><code># Examples of set types\nmy_set = {1, 2, 3}          # set\nmy_frozenset = frozenset([1, 2, 3])  # frozenset\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#5-mapping-type","title":"5. Mapping Type","text":"<ul> <li>dict: Key-value pairs.</li> </ul> <pre><code># Example of mapping type\nmy_dict = {\"name\": \"Alice\", \"age\": 25}  # dict\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#6-boolean-type","title":"6. Boolean Type","text":"<ul> <li>bool: Represents <code>True</code> or <code>False</code>.</li> </ul> <pre><code># Example of boolean type\nis_active = True  # bool\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#7-none-type","title":"7. None Type","text":"<ul> <li>NoneType: Represents the absence of a value.</li> </ul> <pre><code># Example of None type\nresult = None  # NoneType\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#basic-concepts-in-python","title":"Basic Concepts in Python","text":""},{"location":"python/python_docs/basic_concepts/#1-variables-and-assignment","title":"1. Variables and Assignment","text":"<p>Variables are used to store data.</p> <pre><code>x = 5\nname = \"John\"\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#2-control-flow","title":"2. Control Flow","text":"<ul> <li>if-else: Conditional statements.</li> <li>for and while: Loops.</li> </ul> <pre><code># Example of control flow\nif x &gt; 0:\n    print(\"Positive\")\nelse:\n    print(\"Non-positive\")\n\nfor i in range(3):\n    print(i)\n\nwhile x &gt; 0:\n    print(x)\n    x -= 1\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#3-functions","title":"3. Functions","text":"<p>Functions are reusable blocks of code.</p> <pre><code># Example of a function\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Alice\"))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#4-classes-and-objects","title":"4. Classes and Objects","text":"<p>Python supports object-oriented programming.</p> <pre><code># Example of a class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return f\"My name is {self.name} and I am {self.age} years old.\"\n\nperson = Person(\"Alice\", 25)\nprint(person.introduce())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#5-exception-handling","title":"5. Exception Handling","text":"<p>Handle errors gracefully using <code>try-except</code>.</p> <pre><code># Example of exception handling\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#6-modules-and-imports","title":"6. Modules and Imports","text":"<p>Reuse code by importing modules.</p> <pre><code># Example of importing a module\nimport math\n\nprint(math.sqrt(16))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#7-modules","title":"7. Modules","text":"<p>Modules in Python are files containing Python code (functions, classes, or variables) that can be reused in other programs. They help organize code into manageable sections.</p> <pre><code># Example of creating and using a module\n# my_module.py\ndef add(a, b):\n    return a + b\n\n# main.py\nimport my_module\nprint(my_module.add(2, 3))  # Output: 5\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#8-packages","title":"8. Packages","text":"<p>A package is a collection of modules organized in directories containing a special <code>__init__.py</code> file. Packages allow for hierarchical structuring of the module namespace.</p> <pre><code>my_package/\n    __init__.py\n    module1.py\n    module2.py\n</code></pre> <pre><code># Example of using a package\nfrom my_package import module1\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#9-typing","title":"9. Typing","text":"<p>Python's <code>typing</code> module provides support for type hints, making code more readable and reducing runtime errors.</p> <pre><code>from typing import List, Dict\n\ndef greet(names: List[str]) -&gt; str:\n    return \", \".join(names)\n\nprint(greet([\"Alice\", \"Bob\"]))\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#10-error-handling","title":"10. Error Handling","text":"<p>Error handling in Python is done using <code>try-except</code> blocks. You can also use <code>finally</code> for cleanup and <code>else</code> for code that runs if no exception occurs.</p> <pre><code>try:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\nelse:\n    print(\"Division successful:\", result)\nfinally:\n    print(\"Execution complete.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#11-what-is-a-virtual-environment","title":"11. What is a Virtual Environment?","text":"<p>A virtual environment is an isolated Python environment that allows you to manage dependencies for a specific project without affecting the global Python installation.</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\n# On Windows:\nmyenv\\Scripts\\activate\n# On macOS/Linux:\nsource myenv/bin/activate\n\n# Deactivate the virtual environment\ndeactivate\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#12-python-package-installer-pip","title":"12. Python Package Installer (pip)","text":"<p><code>pip</code> is the package manager for Python, used to install and manage third-party libraries.</p> <pre><code># Install a package\npip install requests\n\n# List installed packages\npip list\n\n# Uninstall a package\npip uninstall requests\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#13-requestresponse-models-with-pydantic","title":"13. Request/Response Models with Pydantic","text":"<p>Pydantic is a library for data validation and settings management using Python type annotations. It is commonly used with FastAPI for request/response models.</p> <pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n\nuser = User(id=1, name=\"Alice\", email=\"alice@example.com\")\nprint(user.dict())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#14-what-is-hashing","title":"14. What is Hashing?","text":"<p>Hashing is the process of converting data into a fixed-size hash value using a hash function. It is commonly used in data structures like hash tables and for cryptographic purposes.</p> <pre><code>import hashlib\n\n# Example of hashing a string\ndata = \"hello\"\nhash_object = hashlib.sha256(data.encode())\nprint(hash_object.hexdigest())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#file-handling","title":"File Handling","text":"<p>File handling in Python allows you to work with files for reading, writing, and appending data. Python provides built-in functions like <code>open()</code> to handle files.</p>"},{"location":"python/python_docs/basic_concepts/#opening-a-file","title":"Opening a File","text":"<p>You can open a file using the <code>open()</code> function. It requires the file name and mode as arguments.</p> <p>Modes: - <code>'r'</code>: Read (default mode) - <code>'w'</code>: Write (overwrites the file if it exists) - <code>'a'</code>: Append (adds data to the end of the file) - <code>'b'</code>: Binary mode - <code>'x'</code>: Create (fails if the file already exists)</p> <pre><code># Example of opening a file\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\nfile.close()\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#writing-to-a-file","title":"Writing to a File","text":"<p>Use the <code>'w'</code> or <code>'a'</code> mode to write data to a file.</p> <pre><code># Example of writing to a file\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#reading-from-a-file","title":"Reading from a File","text":"<p>You can read the entire content, a specific number of characters, or line by line.</p> <pre><code># Example of reading a file\nwith open(\"example.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#appending-to-a-file","title":"Appending to a File","text":"<p>Use the <code>'a'</code> mode to add data to the end of a file.</p> <pre><code># Example of appending to a file\nwith open(\"example.txt\", \"a\") as file:\n    file.write(\"\\nAppended text.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#working-with-binary-files","title":"Working with Binary Files","text":"<p>Binary mode (<code>'b'</code>) is used for non-text files like images or videos.</p> <pre><code># Example of reading a binary file\nwith open(\"image.jpg\", \"rb\") as file:\n    data = file.read()\n    print(data)\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#file-operations","title":"File Operations","text":"<ul> <li><code>file.read()</code>: Reads the entire file.</li> <li><code>file.readline()</code>: Reads one line at a time.</li> <li><code>file.readlines()</code>: Reads all lines into a list.</li> <li><code>file.write(data)</code>: Writes data to the file.</li> <li><code>file.writelines(lines)</code>: Writes a list of lines to the file.</li> </ul>"},{"location":"python/python_docs/basic_concepts/#checking-if-a-file-exists","title":"Checking if a File Exists","text":"<p>Use the <code>os</code> module to check if a file exists.</p> <pre><code>import os\n\nif os.path.exists(\"example.txt\"):\n    print(\"File exists.\")\nelse:\n    print(\"File does not exist.\")\n</code></pre>"},{"location":"python/python_docs/basic_concepts/#closing-files","title":"Closing Files","text":"<p>Always close files after use to free up system resources. Using the <code>with</code> statement automatically closes the file.</p> <pre><code># Example of closing a file\nfile = open(\"example.txt\", \"r\")\nfile.close()\n</code></pre>"},{"location":"python/python_docs/oops/","title":"Object-Oriented Programming (OOP) Concepts in Python","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure code. Python is an object-oriented language that supports OOP principles such as encapsulation, inheritance, polymorphism, and abstraction.</p>"},{"location":"python/python_docs/oops/#key-oop-concepts","title":"Key OOP Concepts","text":""},{"location":"python/python_docs/oops/#1-class-and-object","title":"1. Class and Object","text":"<ul> <li>Class: A blueprint for creating objects.</li> <li>Object: An instance of a class.</li> </ul>"},{"location":"python/python_docs/oops/#example","title":"Example:","text":"<pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name}.\"\n\n# Creating an object\nperson1 = Person(\"Alice\", 30)\nprint(person1.greet())  # Output: Hello, my name is Alice.\n</code></pre>"},{"location":"python/python_docs/oops/#2-encapsulation","title":"2. Encapsulation","text":"<p>Encapsulation is the bundling of data (attributes) and methods (functions) within a class. It also restricts direct access to some components using private or protected members.</p>"},{"location":"python/python_docs/oops/#example_1","title":"Example:","text":"<pre><code>class BankAccount:\n    def __init__(self, balance):\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount(1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n</code></pre>"},{"location":"python/python_docs/oops/#3-inheritance","title":"3. Inheritance","text":"<p>Inheritance allows a class (child) to inherit attributes and methods from another class (parent).</p>"},{"location":"python/python_docs/oops/#example_2","title":"Example:","text":"<pre><code>class Animal:\n    def speak(self):\n        return \"I make a sound.\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\ndog = Dog()\nprint(dog.speak())  # Output: Woof!\n</code></pre>"},{"location":"python/python_docs/oops/#types-of-inheritance","title":"Types of Inheritance","text":"<p>Inheritance in Python can be categorized into the following types:</p> <p>Single Inheritance     A child class inherits from a single parent class.</p>"},{"location":"python/python_docs/oops/#example_3","title":"Example:","text":"<pre><code>class Parent:\n        def func1(self):\n            return \"This is a parent class.\"\n\nclass Child(Parent):\n        def func2(self):\n            return \"This is a child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is a parent class.\nprint(obj.func2())  # Output: This is a child class.\n</code></pre> <p>Multiple Inheritance     A child class inherits from multiple parent classes.</p>"},{"location":"python/python_docs/oops/#example_4","title":"Example:","text":"<pre><code>class Parent1:\n        def func1(self):\n            return \"This is Parent1.\"\n\nclass Parent2:\n        def func2(self):\n            return \"This is Parent2.\"\n\nclass Child(Parent1, Parent2):\n        def func3(self):\n            return \"This is a child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is Parent1.\nprint(obj.func2())  # Output: This is Parent2.\nprint(obj.func3())  # Output: This is a child class.\n</code></pre> <p>Multilevel Inheritance     A child class inherits from a parent class, and another child class inherits from this child class.</p>"},{"location":"python/python_docs/oops/#example_5","title":"Example:","text":"<pre><code>class Grandparent:\n        def func1(self):\n            return \"This is the grandparent class.\"\n\nclass Parent(Grandparent):\n        def func2(self):\n            return \"This is the parent class.\"\n\nclass Child(Parent):\n        def func3(self):\n            return \"This is the child class.\"\n\nobj = Child()\nprint(obj.func1())  # Output: This is the grandparent class.\nprint(obj.func2())  # Output: This is the parent class.\nprint(obj.func3())  # Output: This is the child class.\n</code></pre> <p>Hierarchical Inheritance     Multiple child classes inherit from a single parent class.</p>"},{"location":"python/python_docs/oops/#example_6","title":"Example:","text":"<pre><code>class Parent:\n        def func1(self):\n            return \"This is the parent class.\"\n\nclass Child1(Parent):\n        def func2(self):\n            return \"This is Child1.\"\n\nclass Child2(Parent):\n        def func3(self):\n            return \"This is Child2.\"\n\nobj1 = Child1()\nobj2 = Child2()\nprint(obj1.func1())  # Output: This is the parent class.\nprint(obj1.func2())  # Output: This is Child1.\nprint(obj2.func1())  # Output: This is the parent class.\nprint(obj2.func3())  # Output: This is Child2.\n</code></pre> <p>Hybrid Inheritance     A combination of two or more types of inheritance.</p>"},{"location":"python/python_docs/oops/#example_7","title":"Example:","text":"<pre><code>class Parent:\n        def func1(self):\n            return \"This is the parent class.\"\n\nclass Child1(Parent):\n        def func2(self):\n            return \"This is Child1.\"\n\nclass Child2(Parent):\n        def func3(self):\n            return \"This is Child2.\"\n\nclass GrandChild(Child1, Child2):\n        def func4(self):\n            return \"This is the grandchild class.\"\n\nobj = GrandChild()\nprint(obj.func1())  # Output: This is the parent class.\nprint(obj.func2())  # Output: This is Child1.\nprint(obj.func3())  # Output: This is Child2.\nprint(obj.func4())  # Output: This is the grandchild class.\n</code></pre> <p>Understanding these types of inheritance helps in designing a robust and reusable class hierarchy in Python.</p>"},{"location":"python/python_docs/oops/#4-polymorphism","title":"4. Polymorphism","text":"<p>Polymorphism allows methods in different classes to have the same name but behave differently.</p>"},{"location":"python/python_docs/oops/#example_8","title":"Example:","text":"<pre><code>class Bird:\n    def fly(self):\n        return \"I can fly.\"\n\nclass Penguin(Bird):\n    def fly(self):\n        return \"I cannot fly.\"\n\nbird = Bird()\npenguin = Penguin()\nprint(bird.fly())      # Output: I can fly.\nprint(penguin.fly())   # Output: I cannot fly.\n</code></pre>"},{"location":"python/python_docs/oops/#5-abstraction","title":"5. Abstraction","text":"<p>Abstraction hides implementation details and shows only the essential features of an object. In Python, abstraction can be achieved using abstract base classes (ABC).</p>"},{"location":"python/python_docs/oops/#example_9","title":"Example:","text":"<pre><code>from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\ncircle = Circle(5)\nprint(circle.area())  # Output: 78.5\n</code></pre>"},{"location":"python/python_docs/oops/#conclusion","title":"Conclusion","text":"<p>OOP in Python provides a structured way to organize code, making it reusable, scalable, and easier to maintain. By mastering OOP concepts like encapsulation, inheritance, polymorphism, and abstraction, you can write efficient and clean Python programs.</p>"},{"location":"react/","title":"Interview Preparation","text":"<ul> <li>Learn JS</li> <li>Learn React JS </li> <li>Technical Topics</li> <li>Behavioral Questions</li> <li>Coding Challenges</li> <li>System Design</li> <li>Mock Interviews</li> <li>Resources</li> </ul>"},{"location":"react/#introduction-to-react","title":"Introduction to React","text":"<p>React is a popular JavaScript library for building user interfaces, particularly for single-page applications. It allows developers to create reusable UI components and manage the state of their applications efficiently. React was developed by Facebook and has since become one of the most widely used libraries in the web development ecosystem.</p>"},{"location":"react/#history-of-react","title":"History of React","text":""},{"location":"react/#2011-the-beginning","title":"2011: The Beginning","text":"<p>React was initially created by Jordan Walke, a software engineer at Facebook. It was inspired by XHP, a PHP-based component framework. React was first used internally at Facebook for their News Feed feature.</p>"},{"location":"react/#2013-open-source-release","title":"2013: Open Source Release","text":"<p>In May 2013, Facebook open-sourced React at the JSConf US conference. This marked the beginning of its adoption by the broader developer community. React introduced the concept of a virtual DOM, which improved performance by minimizing direct manipulation of the real DOM.</p>"},{"location":"react/#2015-react-native","title":"2015: React Native","text":"<p>React Native, a framework for building mobile applications using React, was released in 2015. It allowed developers to write cross-platform mobile apps using JavaScript and React, further expanding React's ecosystem.</p>"},{"location":"react/#2016-introduction-of-fiber","title":"2016: Introduction of Fiber","text":"<p>React Fiber, a complete rewrite of React's core algorithm, was announced in 2016 and released in 2017 with React 16. Fiber improved React's rendering capabilities, enabling features like time slicing and better handling of asynchronous rendering.</p>"},{"location":"react/#2017-react-16-and-beyond","title":"2017: React 16 and Beyond","text":"<p>React 16 introduced several new features, including error boundaries, portals, and the ability to return arrays and strings from components. It also improved performance and added support for server-side rendering.</p>"},{"location":"react/#2018-hooks-api","title":"2018: Hooks API","text":"<p>In 2018, React introduced Hooks, a revolutionary feature that allowed developers to use state and other React features in functional components. Hooks simplified code and made it easier to share logic between components.</p>"},{"location":"react/#2020-concurrent-mode-and-suspense","title":"2020: Concurrent Mode and Suspense","text":"<p>React continued to evolve with the introduction of Concurrent Mode and Suspense. These features aimed to improve the user experience by enabling smoother rendering and better handling of asynchronous data fetching.</p>"},{"location":"react/#2022-react-18","title":"2022: React 18","text":"<p>React 18 brought significant advancements, including automatic batching, a new concurrent rendering engine, and an improved Suspense API. These updates made React applications faster and more efficient.</p>"},{"location":"react/#current-advancements","title":"Current Advancements","text":"<p>React continues to be actively developed and maintained by Facebook and the open-source community. Recent advancements include:</p> <ul> <li>Server Components: A new way to build server-rendered applications with better performance.</li> <li>React DevTools: Enhanced debugging tools for developers.</li> <li>Improved TypeScript Support: Better integration with TypeScript for type-safe development.</li> <li>Ecosystem Growth: A thriving ecosystem of libraries and tools, such as Next.js, Remix, and React Query.</li> </ul>"},{"location":"react/#conclusion","title":"Conclusion","text":"<p>React has come a long way since its inception in 2011. Its focus on performance, reusability, and developer experience has made it a cornerstone of modern web development. With continuous updates and a vibrant community, React remains a powerful tool for building dynamic and scalable applications.</p>"},{"location":"react/react_docs/1_js_learn/","title":"JavaScript Basics","text":""},{"location":"react/react_docs/1_js_learn/#what-is-the-window-object","title":"What is the window object?","text":"<p>The <code>window</code> object is the global object in a browser environment. It represents the browser window and provides methods, properties, and events for interacting with the browser.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-document-object","title":"What is the document object?","text":"<p>The <code>document</code> object represents the HTML document loaded in the browser. It allows access to and manipulation of the DOM (Document Object Model).</p>"},{"location":"react/react_docs/1_js_learn/#what-is-a-variable-scope-in-javascript","title":"What is a variable scope in JavaScript?","text":"<p>Variable scope determines where a variable is accessible. JavaScript has three types of scope: - Global Scope: Accessible everywhere. - Function Scope: Accessible only within the function. - Block Scope: Accessible only within a block (<code>{}</code>), introduced with <code>let</code> and <code>const</code>.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-a-closure","title":"What is a closure?","text":"<p>A closure is a function that retains access to its outer scope, even after the outer function has executed.</p> <pre><code>function outer() {\n  let count = 0;\n  return function inner() {\n    count++;\n    return count;\n  };\n}\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-coercion-in-javascript","title":"What is coercion in JavaScript?","text":"<p>Coercion is the automatic or implicit conversion of values from one type to another, such as converting a string to a number.</p> <pre><code>console.log('5' - 2); // 3 (string '5' is coerced to number)\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-the-temporal-dead-zone","title":"What is the temporal dead zone?","text":"<p>The temporal dead zone (TDZ) is the period between the declaration of a variable (using <code>let</code> or <code>const</code>) and its initialization, during which accessing the variable results in a <code>ReferenceError</code>.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-hoisting-in-javascript","title":"What is hoisting in JavaScript?","text":"<p>Hoisting is JavaScript's behavior of moving variable and function declarations to the top of their scope during compilation.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-difference-between-function-expression-and-function-declaration","title":"What is the difference between function expression and function declaration?","text":"<ul> <li>Function Declaration: Defined using the <code>function</code> keyword and hoisted.</li> <li>Function Expression: Assigned to a variable and not hoisted.</li> </ul> <pre><code>// Function Declaration\nfunction greet() {\n  console.log('Hello');\n}\n\n// Function Expression\nconst greet = function() {\n  console.log('Hello');\n};\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-a-callback","title":"What is a callback?","text":"<p>A callback is a function passed as an argument to another function and executed later.</p> <pre><code>function fetchData(callback) {\n  setTimeout(() =&gt; {\n    callback('Data fetched');\n  }, 1000);\n}\nfetchData(console.log);\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-settimeout","title":"What is setTimeout?","text":"<p><code>setTimeout</code> is a function that executes a callback after a specified delay.</p> <pre><code>setTimeout(() =&gt; console.log('Hello after 1 second'), 1000);\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-the-event-loop-in-javascript","title":"What is the event loop in JavaScript?","text":"<p>The event loop is a mechanism that handles asynchronous operations by managing the call stack, callback queue, and microtask queue.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-difference-between-microtask-and-macrotask-callback-queues","title":"What is the difference between microtask and macrotask (callback) queues?","text":"<ul> <li>Microtasks: Include Promises and <code>MutationObserver</code>. They have higher priority.</li> <li>Macrotasks: Include <code>setTimeout</code>, <code>setInterval</code>, and I/O tasks.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#why-does-a-promise-run-before-settimeout","title":"Why does a Promise run before setTimeout?","text":"<p>Promises are part of the microtask queue, which has higher priority than the macrotask queue where <code>setTimeout</code> resides.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-output-of-this-tricky-async-code-practice-question","title":"What is the output of this tricky async code? (\ud83c\udd95 Practice question)","text":"<pre><code>console.log('Start');\nsetTimeout(() =&gt; console.log('Timeout'), 0);\nPromise.resolve().then(() =&gt; console.log('Promise'));\nconsole.log('End');\n</code></pre> <p>Output:</p> <pre><code>Start\nEnd\nPromise\nTimeout\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-a-promise","title":"What is a promise?","text":"<p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-callback-hell","title":"What is callback hell?","text":"<p>Callback hell refers to nested callbacks that make code difficult to read and maintain.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-reduce-in-javascript","title":"What is .reduce() in JavaScript?","text":"<p><code>.reduce()</code> is an array method that reduces an array to a single value by applying a callback function.</p> <pre><code>const sum = [1, 2, 3].reduce((acc, curr) =&gt; acc + curr, 0);\nconsole.log(sum); // 6\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-are-map-and-filter-how-are-they-different","title":"What are .map() and .filter()? How are they different?","text":"<ul> <li><code>.map()</code>: Transforms each element in an array and returns a new array.</li> <li><code>.filter()</code>: Filters elements based on a condition and returns a new array.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-the-difference-between-map-and-foreach","title":"What is the difference between .map() and .forEach()?","text":"<ul> <li><code>.map()</code>: Returns a new array.</li> <li><code>.forEach()</code>: Executes a function for each element but does not return a new array.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-are-template-literals","title":"What are template literals?","text":"<p>Template literals allow embedding expressions in strings using backticks (<code>`</code>).</p> <pre><code>const name = 'John';\nconsole.log(`Hello, ${name}!`);\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-the-difference-between-and","title":"What is the difference between == and ===?","text":"<ul> <li><code>==</code>: Compares values after type coercion.</li> <li><code>===</code>: Compares values without type coercion.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-currying-in-javascript","title":"What is currying in JavaScript?","text":"<p>Currying is a technique of transforming a function with multiple arguments into a sequence of functions, each taking a single argument.</p> <pre><code>const add = (a) =&gt; (b) =&gt; a + b;\nconsole.log(add(2)(3)); // 5\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#deep-copy-using-recursion-how-to-implement-it","title":"Deep copy using recursion \u2013 how to implement it?","text":"<pre><code>function deepCopy(obj) {\n  if (obj === null || typeof obj !== 'object') return obj;\n  const copy = Array.isArray(obj) ? [] : {};\n  for (const key in obj) {\n    copy[key] = deepCopy(obj[key]);\n  }\n  return copy;\n}\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#string-manipulation-in-javascript","title":"String manipulation in JavaScript","text":"<p>JavaScript provides methods like <code>split()</code>, <code>replace()</code>, <code>toUpperCase()</code>, <code>toLowerCase()</code>, and <code>substring()</code> for string manipulation.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-void-in-javascript","title":"What is void in JavaScript?","text":"<p>The <code>void</code> operator evaluates an expression and returns <code>undefined</code>.</p> <pre><code>void 0; // undefined\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#javascript-intermediate-topics","title":"JavaScript Intermediate Topics","text":""},{"location":"react/react_docs/1_js_learn/#what-is-event-bubbling-and-capturing","title":"What is event bubbling and capturing?","text":"<ul> <li>Bubbling: Events propagate from the target element to the root.</li> <li>Capturing: Events propagate from the root to the target element.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-event-delegation","title":"What is event delegation?","text":"<p>Event delegation is a technique where a parent element handles events for its child elements using event bubbling.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-debouncing","title":"What is debouncing?","text":"<p>Debouncing limits the rate at which a function executes by delaying its execution until after a specified time has elapsed since the last call.</p> <pre><code>function debounce(func, delay) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() =&gt; func.apply(this, args), delay);\n  };\n}\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-throttling","title":"What is throttling?","text":"<p>Throttling ensures a function is executed at most once in a specified time interval.</p> <pre><code>function throttle(func, limit) {\n  let lastCall = 0;\n  return function (...args) {\n    const now = Date.now();\n    if (now - lastCall &gt;= limit) {\n      lastCall = now;\n      func.apply(this, args);\n    }\n  };\n}\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#compare-debouncing-and-throttling","title":"Compare debouncing and throttling.","text":"<ul> <li>Debouncing: Delays execution until a pause in events.</li> <li>Throttling: Limits execution to once per interval.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-the-timer-queue","title":"What is the timer queue?","text":"<p>The timer queue is where macrotasks like <code>setTimeout</code> and <code>setInterval</code> are queued for execution.</p>"},{"location":"react/react_docs/1_js_learn/#what-are-localstorage-sessionstorage-and-cookies","title":"What are localStorage, sessionStorage, and cookies?","text":"<ul> <li>localStorage: Stores data with no expiration.</li> <li>sessionStorage: Stores data for the session.</li> <li>Cookies: Stores small amounts of data with expiration and sent with HTTP requests.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-a-web-worker","title":"What is a web worker?","text":"<p>A web worker is a script that runs in the background, separate from the main thread, to perform tasks without blocking the UI.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-a-service-worker","title":"What is a service worker?","text":"<p>A service worker is a script that intercepts network requests and enables offline capabilities, caching, and push notifications.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-difference-between-web-worker-and-service-worker","title":"What is the difference between web worker and service worker?","text":"<ul> <li>Web Worker: For background tasks.</li> <li>Service Worker: For network-related tasks and offline support.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-a-heap-and-stack-in-javascript","title":"What is a heap and stack in JavaScript?","text":"<ul> <li>Heap: Memory for objects and dynamic allocation.</li> <li>Stack: Memory for function calls and execution context.</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-a-currying-function","title":"What is a currying function?","text":"<p>A currying function transforms a function with multiple arguments into a sequence of functions, each taking a single argument.</p>"},{"location":"react/react_docs/1_js_learn/#what-is-the-scope-chain","title":"What is the scope chain?","text":"<p>The scope chain is the hierarchy of scopes used to resolve variable references.</p>"},{"location":"react/react_docs/1_js_learn/#es6-and-modern-javascript-features","title":"ES6 and Modern JavaScript Features","text":""},{"location":"react/react_docs/1_js_learn/#what-are-the-main-es6-features","title":"What are the main ES6 features?","text":"<ul> <li>Arrow functions</li> <li>Template literals</li> <li>Destructuring</li> <li>Spread/rest operators</li> <li>Classes</li> <li>Promises</li> <li>Modules</li> </ul>"},{"location":"react/react_docs/1_js_learn/#what-is-an-arrow-function","title":"What is an arrow function?","text":"<p>An arrow function is a concise syntax for writing functions. It does not have its own <code>this</code>.</p> <pre><code>const add = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-are-default-parameters-in-es6","title":"What are default parameters in ES6? \ud83c\udd95","text":"<p>Default parameters allow setting default values for function arguments.</p> <pre><code>function greet(name = 'Guest') {\n  console.log(`Hello, ${name}`);\n}\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-destructuring-in-javascript","title":"What is destructuring in JavaScript? \ud83c\udd95","text":"<p>Destructuring allows unpacking values from arrays or objects into variables.</p> <pre><code>const [a, b] = [1, 2];\nconst { name } = { name: 'John' };\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-is-the-spread-operator","title":"What is the spread operator? \ud83c\udd95","text":"<p>The spread operator (<code>...</code>) expands an array or object.</p> <pre><code>const arr = [1, 2, 3];\nconst newArr = [...arr, 4];\n</code></pre>"},{"location":"react/react_docs/1_js_learn/#what-are-rest-parameters","title":"What are rest parameters? \ud83c\udd95","text":"<p>Rest parameters (<code>...</code>) collect arguments into an array.</p> <pre><code>function sum(...nums) {\n  return nums.reduce((a, b) =&gt; a + b, 0);\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/","title":"React Basics","text":""},{"location":"react/react_docs/2_react_learn/#what-is-react","title":"What is React?","text":"<p>React is a JavaScript library for building user interfaces.</p>"},{"location":"react/react_docs/2_react_learn/#what-are-the-main-features-and-advantages-of-react","title":"What are the main features and advantages of React?","text":"<ul> <li>Component-based architecture</li> <li>Virtual DOM for performance</li> <li>One-way data binding</li> <li>Reusable components</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-jsx","title":"What is JSX?","text":"<p>JSX is a syntax extension for JavaScript that allows writing HTML-like code in React.</p>"},{"location":"react/react_docs/2_react_learn/#how-is-jsx-different-from-html","title":"How is JSX different from HTML?","text":"<p>JSX uses camelCase for attributes and allows embedding JavaScript expressions.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-the-virtual-dom-how-does-it-work","title":"What is the Virtual DOM? How does it work?","text":"<p>The Virtual DOM is a lightweight representation of the real DOM. React updates the Virtual DOM and efficiently syncs changes with the real DOM.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-the-difference-between-a-functional-and-class-component","title":"What is the difference between a functional and class component?","text":"<ul> <li>Functional Component: A simple function that returns JSX.</li> <li>Class Component: A class that extends <code>React.Component</code> and includes lifecycle methods.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-are-props-in-react","title":"What are props in React?","text":"<p>Props are inputs to components, passed as attributes.</p>"},{"location":"react/react_docs/2_react_learn/#how-is-state-different-from-props","title":"How is state different from props?","text":"<ul> <li>State: Managed within the component.</li> <li>Props: Passed from parent to child.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-state-in-react","title":"What is state in React?","text":"<p>State is an object that holds data that can change over time.</p>"},{"location":"react/react_docs/2_react_learn/#how-do-you-use-the-usestate-hook","title":"How do you use the useState hook?","text":"<pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#explain-the-concept-of-one-way-data-binding-in-react","title":"Explain the concept of one-way data binding in React.","text":"<p>In React, data flows from parent to child components via props, ensuring a unidirectional data flow.</p>"},{"location":"react/react_docs/2_react_learn/#what-are-keys-in-react-why-are-they-important","title":"What are keys in React? Why are they important?","text":"<p>Keys help React identify which elements have changed, improving rendering performance.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-the-purpose-of-render-in-class-components","title":"What is the purpose of render() in class components?","text":"<p>The <code>render()</code> method returns the JSX to be rendered.</p>"},{"location":"react/react_docs/2_react_learn/#react-hooks-component-logic","title":"React Hooks &amp; Component Logic","text":""},{"location":"react/react_docs/2_react_learn/#what-are-react-hooks","title":"What are React hooks?","text":"<p>Hooks are functions that let you use state and lifecycle features in functional components.</p>"},{"location":"react/react_docs/2_react_learn/#name-commonly-used-hooks","title":"Name commonly used hooks.","text":"<ul> <li><code>useState</code></li> <li><code>useEffect</code></li> <li><code>useContext</code></li> <li><code>useReducer</code></li> </ul>"},{"location":"react/react_docs/2_react_learn/#explain-the-useeffect-hook","title":"Explain the useEffect hook.","text":"<p><code>useEffect</code> performs side effects in functional components.</p>"},{"location":"react/react_docs/2_react_learn/#why-is-cleanup-needed-in-useeffect","title":"Why is cleanup needed in useEffect?","text":"<p>Cleanup prevents memory leaks by removing subscriptions or timers.</p>"},{"location":"react/react_docs/2_react_learn/#how-is-useeffect-different-from-componentdidmount-and-componentdidupdate","title":"How is useEffect different from componentDidMount and componentDidUpdate?","text":"<p><code>useEffect</code> combines the behavior of <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code>.</p>"},{"location":"react/react_docs/2_react_learn/#explain-usecallback-vs-usememo","title":"Explain useCallback vs useMemo.","text":"<ul> <li>useCallback: Memoizes a function.</li> <li>useMemo: Memoizes a value.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-memoization-in-react","title":"What is memoization in React?","text":"<p>Memoization optimizes performance by caching results of expensive computations.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-a-custom-hook","title":"What is a custom hook?","text":"<p>A custom hook is a reusable function that encapsulates logic using hooks.</p>"},{"location":"react/react_docs/2_react_learn/#how-do-you-create-a-custom-hook-and-why","title":"How do you create a custom hook and why?","text":"<pre><code>function useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n  const increment = () =&gt; setCount(count + 1);\n  return { count, increment };\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#what-is-the-usereducer-hook","title":"What is the useReducer hook?","text":"<p><code>useReducer</code> is an alternative to <code>useState</code> for managing complex state logic.</p>"},{"location":"react/react_docs/2_react_learn/#implement-a-counter-using-usereducer","title":"Implement a counter using useReducer.","text":"<pre><code>import React, { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n  return &lt;button onClick={() =&gt; dispatch({ type: 'increment' })}&gt;{state.count}&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#what-is-a-pure-component","title":"What is a pure component?","text":"<p>A pure component renders only when its props or state change.</p>"},{"location":"react/react_docs/2_react_learn/#react-forms-and-components","title":"React Forms and Components","text":""},{"location":"react/react_docs/2_react_learn/#what-is-a-controlled-component","title":"What is a controlled component?","text":"<p>A controlled component has its value controlled by React state.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-an-uncontrolled-component","title":"What is an uncontrolled component?","text":"<p>An uncontrolled component manages its value using the DOM.</p>"},{"location":"react/react_docs/2_react_learn/#how-does-react-handle-forms","title":"How does React handle forms?","text":"<p>React handles forms using controlled components and event handlers.</p>"},{"location":"react/react_docs/2_react_learn/#explain-event-handling-for-inputs","title":"Explain event handling for inputs.","text":"<p>React uses the <code>onChange</code> event to handle input changes.</p>"},{"location":"react/react_docs/2_react_learn/#react-advanced-concepts","title":"React Advanced Concepts","text":""},{"location":"react/react_docs/2_react_learn/#what-are-higher-order-components-hocs","title":"What are higher-order components (HOCs)?","text":"<p>HOCs are functions that take a component and return a new component.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-the-context-api-how-is-it-used-to-manage-state-globally","title":"What is the Context API? How is it used to manage state globally?","text":"<p>The Context API provides a way to share state across components without prop drilling.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-reactfragment-and-when-would-you-use-it","title":"What is React.Fragment, and when would you use it?","text":"<p><code>React.Fragment</code> groups multiple elements without adding extra nodes to the DOM.</p>"},{"location":"react/react_docs/2_react_learn/#what-are-react-portals-when-would-you-use-them","title":"What are React Portals? When would you use them?","text":"<p>Portals render children into a DOM node outside the parent component.</p>"},{"location":"react/react_docs/2_react_learn/#what-are-proptypes-how-do-you-validate-props","title":"What are PropTypes? How do you validate props?","text":"<p>PropTypes validate props passed to components.</p> <pre><code>import PropTypes from 'prop-types';\n\nfunction MyComponent({ name }) {\n  return &lt;div&gt;{name}&lt;/div&gt;;\n}\n\nMyComponent.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#what-is-lazy-loading-in-react-explain-reactlazy-and-suspense","title":"What is lazy loading in React? Explain React.lazy and Suspense.","text":"<p>Lazy loading loads components only when needed. <code>React.lazy</code> and <code>Suspense</code> enable this.</p> <pre><code>const LazyComponent = React.lazy(() =&gt; import('./LazyComponent'));\n\nfunction App() {\n  return (\n    &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n      &lt;LazyComponent /&gt;\n    &lt;/React.Suspense&gt;\n  );\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#what-is-reconciliation-in-react","title":"What is reconciliation in React?","text":"<p>Reconciliation is React's process of updating the DOM by comparing the Virtual DOM with the previous version.</p>"},{"location":"react/react_docs/2_react_learn/#how-does-the-virtual-dom-compare-elements-during-updates","title":"How does the Virtual DOM compare elements during updates?","text":"<p>React uses a diffing algorithm to compare elements and update only the changed parts.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-server-side-rendering-ssr-in-react","title":"What is server-side rendering (SSR) in React?","text":"<p>SSR renders React components on the server and sends HTML to the client.</p>"},{"location":"react/react_docs/2_react_learn/#how-does-ssr-differ-from-client-side-rendering","title":"How does SSR differ from client-side rendering?","text":"<ul> <li>SSR: Renders on the server.</li> <li>Client-side rendering: Renders in the browser.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-hydration-in-react","title":"What is hydration in React?","text":"<p>Hydration attaches event listeners to server-rendered HTML.</p>"},{"location":"react/react_docs/2_react_learn/#how-does-the-react-fiber-architecture-improve-performance","title":"How does the React Fiber architecture improve performance?","text":"<p>Fiber improves rendering performance by breaking rendering work into chunks.</p>"},{"location":"react/react_docs/2_react_learn/#how-would-you-handle-global-state-management-without-redux","title":"How would you handle global state management without Redux?","text":"<p>Use the Context API or libraries like Zustand or Jotai.</p>"},{"location":"react/react_docs/2_react_learn/#explain-error-boundaries-in-react-how-do-you-implement-them","title":"Explain error boundaries in React. How do you implement them?","text":"<p>Error boundaries catch JavaScript errors in components.</p> <pre><code>class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#react-performance-optimization","title":"React Performance &amp; Optimization","text":""},{"location":"react/react_docs/2_react_learn/#how-to-optimize-a-react-component-to-prevent-unnecessary-re-renders","title":"How to optimize a React component to prevent unnecessary re-renders?","text":"<ul> <li>Use <code>React.memo</code>.</li> <li>Use <code>useCallback</code> and <code>useMemo</code>.</li> <li>Avoid inline functions.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-reactmemo","title":"What is React.memo?","text":"<p><code>React.memo</code> is a higher-order component that prevents re-renders if props do not change.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-usetransition-react-18-feature","title":"What is useTransition? (React 18 feature)","text":"<p><code>useTransition</code> allows marking updates as non-urgent.</p>"},{"location":"react/react_docs/2_react_learn/#write-a-react-component-to-fetch-data-from-an-api-and-display-it","title":"Write a React component to fetch data from an API and display it.","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch('https://api.example.com/data')\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; setData(data));\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : 'Loading...'}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"react/react_docs/2_react_learn/#explain-how-you-would-debug-a-react-application-with-performance-issues","title":"Explain how you would debug a React application with performance issues.","text":"<ul> <li>Use React Developer Tools.</li> <li>Profile components with the Performance tab.</li> <li>Optimize rendering with <code>React.memo</code> and hooks.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#react-vs-other-tech","title":"React vs Other Tech","text":""},{"location":"react/react_docs/2_react_learn/#what-is-the-difference-between-react-and-react-native","title":"What is the difference between React and React Native?","text":"<ul> <li>React: For building web applications.</li> <li>React Native: For building mobile applications.</li> </ul>"},{"location":"react/react_docs/2_react_learn/#what-is-redux-and-how-does-it-integrate-with-react","title":"What is Redux, and how does it integrate with React?","text":"<p>Redux is a state management library. It integrates with React using the <code>react-redux</code> library.</p>"},{"location":"react/react_docs/2_react_learn/#uiux-and-responsive-design","title":"UI/UX and Responsive Design","text":""},{"location":"react/react_docs/2_react_learn/#what-is-responsive-font-size","title":"What is responsive font size?","text":"<p>Responsive font size adjusts based on screen size using CSS units like <code>em</code>, <code>rem</code>, or media queries.</p>"},{"location":"react/react_docs/2_react_learn/#what-is-the-solid-principle-applies-to-component-design-architecture","title":"What is the SOLID principle? (applies to component design &amp; architecture)","text":"<p>The SOLID principles are design principles for maintainable and scalable code: - S: Single Responsibility Principle - O: Open/Closed Principle - L: Liskov Substitution Principle - I: Interface Segregation Principle - D: Dependency Inversion Principle</p>"},{"location":"react/react_docs/3_technical_topics/","title":"React JS Technical Topics","text":""},{"location":"react/react_docs/3_technical_topics/#1-what-is-react","title":"1. What is React?","text":"<p>React is a JavaScript library for building user interfaces. It allows developers to create reusable UI components and manage the state of applications efficiently.</p>"},{"location":"react/react_docs/3_technical_topics/#2-what-are-components-in-react","title":"2. What are Components in React?","text":"<p>Components are the building blocks of a React application. They can be functional or class-based and are used to encapsulate logic and UI.</p>"},{"location":"react/react_docs/3_technical_topics/#3-what-is-jsx","title":"3. What is JSX?","text":"<p>JSX stands for JavaScript XML. It is a syntax extension for JavaScript that allows you to write HTML-like code inside JavaScript files.</p>"},{"location":"react/react_docs/3_technical_topics/#4-what-is-state-in-react","title":"4. What is State in React?","text":"<p>State is an object that holds data or information about the component. It is managed within the component and can change over time.</p>"},{"location":"react/react_docs/3_technical_topics/#5-what-are-props-in-react","title":"5. What are Props in React?","text":"<p>Props (short for properties) are used to pass data from one component to another. They are immutable and read-only.</p>"},{"location":"react/react_docs/3_technical_topics/#6-what-is-the-virtual-dom","title":"6. What is the Virtual DOM?","text":"<p>Virtual DOM is a lightweight representation of the real DOM. React uses it to optimize updates by comparing changes and updating only the necessary parts of the real DOM.</p>"},{"location":"react/react_docs/3_technical_topics/#7-what-are-react-hooks","title":"7. What are React Hooks?","text":"<p>Hooks are functions that let you use state and other React features in functional components. Examples include <code>useState</code>, <code>useEffect</code>, and <code>useContext</code>.</p>"},{"location":"react/react_docs/3_technical_topics/#8-what-is-redux","title":"8. What is Redux?","text":"<p>Redux is a state management library often used with React. It provides a centralized store for managing application state.</p>"},{"location":"react/react_docs/3_technical_topics/#9-what-is-react-router","title":"9. What is React Router?","text":"<p>React Router is a library for routing in React applications. It allows navigation between different components or pages without reloading the page.</p>"},{"location":"react/react_docs/3_technical_topics/#10-what-is-context-api","title":"10. What is Context API?","text":"<p>Context API is a React feature that allows you to share state across components without passing props manually at every level.</p>"},{"location":"react/react_docs/3_technical_topics/#11-what-is-the-difference-between-class-and-functional-components","title":"11. What is the difference between Class and Functional Components?","text":"<ul> <li>Class Components: Use ES6 classes, have lifecycle methods, and manage state with <code>this.state</code>.</li> <li>Functional Components: Use functions, are stateless by default, and can use hooks for state and lifecycle management.</li> </ul>"},{"location":"react/react_docs/3_technical_topics/#12-what-is-react-fiber","title":"12. What is React Fiber?","text":"<p>React Fiber is the new reconciliation engine in React. It improves rendering performance and allows React to split rendering work into chunks.</p>"},{"location":"react/react_docs/3_technical_topics/#13-what-is-the-use-of-useeffect-hook","title":"13. What is the use of <code>useEffect</code> Hook?","text":"<p><code>useEffect</code> is a hook used to perform side effects in functional components, such as fetching data or subscribing to events.</p>"},{"location":"react/react_docs/3_technical_topics/#14-what-are-higher-order-components-hoc","title":"14. What are Higher-Order Components (HOC)?","text":"<p>HOCs are functions that take a component and return a new component. They are used for reusing component logic.</p>"},{"location":"react/react_docs/3_technical_topics/#15-what-is-react-strict-mode","title":"15. What is React Strict Mode?","text":"<p>Strict Mode is a tool for highlighting potential problems in an application. It activates additional checks and warnings for its descendants.</p>"},{"location":"react/react_docs/3_technical_topics/#16-what-is-lazy-loading-in-react","title":"16. What is Lazy Loading in React?","text":"<p>Lazy Loading is a technique for loading components or resources only when they are needed, improving performance.</p>"},{"location":"react/react_docs/3_technical_topics/#17-what-is-the-difference-between-controlled-and-uncontrolled-components","title":"17. What is the difference between Controlled and Uncontrolled Components?","text":"<ul> <li>Controlled Components: Components where form data is handled by React state.</li> <li>Uncontrolled Components: Components where form data is handled by the DOM.</li> </ul>"},{"location":"react/react_docs/3_technical_topics/#18-what-is-reacts-key-prop","title":"18. What is React's <code>key</code> Prop?","text":"<p><code>key</code> is a special attribute used to identify elements in a list. It helps React optimize rendering by tracking changes.</p>"},{"location":"react/react_docs/3_technical_topics/#19-what-is-server-side-rendering-ssr","title":"19. What is Server-Side Rendering (SSR)?","text":"<p>SSR is the process of rendering React components on the server and sending HTML to the client, improving performance and SEO.</p>"},{"location":"react/react_docs/3_technical_topics/#20-what-is-the-difference-between-usestate-and-usereducer","title":"20. What is the difference between <code>useState</code> and <code>useReducer</code>?","text":"<ul> <li><code>useState</code>: Used for managing simple state.</li> <li><code>useReducer</code>: Used for managing complex state logic.</li> </ul>"},{"location":"react/react_docs/3_technical_topics/#21-what-is-reactmemo","title":"21. What is React.memo?","text":"<p>React.memo is a higher-order component that prevents unnecessary re-renders by memoizing the component's output.</p>"},{"location":"react/react_docs/3_technical_topics/#22-what-is-the-purpose-of-reactfragment","title":"22. What is the purpose of <code>React.Fragment</code>?","text":"<p><code>React.Fragment</code> is used to group multiple elements without adding extra nodes to the DOM.</p>"},{"location":"react/react_docs/3_technical_topics/#23-what-is-the-difference-between-useeffect-and-uselayouteffect","title":"23. What is the difference between <code>useEffect</code> and <code>useLayoutEffect</code>?","text":"<ul> <li><code>useEffect</code>: Runs after the render is committed to the screen.</li> <li><code>useLayoutEffect</code>: Runs synchronously after all DOM mutations.</li> </ul>"},{"location":"react/react_docs/3_technical_topics/#24-what-is-prop-drilling","title":"24. What is Prop Drilling?","text":"<p>Prop Drilling is the process of passing props through multiple levels of components to reach a deeply nested component.</p>"},{"location":"react/react_docs/3_technical_topics/#25-what-is-reacts-concurrent-mode","title":"25. What is React's Concurrent Mode?","text":"<p>Concurrent Mode is an experimental feature that allows React to render updates in the background without blocking the main thread.</p> <p>This document provides a comprehensive overview of React JS topics with answers. Use the color-coded text for better readability and understanding.</p>"},{"location":"react/react_docs/behavioral_questions/","title":"Behavioral Topics in React","text":""},{"location":"react/react_docs/behavioral_questions/#1-state-management","title":"1. State Management","text":"<p>State management is a core concept in React that allows components to manage and update their internal state.</p> <pre><code>import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#2-props-and-component-communication","title":"2. Props and Component Communication","text":"<p>Props are used to pass data from a parent component to a child component.</p> <pre><code>function Greeting({ name }) {\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n}\n\nfunction App() {\n  return &lt;Greeting name=\"Lenin\" /&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#3-lifecycle-methods","title":"3. Lifecycle Methods","text":"<p>React components have lifecycle methods that allow you to hook into different phases of a component's life.</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction Timer() {\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {\n      console.log('Timer running...');\n    }, 1000);\n\n    return () =&gt; clearInterval(timer); // Cleanup on unmount\n  }, []);\n\n  return &lt;p&gt;Check the console for timer logs.&lt;/p&gt;;\n}\n\nexport default Timer;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#4-conditional-rendering","title":"4. Conditional Rendering","text":"<p>React allows you to render components conditionally based on certain conditions.</p> <pre><code>function UserGreeting({ isLoggedIn }) {\n  return (\n    &lt;div&gt;\n      {isLoggedIn ? &lt;h1&gt;Welcome back!&lt;/h1&gt; : &lt;h1&gt;Please log in.&lt;/h1&gt;}\n    &lt;/div&gt;\n  );\n}\n\nexport default UserGreeting;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#5-handling-events","title":"5. Handling Events","text":"<p>React provides a way to handle user interactions through event handlers.</p> <pre><code>function ButtonClick() {\n  const handleClick = () =&gt; {\n    alert('Button clicked!');\n  };\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n\nexport default ButtonClick;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#6-forms-and-controlled-components","title":"6. Forms and Controlled Components","text":"<p>React uses controlled components to manage form inputs.</p> <pre><code>import React, { useState } from 'react';\n\nfunction LoginForm() {\n  const [username, setUsername] = useState('');\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    alert(`Username: ${username}`);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={username}\n        onChange={(e) =&gt; setUsername(e.target.value)}\n        placeholder=\"Enter username\"\n      /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default LoginForm;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#7-context-api","title":"7. Context API","text":"<p>The Context API is used for managing global state in a React application.</p> <pre><code>import React, { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n  return &lt;button style={{ background: theme === 'dark' ? '#333' : '#fff' }}&gt;Themed Button&lt;/button&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;ThemeContext.Provider value=\"dark\"&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#8-error-boundaries","title":"8. Error Boundaries","text":"<p>Error boundaries are used to catch JavaScript errors in a component tree.</p> <pre><code>import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.error('Error caught:', error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#9-react-hooks","title":"9. React Hooks","text":"<p>Hooks allow you to use state and other React features in functional components.</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nfunction FetchData() {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch('https://api.example.com/data')\n      .then((response) =&gt; response.json())\n      .then((data) =&gt; setData(data));\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : 'Loading...'}&lt;/div&gt;;\n}\n\nexport default FetchData;\n</code></pre>"},{"location":"react/react_docs/behavioral_questions/#10-performance-optimization","title":"10. Performance Optimization","text":"<p>React provides tools like <code>React.memo</code> and <code>useMemo</code> for optimizing performance.</p> <pre><code>import React, { useState, useMemo } from 'react';\n\nfunction ExpensiveCalculation({ num }) {\n  const calculate = (n) =&gt; {\n    console.log('Calculating...');\n    return n * 2;\n  };\n\n  const result = useMemo(() =&gt; calculate(num), [num]);\n\n  return &lt;p&gt;Result: {result}&lt;/p&gt;;\n}\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;ExpensiveCalculation num={count} /&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"}]}